
profilling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba34  0800ba34  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba3c  0800ba3c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba3c  0800ba3c  0001ba3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba40  0800ba40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ba44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb8  20000094  0800bad8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c4c  0800bad8  00024c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fbcc  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000616a  00000000  00000000  0004fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00055e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001da0  00000000  00000000  00057db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f83e  00000000  00000000  00059b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002876c  00000000  00000000  0007938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2617  00000000  00000000  000a1afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088a8  00000000  00000000  00144164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8d4 	.word	0x0800b8d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800b8d4 	.word	0x0800b8d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3dwtC1Ev>:
 *      Author: vitor
 */

#include "DWT.h"

dwt::dwt()
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated constructor stub
    CoreDebug->DEMCR |= DWT_CTRL_EXCTRCENA_Msk; /* enable DWT hardware */
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <_ZN3dwtC1Ev+0xa4>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	4a24      	ldr	r2, [pc, #144]	; (800058c <_ZN3dwtC1Ev+0xa4>)
 80004fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000500:	60d3      	str	r3, [r2, #12]

    DWT->CTRL = 0;     /* reset control register */
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;   /* reset cpu cycle counter register */
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
    DWT->EXCCNT = 0;   /* reset exception cycle counter register */
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
    DWT->SLEEPCNT = 0; /* reset sleep cycle counter register */
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]

    DWT->LSUCNT = 0;  /* reset load store counter register */
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
    DWT->FOLDCNT = 0; /* reset instruction fold counter register */
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
    DWT->CPICNT = 0;  /* reset cpi counter register */
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <_ZN3dwtC1Ev+0xa8>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]

    dwt_ctrl |= DWT_CTRL_CYCCNTENA_Msk;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f043 0201 	orr.w	r2, r3, #1
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
    dwt_ctrl |= DWT_CTRL_SLEEPEVTENA_Msk;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
    dwt_ctrl |= DWT_CTRL_EXCEVTENA_Msk;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	601a      	str	r2, [r3, #0]

    dwt_ctrl |= DWT_CTRL_LSUEVTENA_Msk;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
    dwt_ctrl |= DWT_CTRL_FOLDEVTENA_Msk;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	601a      	str	r2, [r3, #0]
    dwt_ctrl |= DWT_CTRL_CPIEVTENA_Msk;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]

    this->position = 0;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
}
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000edf0 	.word	0xe000edf0
 8000590:	e0001000 	.word	0xe0001000

08000594 <_ZN3dwt5startEv>:

void dwt::start(){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	DWT->CTRL |= dwt_ctrl;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <_ZN3dwt5startEv+0x24>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <_ZN3dwt5startEv+0x24>)
 80005a6:	4313      	orrs	r3, r2
 80005a8:	600b      	str	r3, [r1, #0]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000

080005bc <_ZN3dwt4stopEv>:
void dwt::stop(){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	DWT->CTRL &= ~dwt_ctrl;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <_ZN3dwt4stopEv+0x24>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4904      	ldr	r1, [pc, #16]	; (80005e0 <_ZN3dwt4stopEv+0x24>)
 80005d0:	4013      	ands	r3, r2
 80005d2:	600b      	str	r3, [r1, #0]

}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e0001000 	.word	0xe0001000

080005e4 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 */

#include "GPIO.h"


GPIO::GPIO(GPIO_TypeDef *port_address, uint16_t pin_address) :port(port_address), pin(pin_address) {}
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	809a      	strh	r2, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4618      	mov	r0, r3
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <_ZN4GPIO5writeE13GPIO_PinState>:

void GPIO::write(GPIO_PinState state) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
	/*Escre em um pino de GPIO*/
	HAL_GPIO_WritePin(this->port, this->pin, state);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	889b      	ldrh	r3, [r3, #4]
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	f001 f998 	bl	8001958 <HAL_GPIO_WritePin>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <_ZN4GPIO4readEv>:

bool GPIO::read() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	/*Le os dados de uma GPIO*/
	return (bool) HAL_GPIO_ReadPin(this->port, this->pin);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	889b      	ldrh	r3, [r3, #4]
 8000640:	4619      	mov	r1, r3
 8000642:	4610      	mov	r0, r2
 8000644:	f001 f970 	bl	8001928 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf14      	ite	ne
 800064e:	2301      	movne	r3, #1
 8000650:	2300      	moveq	r3, #0
 8000652:	b2db      	uxtb	r3, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_ZN4GPIO6toogleEmm>:

void GPIO::toogle(uint32_t time_hight, uint32_t time_low) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
	/*Faz com que um pino fique oscilando entre alto e baixo, por padrão essa isso acontece a cada 1s*/
	HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_SET);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	889b      	ldrh	r3, [r3, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	f001 f970 	bl	8001958 <HAL_GPIO_WritePin>
	osDelay(time_hight);
 8000678:	68b8      	ldr	r0, [r7, #8]
 800067a:	f008 fa8c 	bl	8008b96 <osDelay>
	HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_RESET);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	889b      	ldrh	r3, [r3, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	f001 f965 	bl	8001958 <HAL_GPIO_WritePin>
	osDelay(time_low);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f008 fa81 	bl	8008b96 <osDelay>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN4GPIO6toogleEv>:

void GPIO::toogle() {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	/*Faz com que um pino fique oscilando entre alto e baixo, por padrão essa isso acontece a cada 1s*/
	const uint32_t time_hight = 1000;
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	60fb      	str	r3, [r7, #12]
	const uint32_t time_low = 1000;
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_SET);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	f001 f94c 	bl	8001958 <HAL_GPIO_WritePin>
	osDelay(time_hight);
 80006c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c4:	f008 fa67 	bl	8008b96 <osDelay>
	HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_RESET);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f940 	bl	8001958 <HAL_GPIO_WritePin>
	osDelay(time_low);
 80006d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006dc:	f008 fa5b 	bl	8008b96 <osDelay>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <vApplicationGetIdleTaskMemory+0x2c>)
 80006f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <vApplicationGetIdleTaskMemory+0x30>)
 80006fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200000b0 	.word	0x200000b0
 8000718:	20000164 	.word	0x20000164

0800071c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b096      	sub	sp, #88	; 0x58
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fe35 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f855 	bl	80007d4 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800072a:	f000 f8c9 	bl	80008c0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 f9ed 	bl	8000b0c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000732:	f000 f8e7 	bl	8000904 <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8000736:	f000 f919 	bl	800096c <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 800073a:	f000 f949 	bl	80009d0 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 800073e:	f000 f97b 	bl	8000a38 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8000742:	f000 f9b5 	bl	8000ab0 <_ZL19MX_USART2_UART_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of orange_button */
  osThreadStaticDef(orange_button, blink_orange_button, osPriorityNormal, 0, 128, orange_buttonBuffer, &orange_buttonControlBlock);
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <main+0xa0>)
 8000748:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800074c:	461d      	mov	r5, r3
 800074e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  orange_buttonHandle = osThreadCreate(osThread(orange_button), NULL);
 800075a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f008 f9cc 	bl	8008afe <osThreadCreate>
 8000766:	4603      	mov	r3, r0
 8000768:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <main+0xa4>)
 800076a:	6013      	str	r3, [r2, #0]

  /* definition and creation of button */
  osThreadDef(button, button_control, osPriorityIdle, 0, 128);
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <main+0xa8>)
 800076e:	f107 0420 	add.w	r4, r7, #32
 8000772:	461d      	mov	r5, r3
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 f9b9 	bl	8008afe <osThreadCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <main+0xac>)
 8000790:	6013      	str	r3, [r2, #0]

  /* definition and creation of serial_bus */
  osThreadDef(serial_bus, serial_communication, osPriorityIdle, 0, 128);
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <main+0xb0>)
 8000794:	1d3c      	adds	r4, r7, #4
 8000796:	461d      	mov	r5, r3
 8000798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  serial_busHandle = osThreadCreate(osThread(serial_bus), NULL);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 f9a8 	bl	8008afe <osThreadCreate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <main+0xb4>)
 80007b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007b4:	f008 f99c 	bl	8008af0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x9c>
 80007ba:	bf00      	nop
 80007bc:	0800b910 	.word	0x0800b910
 80007c0:	200004e4 	.word	0x200004e4
 80007c4:	0800b92c 	.word	0x0800b92c
 80007c8:	2000079c 	.word	0x2000079c
 80007cc:	0800b948 	.word	0x0800b948
 80007d0:	200007a0 	.word	0x200007a0

080007d4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a ff3e 	bl	800b664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <_Z18SystemClock_Configv+0xe4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <_Z18SystemClock_Configv+0xe4>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <_Z18SystemClock_Configv+0xe4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <_Z18SystemClock_Configv+0xe8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <_Z18SystemClock_Configv+0xe8>)
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <_Z18SystemClock_Configv+0xe8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000848:	2308      	movs	r3, #8
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800084c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000856:	2307      	movs	r3, #7
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fc02 	bl	8004068 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000874:	f000 fac0 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000878:	230f      	movs	r3, #15
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2302      	movs	r3, #2
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2102      	movs	r1, #2
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fe5f 	bl	8004558 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	bf14      	ite	ne
 80008a0:	2301      	movne	r3, #1
 80008a2:	2300      	moveq	r3, #0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80008aa:	f000 faa5 	bl	8000df8 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <_Z24PeriphCommonClock_Configv>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008d4:	2301      	movs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008d8:	23c0      	movs	r3, #192	; 0xc0
 80008da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 f866 	bl	80049b4 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_Z24PeriphCommonClock_Configv+0x3c>
  {
    Error_Handler();
 80008f8:	f000 fa7e 	bl	8000df8 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <_ZL12MX_I2C1_Initv+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <_ZL12MX_I2C1_Initv+0x64>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_ZL12MX_I2C1_Initv+0x5c>)
 8000942:	f002 fd93 	bl	800346c <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000956:	f000 fa4f 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000364 	.word	0x20000364
 8000964:	40005400 	.word	0x40005400
 8000968:	000186a0 	.word	0x000186a0

0800096c <_ZL12MX_I2S2_Initv>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <_ZL12MX_I2S2_Initv+0x60>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 8000992:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000996:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <_ZL12MX_I2S2_Initv+0x5c>)
 80009ac:	f002 fea2 	bl	80036f4 <HAL_I2S_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZL12MX_I2S2_Initv+0x58>
  {
    Error_Handler();
 80009c0:	f000 fa1a 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200003b8 	.word	0x200003b8
 80009cc:	40003800 	.word	0x40003800

080009d0 <_ZL12MX_I2S3_Initv>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <_ZL12MX_I2S3_Initv+0x60>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <_ZL12MX_I2S3_Initv+0x64>)
 80009fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <_ZL12MX_I2S3_Initv+0x5c>)
 8000a10:	f002 fe70 	bl	80036f4 <HAL_I2S_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000a24:	f000 f9e8 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000400 	.word	0x20000400
 8000a30:	40003c00 	.word	0x40003c00
 8000a34:	00017700 	.word	0x00017700

08000a38 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <_ZL12MX_SPI1_Initv+0x74>)
 8000a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a84:	220a      	movs	r2, #10
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <_ZL12MX_SPI1_Initv+0x70>)
 8000a8a:	f004 f8df 	bl	8004c4c <HAL_SPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf14      	ite	ne
 8000a94:	2301      	movne	r3, #1
 8000a96:	2300      	moveq	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000a9e:	f000 f9ab 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000448 	.word	0x20000448
 8000aac:	40013000 	.word	0x40013000

08000ab0 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ae8:	f004 fbb8 	bl	800525c <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000afc:	f000 f97c 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200004a0 	.word	0x200004a0
 8000b08:	40004400 	.word	0x40004400

08000b0c <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	4b52      	ldr	r3, [pc, #328]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a51      	ldr	r2, [pc, #324]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b4f      	ldr	r3, [pc, #316]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a43      	ldr	r2, [pc, #268]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a3c      	ldr	r2, [pc, #240]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b3a      	ldr	r3, [pc, #232]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <_ZL12MX_GPIO_Initv+0x164>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4829      	ldr	r0, [pc, #164]	; (8000c74 <_ZL12MX_GPIO_Initv+0x168>)
 8000bd0:	f000 fec2 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bda:	4827      	ldr	r0, [pc, #156]	; (8000c78 <_ZL12MX_GPIO_Initv+0x16c>)
 8000bdc:	f000 febc 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481f      	ldr	r0, [pc, #124]	; (8000c74 <_ZL12MX_GPIO_Initv+0x168>)
 8000bf8:	f000 fd12 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <_ZL12MX_GPIO_Initv+0x170>)
 8000c12:	f000 fd05 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000c16:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c30:	f000 fcf6 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c34:	2320      	movs	r3, #32
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c48:	f000 fcea 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <_ZL12MX_GPIO_Initv+0x174>)
 8000c62:	f000 fcdd 	bl	8001620 <HAL_GPIO_Init>
}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	; 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40021000 	.word	0x40021000

08000c84 <_Z19blink_orange_buttonPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_blink_orange_button */
void blink_orange_button(void const *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000c8c:	f00a f99e 	bl	800afcc <MX_USB_HOST_Init>
  GPIO LED_orange(LD3_GPIO_Port, LD3_Pin);
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c98:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <_Z19blink_orange_buttonPKv+0x30>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fca2 	bl	80005e4 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    LED_orange.toogle(500, 500);
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ca8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fcd5 	bl	800065c <_ZN4GPIO6toogleEmm>
 8000cb2:	e7f5      	b.n	8000ca0 <_Z19blink_orange_buttonPKv+0x1c>
 8000cb4:	40020c00 	.word	0x40020c00

08000cb8 <_Z14button_controlPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_button_control */
void button_control(void const *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_control */
  GPIO button(B1_GPIO_Port, B1_Pin);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4916      	ldr	r1, [pc, #88]	; (8000d20 <_Z14button_controlPKv+0x68>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc8b 	bl	80005e4 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  GPIO LED_green(LD4_GPIO_Port, LD4_Pin);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <_Z14button_controlPKv+0x6c>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fc83 	bl	80005e4 <_ZN4GPIOC1EP12GPIO_TypeDeft>

  bool button_pushed = false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for (;;)
  {
    button_pushed = button.read();
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fca2 	bl	8000630 <_ZN4GPIO4readEv>
 8000cec:	4603      	mov	r3, r0
 8000cee:	77fb      	strb	r3, [r7, #31]
    if (button_pushed == true)
 8000cf0:	7ffb      	ldrb	r3, [r7, #31]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d109      	bne.n	8000d0a <_Z14button_controlPKv+0x52>
    {
      // vTaskSuspendAll();
      LED_green.toogle(1000, 1000);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fcaa 	bl	800065c <_ZN4GPIO6toogleEmm>
 8000d08:	e005      	b.n	8000d16 <_Z14button_controlPKv+0x5e>
    }
    else
    {
      LED_green.write(GPIO_PIN_RESET);
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc7b 	bl	800060c <_ZN4GPIO5writeE13GPIO_PinState>
    }
    osDelay(0.1);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f007 ff3d 	bl	8008b96 <osDelay>
    button_pushed = button.read();
 8000d1c:	e7e1      	b.n	8000ce2 <_Z14button_controlPKv+0x2a>
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <_Z20serial_communicationPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_serial_communication */
void serial_communication(void const *argument)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b0ce      	sub	sp, #312	; 0x138
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN serial_communication */
  GPIO LED_blue(LD6_GPIO_Port, LD6_Pin);
 8000d32:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d3a:	4923      	ldr	r1, [pc, #140]	; (8000dc8 <_Z20serial_communicationPKv+0xa0>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fc51 	bl	80005e4 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  dwt sample;
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbce 	bl	80004e8 <_ZN3dwtC1Ev>
  char txData[20] = "Hello World \r\n";
 8000d4c:	f107 0508 	add.w	r5, r7, #8
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <_Z20serial_communicationPKv+0xa4>)
 8000d52:	462c      	mov	r4, r5
 8000d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d56:	c407      	stmia	r4!, {r0, r1, r2}
 8000d58:	8023      	strh	r3, [r4, #0]
 8000d5a:	3402      	adds	r4, #2
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	7023      	strb	r3, [r4, #0]
 8000d60:	f105 030f 	add.w	r3, r5, #15
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	711a      	strb	r2, [r3, #4]
  /* Infinite loop */
  for (;;)
  {

    sample.start();
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fc10 	bl	8000594 <_ZN3dwt5startEv>
    for (int i = 0; i < 500; i++);
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d82:	da05      	bge.n	8000d90 <_Z20serial_communicationPKv+0x68>
 8000d84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000d8e:	e7f4      	b.n	8000d7a <_Z20serial_communicationPKv+0x52>
    HAL_UART_Transmit(&huart2, (uint8_t *)txData, strlen(txData), 10);
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fa23 	bl	80001e0 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f107 0108 	add.w	r1, r7, #8
 8000da2:	230a      	movs	r3, #10
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <_Z20serial_communicationPKv+0xa8>)
 8000da6:	f004 faa6 	bl	80052f6 <HAL_UART_Transmit>
    LED_blue.toogle();
 8000daa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fc74 	bl	800069c <_ZN4GPIO6toogleEv>
    osDelay(500);
 8000db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db8:	f007 feed 	bl	8008b96 <osDelay>
    sample.stop();
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fbfb 	bl	80005bc <_ZN3dwt4stopEv>

  }
 8000dc6:	e7d0      	b.n	8000d6a <_Z20serial_communicationPKv+0x42>
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	0800b964 	.word	0x0800b964
 8000dd0:	200004a0 	.word	0x200004a0

08000dd4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000de6:	f000 faf5 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40000400 	.word	0x40000400

08000df8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_MspInit+0x64>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <HAL_MspInit+0x64>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <HAL_MspInit+0x64>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_MspInit+0x64>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_MspInit+0x64>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_MspInit+0x64>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	210f      	movs	r1, #15
 8000e46:	f06f 0001 	mvn.w	r0, #1
 8000e4a:	f000 fbbf 	bl	80015cc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2105      	movs	r1, #5
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 fbba 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fbd3 	bl	8001604 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_I2C_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12c      	bne.n	8000ee8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000eaa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <HAL_I2C_MspInit+0x8c>)
 8000ec8:	f000 fbaa 	bl	8001620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400

08000efc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	; 0x38
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_I2S_MspInit+0x164>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d14b      	bne.n	8000fb6 <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	4b50      	ldr	r3, [pc, #320]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a4f      	ldr	r2, [pc, #316]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	4b49      	ldr	r3, [pc, #292]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a48      	ldr	r2, [pc, #288]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a41      	ldr	r2, [pc, #260]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f72:	2308      	movs	r3, #8
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f82:	2305      	movs	r3, #5
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4836      	ldr	r0, [pc, #216]	; (8001068 <HAL_I2S_MspInit+0x16c>)
 8000f8e:	f000 fb47 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	482f      	ldr	r0, [pc, #188]	; (800106c <HAL_I2S_MspInit+0x170>)
 8000fb0:	f000 fb36 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fb4:	e04f      	b.n	8001056 <HAL_I2S_MspInit+0x15a>
  else if(hi2s->Instance==SPI3)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a2d      	ldr	r2, [pc, #180]	; (8001070 <HAL_I2S_MspInit+0x174>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d14a      	bne.n	8001056 <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_I2S_MspInit+0x168>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_I2S_MspInit+0x168>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001014:	2310      	movs	r3, #16
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001024:	2306      	movs	r3, #6
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <HAL_I2S_MspInit+0x178>)
 8001030:	f000 faf6 	bl	8001620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001034:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001046:	2306      	movs	r3, #6
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_I2S_MspInit+0x16c>)
 8001052:	f000 fae5 	bl	8001620 <HAL_GPIO_Init>
}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	; 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40003800 	.word	0x40003800
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800
 800106c:	40020400 	.word	0x40020400
 8001070:	40003c00 	.word	0x40003c00
 8001074:	40020000 	.word	0x40020000

08001078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_SPI_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12b      	bne.n	80010f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80010d2:	23e0      	movs	r3, #224	; 0xe0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e2:	2305      	movs	r3, #5
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_SPI_MspInit+0x8c>)
 80010ee:	f000 fa97 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40013000 	.word	0x40013000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_UART_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_UART_MspInit+0x88>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_UART_MspInit+0x88>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_UART_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_UART_MspInit+0x88>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_UART_MspInit+0x88>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001162:	230c      	movs	r3, #12
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001172:	2307      	movs	r3, #7
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_UART_MspInit+0x8c>)
 800117e:	f000 fa4f 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40004400 	.word	0x40004400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	201d      	movs	r0, #29
 80011ae:	f000 fa0d 	bl	80015cc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011b2:	201d      	movs	r0, #29
 80011b4:	f000 fa26 	bl	8001604 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_InitTick+0xa4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <HAL_InitTick+0xa4>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_InitTick+0xa4>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011d4:	f107 0210 	add.w	r2, r7, #16
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fbb6 	bl	8004950 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011e4:	f003 fb8c 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 80011e8:	4603      	mov	r3, r0
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_InitTick+0xa8>)
 80011f2:	fba2 2303 	umull	r2, r3, r2, r3
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	3b01      	subs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_InitTick+0xac>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <HAL_InitTick+0xb0>)
 8001200:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_InitTick+0xac>)
 8001204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001208:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_InitTick+0xac>)
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_InitTick+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_InitTick+0xac>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_InitTick+0xac>)
 800121e:	f003 fd9e 	bl	8004d5e <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d104      	bne.n	8001232 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <HAL_InitTick+0xac>)
 800122a:	f003 fdf1 	bl	8004e10 <HAL_TIM_Base_Start_IT>
 800122e:	4603      	mov	r3, r0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3730      	adds	r7, #48	; 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	431bde83 	.word	0x431bde83
 8001244:	20004508 	.word	0x20004508
 8001248:	40000400 	.word	0x40000400

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800127c:	f002 feda 	bl	8004034 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM3_IRQHandler+0x10>)
 800128a:	f003 fe23 	bl	8004ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20004508 	.word	0x20004508

08001298 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <OTG_FS_IRQHandler+0x10>)
 800129e:	f000 fddf 	bl	8001e60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20004938 	.word	0x20004938

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f00a f978 	bl	800b5d0 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20010000 	.word	0x20010000
 800130c:	00000400 	.word	0x00000400
 8001310:	200007a4 	.word	0x200007a4
 8001314:	20004c50 	.word	0x20004c50

08001318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001366:	f7ff ffd7 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f00a f937 	bl	800b5dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff f9d5 	bl	800071c <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001380:	0800ba44 	.word	0x0800ba44
  ldr r2, =_sbss
 8001384:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001388:	20004c4c 	.word	0x20004c4c

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f8fc 	bl	80015b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	200f      	movs	r0, #15
 80013c0:	f7ff feea 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fd1e 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20004550 	.word	0x20004550

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20004550 	.word	0x20004550

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ff4c 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015de:	f7ff ff61 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	6978      	ldr	r0, [r7, #20]
 80015ea:	f7ff ffb1 	bl	8001550 <NVIC_EncodePriority>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff80 	bl	80014fc <__NVIC_SetPriority>
}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff54 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e159      	b.n	80018f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8148 	bne.w	80018ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d005      	beq.n	8001672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	2b02      	cmp	r3, #2
 8001670:	d130      	bne.n	80016d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80a2 	beq.w	80018ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b57      	ldr	r3, [pc, #348]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a56      	ldr	r2, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_GPIO_Init+0x2e8>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c2:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_GPIO_Init+0x2ec>)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_GPIO_Init+0x2f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x202>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_GPIO_Init+0x2f4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x1fe>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a47      	ldr	r2, [pc, #284]	; (8001918 <HAL_GPIO_Init+0x2f8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x1fa>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a46      	ldr	r2, [pc, #280]	; (800191c <HAL_GPIO_Init+0x2fc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x1f6>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a45      	ldr	r2, [pc, #276]	; (8001920 <HAL_GPIO_Init+0x300>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x1f2>
 800180e:	2304      	movs	r3, #4
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001812:	2307      	movs	r3, #7
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x204>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x204>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x204>
 8001822:	2300      	movs	r3, #0
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001834:	4935      	ldr	r1, [pc, #212]	; (800190c <HAL_GPIO_Init+0x2ec>)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x304>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001890:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x304>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ba:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	f67f aea2 	bls.w	800163c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40013c00 	.word	0x40013c00

08001928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e001      	b.n	800194a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800198a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198c:	b08f      	sub	sp, #60	; 0x3c
 800198e:	af0a      	add	r7, sp, #40	; 0x28
 8001990:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e054      	b.n	8001a46 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f009 fb5c 	bl	800b074 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2203      	movs	r2, #3
 80019c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 ffc6 	bl	800596c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	687e      	ldr	r6, [r7, #4]
 80019e8:	466d      	mov	r5, sp
 80019ea:	f106 0410 	add.w	r4, r6, #16
 80019ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80019fe:	1d33      	adds	r3, r6, #4
 8001a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a02:	6838      	ldr	r0, [r7, #0]
 8001a04:	f003 ff40 	bl	8005888 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 ffbd 	bl	800598e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	687e      	ldr	r6, [r7, #4]
 8001a1c:	466d      	mov	r5, sp
 8001a1e:	f106 0410 	add.w	r4, r6, #16
 8001a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a32:	1d33      	adds	r3, r6, #4
 8001a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f004 f924 	bl	8005c84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a4e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b089      	sub	sp, #36	; 0x24
 8001a52:	af04      	add	r7, sp, #16
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	4608      	mov	r0, r1
 8001a58:	4611      	mov	r1, r2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	70fb      	strb	r3, [r7, #3]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70bb      	strb	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_HCD_HC_Init+0x28>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e076      	b.n	8001b64 <HAL_HCD_HC_Init+0x116>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	333d      	adds	r3, #61	; 0x3d
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3338      	adds	r3, #56	; 0x38
 8001a9e:	787a      	ldrb	r2, [r7, #1]
 8001aa0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	212c      	movs	r1, #44	; 0x2c
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	3340      	adds	r3, #64	; 0x40
 8001ab0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ab2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3339      	adds	r3, #57	; 0x39
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	212c      	movs	r1, #44	; 0x2c
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	333f      	adds	r3, #63	; 0x3f
 8001ad4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	78ba      	ldrb	r2, [r7, #2]
 8001ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ae2:	b2d0      	uxtb	r0, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	333a      	adds	r3, #58	; 0x3a
 8001af0:	4602      	mov	r2, r0
 8001af2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001af4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da09      	bge.n	8001b10 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	333b      	adds	r3, #59	; 0x3b
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e008      	b.n	8001b22 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	333b      	adds	r3, #59	; 0x3b
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	212c      	movs	r1, #44	; 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	333c      	adds	r3, #60	; 0x3c
 8001b30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b34:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	787c      	ldrb	r4, [r7, #1]
 8001b3c:	78ba      	ldrb	r2, [r7, #2]
 8001b3e:	78f9      	ldrb	r1, [r7, #3]
 8001b40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4623      	mov	r3, r4
 8001b52:	f004 fa11 	bl	8005f78 <USB_HC_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_HCD_HC_Halt+0x1e>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e00f      	b.n	8001baa <HAL_HCD_HC_Halt+0x3e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 fc4d 	bl	800643a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	70fb      	strb	r3, [r7, #3]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70bb      	strb	r3, [r7, #2]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	333b      	adds	r3, #59	; 0x3b
 8001bdc:	78ba      	ldrb	r2, [r7, #2]
 8001bde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	333f      	adds	r3, #63	; 0x3f
 8001bee:	787a      	ldrb	r2, [r7, #1]
 8001bf0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bf2:	7c3b      	ldrb	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d112      	bne.n	8001c1e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3342      	adds	r3, #66	; 0x42
 8001c06:	2203      	movs	r2, #3
 8001c08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	333d      	adds	r3, #61	; 0x3d
 8001c18:	7f3a      	ldrb	r2, [r7, #28]
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e008      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3342      	adds	r3, #66	; 0x42
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	f200 80c6 	bhi.w	8001dc4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c38:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001db1 	.word	0x08001db1
 8001c48:	08001cb5 	.word	0x08001cb5
 8001c4c:	08001d33 	.word	0x08001d33
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c50:	7c3b      	ldrb	r3, [r7, #16]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f040 80b8 	bne.w	8001dc8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80b4 	bne.w	8001dc8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c60:	8b3b      	ldrh	r3, [r7, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3355      	adds	r3, #85	; 0x55
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3355      	adds	r3, #85	; 0x55
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3342      	adds	r3, #66	; 0x42
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c9e:	e093      	b.n	8001dc8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
      break;
 8001cb2:	e089      	b.n	8001dc8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cb4:	78bb      	ldrb	r3, [r7, #2]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11d      	bne.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	212c      	movs	r1, #44	; 0x2c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3355      	adds	r3, #85	; 0x55
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3342      	adds	r3, #66	; 0x42
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ce0:	e073      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3342      	adds	r3, #66	; 0x42
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	701a      	strb	r2, [r3, #0]
      break;
 8001cf4:	e069      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3354      	adds	r3, #84	; 0x54
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3342      	adds	r3, #66	; 0x42
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
      break;
 8001d1c:	e055      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3342      	adds	r3, #66	; 0x42
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	701a      	strb	r2, [r3, #0]
      break;
 8001d30:	e04b      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d32:	78bb      	ldrb	r3, [r7, #2]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11d      	bne.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	212c      	movs	r1, #44	; 0x2c
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	3355      	adds	r3, #85	; 0x55
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3342      	adds	r3, #66	; 0x42
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d5e:	e034      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	2202      	movs	r2, #2
 8001d70:	701a      	strb	r2, [r3, #0]
      break;
 8001d72:	e02a      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3354      	adds	r3, #84	; 0x54
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3342      	adds	r3, #66	; 0x42
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
      break;
 8001d9a:	e016      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3342      	adds	r3, #66	; 0x42
 8001daa:	2202      	movs	r2, #2
 8001dac:	701a      	strb	r2, [r3, #0]
      break;
 8001dae:	e00c      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3342      	adds	r3, #66	; 0x42
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dc4:	bf00      	nop
 8001dc6:	e000      	b.n	8001dca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001dc8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3344      	adds	r3, #68	; 0x44
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	8b3a      	ldrh	r2, [r7, #24]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	202c      	movs	r0, #44	; 0x2c
 8001de4:	fb00 f303 	mul.w	r3, r0, r3
 8001de8:	440b      	add	r3, r1
 8001dea:	334c      	adds	r3, #76	; 0x4c
 8001dec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3360      	adds	r3, #96	; 0x60
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3350      	adds	r3, #80	; 0x50
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	212c      	movs	r1, #44	; 0x2c
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3339      	adds	r3, #57	; 0x39
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	212c      	movs	r1, #44	; 0x2c
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	3361      	adds	r3, #97	; 0x61
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	222c      	movs	r2, #44	; 0x2c
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	18d1      	adds	r1, r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f004 f9a0 	bl	8006194 <USB_HC_StartXfer>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop

08001e60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fec3 	bl	8005c02 <USB_GetMode>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f040 80f6 	bne.w	8002070 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fea7 	bl	8005bdc <USB_ReadInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80ec 	beq.w	800206e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fe9e 	bl	8005bdc <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eaa:	d104      	bne.n	8001eb6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fe8e 	bl	8005bdc <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eca:	d104      	bne.n	8001ed6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ed4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fe7e 	bl	8005bdc <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eea:	d104      	bne.n	8001ef6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ef4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fe6e 	bl	8005bdc <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d103      	bne.n	8001f12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fe60 	bl	8005bdc <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f26:	d11c      	bne.n	8001f62 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f42:	2110      	movs	r1, #16
 8001f44:	6938      	ldr	r0, [r7, #16]
 8001f46:	f003 fd6f 	bl	8005a28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f4a:	6938      	ldr	r0, [r7, #16]
 8001f4c:	f003 fd90 	bl	8005a70 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 ff48 	bl	8005dec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f009 f907 	bl	800b170 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fe38 	bl	8005bdc <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f76:	d102      	bne.n	8001f7e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f001 fa03 	bl	8003384 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fe2a 	bl	8005bdc <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d106      	bne.n	8001fa0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f009 f8d0 	bl	800b138 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f003 fe19 	bl	8005bdc <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d101      	bne.n	8001fb8 <HAL_HCD_IRQHandler+0x158>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_HCD_IRQHandler+0x15a>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0210 	bic.w	r2, r2, #16
 8001fcc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f001 f906 	bl	80031e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0210 	orr.w	r2, r2, #16
 8001fe2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fdf7 	bl	8005bdc <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff8:	d13a      	bne.n	8002070 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fa0a 	bl	8006418 <USB_HC_ReadInterrupt>
 8002004:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e025      	b.n	8002058 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d018      	beq.n	8002052 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002036:	d106      	bne.n	8002046 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8ab 	bl	800219a <HCD_HC_IN_IRQHandler>
 8002044:	e005      	b.n	8002052 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4619      	mov	r1, r3
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fcc6 	bl	80029de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3d4      	bcc.n	800200c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	e000      	b.n	8002070 <HAL_HCD_IRQHandler+0x210>
      return;
 800206e:	bf00      	nop
    }
  }
}
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_HCD_Start+0x16>
 8002088:	2302      	movs	r3, #2
 800208a:	e013      	b.n	80020b4 <HAL_HCD_Start+0x3e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f003 ff0a 	bl	8005eb4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fc50 	bl	800594a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_HCD_Stop+0x16>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e00d      	b.n	80020ee <HAL_HCD_Stop+0x32>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fb04 	bl	80066ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 feac 	bl	8005e60 <USB_ResetPort>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3360      	adds	r3, #96	; 0x60
 800212c:	781b      	ldrb	r3, [r3, #0]
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3350      	adds	r3, #80	; 0x50
 8002154:	681b      	ldr	r3, [r3, #0]
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fef0 	bl	8005f54 <USB_GetCurrentFrame>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fecb 	bl	8005f26 <USB_GetHostSpeed>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d119      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2304      	movs	r3, #4
 80021da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	0151      	lsls	r1, r2, #5
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	440a      	add	r2, r1
 80021f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e101      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002214:	d12b      	bne.n	800226e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002228:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3361      	adds	r3, #97	; 0x61
 8002238:	2207      	movs	r2, #7
 800223a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	0151      	lsls	r1, r2, #5
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	440a      	add	r2, r1
 8002252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f004 f8e7 	bl	800643a <USB_HC_Halt>
 800226c:	e0c9      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d109      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	2320      	movs	r3, #32
 8002294:	6093      	str	r3, [r2, #8]
 8002296:	e0b4      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d133      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	0151      	lsls	r1, r2, #5
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	440a      	add	r2, r1
 80022c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022c8:	f043 0302 	orr.w	r3, r3, #2
 80022cc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3361      	adds	r3, #97	; 0x61
 80022dc:	2205      	movs	r2, #5
 80022de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	2310      	movs	r3, #16
 80022f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	2308      	movs	r3, #8
 8002302:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f893 	bl	800643a <USB_HC_Halt>
 8002314:	e075      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d134      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	440a      	add	r2, r1
 8002344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3361      	adds	r3, #97	; 0x61
 800235c:	2208      	movs	r2, #8
 800235e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	461a      	mov	r2, r3
 800236e:	2310      	movs	r3, #16
 8002370:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	461a      	mov	r2, r3
 8002380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002384:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f004 f852 	bl	800643a <USB_HC_Halt>
 8002396:	e034      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d129      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3361      	adds	r3, #97	; 0x61
 80023dc:	2206      	movs	r2, #6
 80023de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 f825 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	461a      	mov	r2, r3
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002418:	d122      	bne.n	8002460 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	0151      	lsls	r1, r2, #5
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	440a      	add	r2, r1
 8002430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fff8 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800245e:	e2ba      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 811b 	bne.w	80026ae <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d019      	beq.n	80024b4 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3348      	adds	r3, #72	; 0x48
 800248e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	440b      	add	r3, r1
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	202c      	movs	r0, #44	; 0x2c
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	440b      	add	r3, r1
 80024b0:	3350      	adds	r3, #80	; 0x50
 80024b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3361      	adds	r3, #97	; 0x61
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	335c      	adds	r3, #92	; 0x5c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2301      	movs	r3, #1
 80024e8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	333f      	adds	r3, #63	; 0x3f
 800250c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800250e:	2b02      	cmp	r3, #2
 8002510:	d121      	bne.n	8002556 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	0151      	lsls	r1, r2, #5
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	440a      	add	r2, r1
 8002528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f003 ff7c 	bl	800643a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	461a      	mov	r2, r3
 8002550:	2310      	movs	r3, #16
 8002552:	6093      	str	r3, [r2, #8]
 8002554:	e066      	b.n	8002624 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333f      	adds	r3, #63	; 0x3f
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d127      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002588:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3360      	adds	r3, #96	; 0x60
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	b2d9      	uxtb	r1, r3
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	202c      	movs	r0, #44	; 0x2c
 80025a6:	fb00 f303 	mul.w	r3, r0, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f008 fdea 	bl	800b18c <HAL_HCD_HC_NotifyURBChange_Callback>
 80025b8:	e034      	b.n	8002624 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333f      	adds	r3, #63	; 0x3f
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d12a      	bne.n	8002624 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	3354      	adds	r3, #84	; 0x54
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2d8      	uxtb	r0, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3354      	adds	r3, #84	; 0x54
 8002604:	4602      	mov	r2, r0
 8002606:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	b2d9      	uxtb	r1, r3
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	202c      	movs	r0, #44	; 0x2c
 8002612:	fb00 f303 	mul.w	r3, r0, r3
 8002616:	4413      	add	r3, r2
 8002618:	3360      	adds	r3, #96	; 0x60
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f008 fdb4 	bl	800b18c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d12b      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3348      	adds	r3, #72	; 0x48
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	202c      	movs	r0, #44	; 0x2c
 8002642:	fb00 f202 	mul.w	r2, r0, r2
 8002646:	440a      	add	r2, r1
 8002648:	3240      	adds	r2, #64	; 0x40
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 81be 	beq.w	80029d6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3354      	adds	r3, #84	; 0x54
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2d8      	uxtb	r0, r3
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3354      	adds	r3, #84	; 0x54
 800267e:	4602      	mov	r2, r0
 8002680:	701a      	strb	r2, [r3, #0]
}
 8002682:	e1a8      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3354      	adds	r3, #84	; 0x54
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2d8      	uxtb	r0, r3
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3354      	adds	r3, #84	; 0x54
 80026a8:	4602      	mov	r2, r0
 80026aa:	701a      	strb	r2, [r3, #0]
}
 80026ac:	e193      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	f040 8106 	bne.w	80028d2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	0151      	lsls	r1, r2, #5
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	440a      	add	r2, r1
 80026dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e0:	f023 0302 	bic.w	r3, r3, #2
 80026e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3361      	adds	r3, #97	; 0x61
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d109      	bne.n	800270e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e0c9      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d109      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	2205      	movs	r2, #5
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e0b5      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3361      	adds	r3, #97	; 0x61
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b06      	cmp	r3, #6
 8002748:	d009      	beq.n	800275e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3361      	adds	r3, #97	; 0x61
 8002758:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800275a:	2b08      	cmp	r3, #8
 800275c:	d150      	bne.n	8002800 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	202c      	movs	r0, #44	; 0x2c
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	440b      	add	r3, r1
 800277c:	335c      	adds	r3, #92	; 0x5c
 800277e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	335c      	adds	r3, #92	; 0x5c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d912      	bls.n	80027ba <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	335c      	adds	r3, #92	; 0x5c
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3360      	adds	r3, #96	; 0x60
 80027b4:	2204      	movs	r2, #4
 80027b6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027b8:	e073      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027e2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ea:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027fe:	e050      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3361      	adds	r3, #97	; 0x61
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d122      	bne.n	800285a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800283c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002844:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e023      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3361      	adds	r3, #97	; 0x61
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b07      	cmp	r3, #7
 800286c:	d119      	bne.n	80028a2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	335c      	adds	r3, #92	; 0x5c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	202c      	movs	r0, #44	; 0x2c
 8002886:	fb00 f303 	mul.w	r3, r0, r3
 800288a:	440b      	add	r3, r1
 800288c:	335c      	adds	r3, #92	; 0x5c
 800288e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3360      	adds	r3, #96	; 0x60
 800289e:	2204      	movs	r2, #4
 80028a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	2302      	movs	r3, #2
 80028b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	b2d9      	uxtb	r1, r3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	202c      	movs	r0, #44	; 0x2c
 80028be:	fb00 f303 	mul.w	r3, r0, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f008 fc5e 	bl	800b18c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028d0:	e081      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d176      	bne.n	80029d6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	333f      	adds	r3, #63	; 0x3f
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d121      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	335c      	adds	r3, #92	; 0x5c
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	440a      	add	r2, r1
 8002924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fd7e 	bl	800643a <USB_HC_Halt>
 800293e:	e041      	b.n	80029c4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	333f      	adds	r3, #63	; 0x3f
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	333f      	adds	r3, #63	; 0x3f
 8002962:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002964:	2b02      	cmp	r3, #2
 8002966:	d12d      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	335c      	adds	r3, #92	; 0x5c
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d120      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3361      	adds	r3, #97	; 0x61
 8002990:	2203      	movs	r2, #3
 8002992:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fd3b 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	461a      	mov	r2, r3
 80029d2:	2310      	movs	r3, #16
 80029d4:	6093      	str	r3, [r2, #8]
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d119      	bne.n	8002a42 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002a40:	e3ca      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d13e      	bne.n	8002ad6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2320      	movs	r3, #32
 8002a68:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	333d      	adds	r3, #61	; 0x3d
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	f040 83ac 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	333d      	adds	r3, #61	; 0x3d
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	0151      	lsls	r1, r2, #5
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	440a      	add	r2, r1
 8002aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fcb3 	bl	800643a <USB_HC_Halt>
}
 8002ad4:	e380      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d122      	bne.n	8002b34 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	0151      	lsls	r1, r2, #5
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	440a      	add	r2, r1
 8002b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fc8e 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	6093      	str	r3, [r2, #8]
}
 8002b32:	e351      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d150      	bne.n	8002bec <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d111      	bne.n	8002b96 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	333d      	adds	r3, #61	; 0x3d
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	2340      	movs	r3, #64	; 0x40
 8002b94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	0151      	lsls	r1, r2, #5
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	440a      	add	r2, r1
 8002bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fc3a 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3361      	adds	r3, #97	; 0x61
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
}
 8002bea:	e2f5      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d13c      	bne.n	8002c7c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3361      	adds	r3, #97	; 0x61
 8002c10:	2204      	movs	r2, #4
 8002c12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	333d      	adds	r3, #61	; 0x3d
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	0151      	lsls	r1, r2, #5
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fbe9 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	2340      	movs	r3, #64	; 0x40
 8002c78:	6093      	str	r3, [r2, #8]
}
 8002c7a:	e2ad      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d12a      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fbb3 	bl	800643a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3361      	adds	r3, #97	; 0x61
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	701a      	strb	r2, [r3, #0]
}
 8002ce6:	e277      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d150      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	335c      	adds	r3, #92	; 0x5c
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	2203      	movs	r2, #3
 8002d20:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333d      	adds	r3, #61	; 0x3d
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d112      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	333c      	adds	r3, #60	; 0x3c
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	333d      	adds	r3, #61	; 0x3d
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	0151      	lsls	r1, r2, #5
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	440a      	add	r2, r1
 8002d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 fb57 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	6093      	str	r3, [r2, #8]
}
 8002d9e:	e21b      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d174      	bne.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3361      	adds	r3, #97	; 0x61
 8002dcc:	2206      	movs	r2, #6
 8002dce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	0151      	lsls	r1, r2, #5
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	440a      	add	r2, r1
 8002de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fb1d 	bl	800643a <USB_HC_Halt>
 8002e00:	e044      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	335c      	adds	r3, #92	; 0x5c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	202c      	movs	r0, #44	; 0x2c
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	440b      	add	r3, r1
 8002e20:	335c      	adds	r3, #92	; 0x5c
 8002e22:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	335c      	adds	r3, #92	; 0x5c
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d920      	bls.n	8002e7a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	335c      	adds	r3, #92	; 0x5c
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	2204      	movs	r2, #4
 8002e5a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	b2d9      	uxtb	r1, r3
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	202c      	movs	r0, #44	; 0x2c
 8002e66:	fb00 f303 	mul.w	r3, r0, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3360      	adds	r3, #96	; 0x60
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f008 f98a 	bl	800b18c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e78:	e008      	b.n	8002e8c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3360      	adds	r3, #96	; 0x60
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	6093      	str	r3, [r2, #8]
}
 8002e9e:	e19b      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d134      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	0151      	lsls	r1, r2, #5
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	440a      	add	r2, r1
 8002ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 faa9 	bl	800643a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2310      	movs	r3, #16
 8002ef8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	461a      	mov	r2, r3
 8002f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3361      	adds	r3, #97	; 0x61
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	701a      	strb	r2, [r3, #0]
}
 8002f20:	e15a      	b.n	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	f040 814f 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	0151      	lsls	r1, r2, #5
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	440a      	add	r2, r1
 8002f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f54:	f023 0302 	bic.w	r3, r3, #2
 8002f58:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3361      	adds	r3, #97	; 0x61
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d17d      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3360      	adds	r3, #96	; 0x60
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	333f      	adds	r3, #63	; 0x3f
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d00a      	beq.n	8002faa <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	333f      	adds	r3, #63	; 0x3f
 8002fa2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	f040 8100 	bne.w	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d113      	bne.n	8002fda <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3355      	adds	r3, #85	; 0x55
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	f083 0301 	eor.w	r3, r3, #1
 8002fc6:	b2d8      	uxtb	r0, r3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3355      	adds	r3, #85	; 0x55
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	f040 80e3 	bne.w	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	334c      	adds	r3, #76	; 0x4c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80d8 	beq.w	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	334c      	adds	r3, #76	; 0x4c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	202c      	movs	r0, #44	; 0x2c
 8003010:	fb00 f202 	mul.w	r2, r0, r2
 8003014:	440a      	add	r2, r1
 8003016:	3240      	adds	r2, #64	; 0x40
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	4413      	add	r3, r2
 800301c:	3b01      	subs	r3, #1
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	202c      	movs	r0, #44	; 0x2c
 8003024:	fb00 f202 	mul.w	r2, r0, r2
 8003028:	440a      	add	r2, r1
 800302a:	3240      	adds	r2, #64	; 0x40
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80b5 	beq.w	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3355      	adds	r3, #85	; 0x55
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2d8      	uxtb	r0, r3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3355      	adds	r3, #85	; 0x55
 8003064:	4602      	mov	r2, r0
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e09f      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3361      	adds	r3, #97	; 0x61
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d109      	bne.n	8003092 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e08b      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3361      	adds	r3, #97	; 0x61
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d109      	bne.n	80030ba <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	2202      	movs	r2, #2
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e077      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	212c      	movs	r1, #44	; 0x2c
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3361      	adds	r3, #97	; 0x61
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d109      	bne.n	80030e2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e063      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3361      	adds	r3, #97	; 0x61
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d009      	beq.n	800310a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	3361      	adds	r3, #97	; 0x61
 8003104:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003106:	2b08      	cmp	r3, #8
 8003108:	d14f      	bne.n	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	335c      	adds	r3, #92	; 0x5c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	202c      	movs	r0, #44	; 0x2c
 8003122:	fb00 f303 	mul.w	r3, r0, r3
 8003126:	440b      	add	r3, r1
 8003128:	335c      	adds	r3, #92	; 0x5c
 800312a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	335c      	adds	r3, #92	; 0x5c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d912      	bls.n	8003166 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	335c      	adds	r3, #92	; 0x5c
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3360      	adds	r3, #96	; 0x60
 8003160:	2204      	movs	r2, #4
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e021      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	3360      	adds	r3, #96	; 0x60
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	015a      	lsls	r2, r3, #5
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	4413      	add	r3, r2
 8003180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800318e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003196:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	461a      	mov	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	461a      	mov	r2, r3
 80031b8:	2302      	movs	r3, #2
 80031ba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b2d9      	uxtb	r1, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	202c      	movs	r0, #44	; 0x2c
 80031c6:	fb00 f303 	mul.w	r3, r0, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3360      	adds	r3, #96	; 0x60
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f007 ffda 	bl	800b18c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031d8:	bf00      	nop
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	0c5b      	lsrs	r3, r3, #17
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003214:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d004      	beq.n	8003226 <HCD_RXQLVL_IRQHandler+0x46>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b05      	cmp	r3, #5
 8003220:	f000 80a9 	beq.w	8003376 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003224:	e0aa      	b.n	800337c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a6 	beq.w	800337a <HCD_RXQLVL_IRQHandler+0x19a>
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3344      	adds	r3, #68	; 0x44
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 809b 	beq.w	800337a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3350      	adds	r3, #80	; 0x50
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	441a      	add	r2, r3
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	202c      	movs	r0, #44	; 0x2c
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	; 0x4c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d87a      	bhi.n	8003362 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3344      	adds	r3, #68	; 0x44
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	b292      	uxth	r2, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f002 fc51 	bl	8005b2c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	3344      	adds	r3, #68	; 0x44
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	441a      	add	r2, r3
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	202c      	movs	r0, #44	; 0x2c
 80032a4:	fb00 f303 	mul.w	r3, r0, r3
 80032a8:	440b      	add	r3, r1
 80032aa:	3344      	adds	r3, #68	; 0x44
 80032ac:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3350      	adds	r3, #80	; 0x50
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	441a      	add	r2, r3
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	202c      	movs	r0, #44	; 0x2c
 80032c8:	fb00 f303 	mul.w	r3, r0, r3
 80032cc:	440b      	add	r3, r1
 80032ce:	3350      	adds	r3, #80	; 0x50
 80032d0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	0cdb      	lsrs	r3, r3, #19
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3340      	adds	r3, #64	; 0x40
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d13c      	bne.n	800337a <HCD_RXQLVL_IRQHandler+0x19a>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d039      	beq.n	800337a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800331c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003324:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3354      	adds	r3, #84	; 0x54
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2d8      	uxtb	r0, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3354      	adds	r3, #84	; 0x54
 800335c:	4602      	mov	r2, r0
 800335e:	701a      	strb	r2, [r3, #0]
      break;
 8003360:	e00b      	b.n	800337a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3360      	adds	r3, #96	; 0x60
 8003370:	2204      	movs	r2, #4
 8003372:	701a      	strb	r2, [r3, #0]
      break;
 8003374:	e001      	b.n	800337a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800337a:	bf00      	nop
  }
}
 800337c:	bf00      	nop
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033b0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d10b      	bne.n	80033d4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d102      	bne.n	80033cc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f007 fec4 	bl	800b154 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d132      	bne.n	8003444 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d126      	bne.n	800343e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d113      	bne.n	8003420 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003402:	d106      	bne.n	8003412 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f002 fcee 	bl	8005dec <USB_InitFSLSPClkSel>
 8003410:	e011      	b.n	8003436 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fce7 	bl	8005dec <USB_InitFSLSPClkSel>
 800341e:	e00a      	b.n	8003436 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342e:	461a      	mov	r2, r3
 8003430:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003434:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f007 feba 	bl	800b1b0 <HAL_HCD_PortEnabled_Callback>
 800343c:	e002      	b.n	8003444 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f007 fec4 	bl	800b1cc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	d103      	bne.n	8003456 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f043 0320 	orr.w	r3, r3, #32
 8003454:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fcea 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f001 fa16 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	; (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	; (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e128      	b.n	8003958 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a90      	ldr	r2, [pc, #576]	; (8003960 <HAL_I2S_Init+0x26c>)
 800371e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fd fbeb 	bl	8000efc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800373c:	f023 030f 	bic.w	r3, r3, #15
 8003740:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2202      	movs	r2, #2
 8003748:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d060      	beq.n	8003814 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800375a:	2310      	movs	r3, #16
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e001      	b.n	8003764 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b20      	cmp	r3, #32
 800376a:	d802      	bhi.n	8003772 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003772:	2001      	movs	r0, #1
 8003774:	f001 fa0c 	bl	8004b90 <HAL_RCCEx_GetPeriphCLKFreq>
 8003778:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003782:	d125      	bne.n	80037d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	fbb2 f2f3 	udiv	r2, r2, r3
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	461a      	mov	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	3305      	adds	r3, #5
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	e01f      	b.n	80037ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	3305      	adds	r3, #5
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e00e      	b.n	80037ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	461a      	mov	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	3305      	adds	r3, #5
 80037ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4a5c      	ldr	r2, [pc, #368]	; (8003964 <HAL_I2S_Init+0x270>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	08db      	lsrs	r3, r3, #3
 80037f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e003      	b.n	800381c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003814:	2302      	movs	r3, #2
 8003816:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d902      	bls.n	8003828 <HAL_I2S_Init+0x134>
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2bff      	cmp	r3, #255	; 0xff
 8003826:	d907      	bls.n	8003838 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f043 0210 	orr.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e08f      	b.n	8003958 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	ea42 0103 	orr.w	r1, r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	430a      	orrs	r2, r1
 800384a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6851      	ldr	r1, [r2, #4]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6892      	ldr	r2, [r2, #8]
 8003862:	4311      	orrs	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68d2      	ldr	r2, [r2, #12]
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6992      	ldr	r2, [r2, #24]
 800386e:	430a      	orrs	r2, r1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d161      	bne.n	8003948 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a38      	ldr	r2, [pc, #224]	; (8003968 <HAL_I2S_Init+0x274>)
 8003888:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a37      	ldr	r2, [pc, #220]	; (800396c <HAL_I2S_Init+0x278>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_I2S_Init+0x1a4>
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_I2S_Init+0x27c>)
 8003896:	e001      	b.n	800389c <HAL_I2S_Init+0x1a8>
 8003898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	4932      	ldr	r1, [pc, #200]	; (800396c <HAL_I2S_Init+0x278>)
 80038a4:	428a      	cmp	r2, r1
 80038a6:	d101      	bne.n	80038ac <HAL_I2S_Init+0x1b8>
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <HAL_I2S_Init+0x27c>)
 80038aa:	e001      	b.n	80038b0 <HAL_I2S_Init+0x1bc>
 80038ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80038b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2b      	ldr	r2, [pc, #172]	; (800396c <HAL_I2S_Init+0x278>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <HAL_I2S_Init+0x1d4>
 80038c4:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_I2S_Init+0x27c>)
 80038c6:	e001      	b.n	80038cc <HAL_I2S_Init+0x1d8>
 80038c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038cc:	2202      	movs	r2, #2
 80038ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <HAL_I2S_Init+0x278>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_I2S_Init+0x1ea>
 80038da:	4b25      	ldr	r3, [pc, #148]	; (8003970 <HAL_I2S_Init+0x27c>)
 80038dc:	e001      	b.n	80038e2 <HAL_I2S_Init+0x1ee>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ee:	d003      	beq.n	80038f8 <HAL_I2S_Init+0x204>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d103      	bne.n	8003900 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	e001      	b.n	8003904 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800390e:	4313      	orrs	r3, r2
 8003910:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003918:	4313      	orrs	r3, r2
 800391a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003922:	4313      	orrs	r3, r2
 8003924:	b29a      	uxth	r2, r3
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	4313      	orrs	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003930:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_I2S_Init+0x278>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_I2S_Init+0x24c>
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_I2S_Init+0x27c>)
 800393e:	e001      	b.n	8003944 <HAL_I2S_Init+0x250>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003944:	897a      	ldrh	r2, [r7, #10]
 8003946:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	08003a6b 	.word	0x08003a6b
 8003964:	cccccccd 	.word	0xcccccccd
 8003968:	08003b81 	.word	0x08003b81
 800396c:	40003800 	.word	0x40003800
 8003970:	40003400 	.word	0x40003400

08003974 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c9a      	adds	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ffb8 	bl	8003974 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10e      	bne.n	8003a62 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a52:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff93 	bl	8003988 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d13a      	bne.n	8003afc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d109      	bne.n	8003aa4 <I2S_IRQHandler+0x3a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d102      	bne.n	8003aa4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ffb4 	bl	8003a0c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d126      	bne.n	8003afc <I2S_IRQHandler+0x92>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d11f      	bne.n	8003afc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f043 0202 	orr.w	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ff50 	bl	800399c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d136      	bne.n	8003b76 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d109      	bne.n	8003b26 <I2S_IRQHandler+0xbc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d102      	bne.n	8003b26 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff45 	bl	80039b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d122      	bne.n	8003b76 <I2S_IRQHandler+0x10c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d11b      	bne.n	8003b76 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f043 0204 	orr.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff13 	bl	800399c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4aa2      	ldr	r2, [pc, #648]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b9a:	4ba2      	ldr	r3, [pc, #648]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b9c:	e001      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a9b      	ldr	r2, [pc, #620]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003bb8:	4b9a      	ldr	r3, [pc, #616]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bba:	e001      	b.n	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003bbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bcc:	d004      	beq.n	8003bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 8099 	bne.w	8003d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f925 	bl	8003e3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9c8 	bl	8003f9c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d13a      	bne.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d035      	beq.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003c2a:	4b7e      	ldr	r3, [pc, #504]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c2c:	e001      	b.n	8003c32 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4979      	ldr	r1, [pc, #484]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003c3e:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c40:	e001      	b.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c4a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f043 0202 	orr.w	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fe88 	bl	800399c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	f040 80be 	bne.w	8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80b8 	beq.w	8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a59      	ldr	r2, [pc, #356]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003cbe:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cc0:	e001      	b.n	8003cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4954      	ldr	r1, [pc, #336]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003cd2:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cd4:	e001      	b.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cde:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0204 	orr.w	r2, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fe4a 	bl	800399c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d08:	e084      	b.n	8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d107      	bne.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8be 	bl	8003ea0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8fd 	bl	8003f38 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d12f      	bne.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02a      	beq.n	8003da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2e      	ldr	r2, [pc, #184]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d6c:	4b2d      	ldr	r3, [pc, #180]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d6e:	e001      	b.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4929      	ldr	r1, [pc, #164]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d80:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d82:	e001      	b.n	8003d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fdfa 	bl	800399c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d131      	bne.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0320 	and.w	r3, r3, #32
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02c      	beq.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dc8:	e001      	b.n	8003dce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4912      	ldr	r1, [pc, #72]	; (8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dd6:	428b      	cmp	r3, r1
 8003dd8:	d101      	bne.n	8003dde <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ddc:	e001      	b.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	f043 0204 	orr.w	r2, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fdc5 	bl	800399c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e12:	e000      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e14:	bf00      	nop
}
 8003e16:	bf00      	nop
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40003800 	.word	0x40003800
 8003e24:	40003400 	.word	0x40003400

08003e28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c99      	adds	r1, r3, #2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e4e:	881a      	ldrh	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d113      	bne.n	8003e96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ffc9 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c99      	adds	r1, r3, #2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6251      	str	r1, [r2, #36]	; 0x24
 8003eb2:	8819      	ldrh	r1, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <I2SEx_TxISR_I2SExt+0x90>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <I2SEx_TxISR_I2SExt+0x22>
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <I2SEx_TxISR_I2SExt+0x94>)
 8003ec0:	e001      	b.n	8003ec6 <I2SEx_TxISR_I2SExt+0x26>
 8003ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d121      	bne.n	8003f26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <I2SEx_TxISR_I2SExt+0x90>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <I2SEx_TxISR_I2SExt+0x50>
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <I2SEx_TxISR_I2SExt+0x94>)
 8003eee:	e001      	b.n	8003ef4 <I2SEx_TxISR_I2SExt+0x54>
 8003ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <I2SEx_TxISR_I2SExt+0x90>)
 8003efc:	428b      	cmp	r3, r1
 8003efe:	d101      	bne.n	8003f04 <I2SEx_TxISR_I2SExt+0x64>
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <I2SEx_TxISR_I2SExt+0x94>)
 8003f02:	e001      	b.n	8003f08 <I2SEx_TxISR_I2SExt+0x68>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff81 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40003800 	.word	0x40003800
 8003f34:	40003400 	.word	0x40003400

08003f38 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68d8      	ldr	r0, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	1c99      	adds	r1, r3, #2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f50:	b282      	uxth	r2, r0
 8003f52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d113      	bne.n	8003f94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff4a 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	; (800402c <I2SEx_RxISR_I2SExt+0x90>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <I2SEx_RxISR_I2SExt+0x16>
 8003fae:	4b20      	ldr	r3, [pc, #128]	; (8004030 <I2SEx_RxISR_I2SExt+0x94>)
 8003fb0:	e001      	b.n	8003fb6 <I2SEx_RxISR_I2SExt+0x1a>
 8003fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb6:	68d8      	ldr	r0, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	1c99      	adds	r1, r3, #2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003fc2:	b282      	uxth	r2, r0
 8003fc4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d121      	bne.n	8004022 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <I2SEx_RxISR_I2SExt+0x90>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <I2SEx_RxISR_I2SExt+0x50>
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <I2SEx_RxISR_I2SExt+0x94>)
 8003fea:	e001      	b.n	8003ff0 <I2SEx_RxISR_I2SExt+0x54>
 8003fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	490d      	ldr	r1, [pc, #52]	; (800402c <I2SEx_RxISR_I2SExt+0x90>)
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	d101      	bne.n	8004000 <I2SEx_RxISR_I2SExt+0x64>
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <I2SEx_RxISR_I2SExt+0x94>)
 8003ffe:	e001      	b.n	8004004 <I2SEx_RxISR_I2SExt+0x68>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004008:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff03 	bl	8003e28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40003800 	.word	0x40003800
 8004030:	40003400 	.word	0x40003400

08004034 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_PWR_PVD_IRQHandler+0x20>)
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004044:	f000 f808 	bl	8004058 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <HAL_PWR_PVD_IRQHandler+0x20>)
 800404a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800404e:	615a      	str	r2, [r3, #20]
  }
}
 8004050:	bf00      	nop
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e264      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d075      	beq.n	8004172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004086:	4ba3      	ldr	r3, [pc, #652]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00c      	beq.n	80040ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4ba0      	ldr	r3, [pc, #640]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	2b08      	cmp	r3, #8
 800409c:	d112      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800409e:	4b9d      	ldr	r3, [pc, #628]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	4b99      	ldr	r3, [pc, #612]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05b      	beq.n	8004170 <HAL_RCC_OscConfig+0x108>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d157      	bne.n	8004170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e23f      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d106      	bne.n	80040dc <HAL_RCC_OscConfig+0x74>
 80040ce:	4b91      	ldr	r3, [pc, #580]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a90      	ldr	r2, [pc, #576]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x98>
 80040e6:	4b8b      	ldr	r3, [pc, #556]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a8a      	ldr	r2, [pc, #552]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b88      	ldr	r3, [pc, #544]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a87      	ldr	r2, [pc, #540]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 8004100:	4b84      	ldr	r3, [pc, #528]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a83      	ldr	r2, [pc, #524]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b81      	ldr	r3, [pc, #516]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a80      	ldr	r2, [pc, #512]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd f96c 	bl	80013fc <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd f968 	bl	80013fc <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e204      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b76      	ldr	r3, [pc, #472]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xc0>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd f958 	bl	80013fc <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd f954 	bl	80013fc <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e1f0      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0xe8>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417e:	4b65      	ldr	r3, [pc, #404]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b62      	ldr	r3, [pc, #392]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b5c      	ldr	r3, [pc, #368]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x152>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1c4      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b56      	ldr	r3, [pc, #344]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4952      	ldr	r1, [pc, #328]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e03a      	b.n	8004246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_OscConfig+0x2b0>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd f90d 	bl	80013fc <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fd f909 	bl	80013fc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1a5      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b43      	ldr	r3, [pc, #268]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4940      	ldr	r1, [pc, #256]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e015      	b.n	8004246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b3f      	ldr	r3, [pc, #252]	; (8004318 <HAL_RCC_OscConfig+0x2b0>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd f8ec 	bl	80013fc <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004228:	f7fd f8e8 	bl	80013fc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e184      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d030      	beq.n	80042b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <HAL_RCC_OscConfig+0x2b4>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd f8cc 	bl	80013fc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004268:	f7fd f8c8 	bl	80013fc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e164      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x200>
 8004286:	e015      	b.n	80042b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCC_OscConfig+0x2b4>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428e:	f7fd f8b5 	bl	80013fc <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004296:	f7fd f8b1 	bl	80013fc <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e14d      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80a0 	beq.w	8004402 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_OscConfig+0x2b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d121      	bne.n	8004342 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_RCC_OscConfig+0x2b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_RCC_OscConfig+0x2b8>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7fd f877 	bl	80013fc <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	e011      	b.n	8004336 <HAL_RCC_OscConfig+0x2ce>
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	42470000 	.word	0x42470000
 800431c:	42470e80 	.word	0x42470e80
 8004320:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004324:	f7fd f86a 	bl	80013fc <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e106      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b85      	ldr	r3, [pc, #532]	; (800454c <HAL_RCC_OscConfig+0x4e4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d106      	bne.n	8004358 <HAL_RCC_OscConfig+0x2f0>
 800434a:	4b81      	ldr	r3, [pc, #516]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a80      	ldr	r2, [pc, #512]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
 8004356:	e01c      	b.n	8004392 <HAL_RCC_OscConfig+0x32a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d10c      	bne.n	800437a <HAL_RCC_OscConfig+0x312>
 8004360:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a7a      	ldr	r2, [pc, #488]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004366:	f043 0304 	orr.w	r3, r3, #4
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
 800436c:	4b78      	ldr	r3, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	4a77      	ldr	r2, [pc, #476]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6713      	str	r3, [r2, #112]	; 0x70
 8004378:	e00b      	b.n	8004392 <HAL_RCC_OscConfig+0x32a>
 800437a:	4b75      	ldr	r3, [pc, #468]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a74      	ldr	r2, [pc, #464]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
 8004386:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	4a71      	ldr	r2, [pc, #452]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d015      	beq.n	80043c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fd f82f 	bl	80013fc <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fd f82b 	bl	80013fc <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0c5      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	4b65      	ldr	r3, [pc, #404]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ee      	beq.n	80043a2 <HAL_RCC_OscConfig+0x33a>
 80043c4:	e014      	b.n	80043f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fd f819 	bl	80013fc <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd f815 	bl	80013fc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0af      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	4b5a      	ldr	r3, [pc, #360]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ee      	bne.n	80043ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d105      	bne.n	8004402 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f6:	4b56      	ldr	r3, [pc, #344]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a55      	ldr	r2, [pc, #340]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 809b 	beq.w	8004542 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d05c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d141      	bne.n	80044a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b4c      	ldr	r3, [pc, #304]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fc ffe9 	bl	80013fc <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442e:	f7fc ffe5 	bl	80013fc <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e081      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	4b43      	ldr	r3, [pc, #268]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	019b      	lsls	r3, r3, #6
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	3b01      	subs	r3, #1
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	4937      	ldr	r1, [pc, #220]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004476:	4b37      	ldr	r3, [pc, #220]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fc ffbe 	bl	80013fc <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004484:	f7fc ffba 	bl	80013fc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e056      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x41c>
 80044a2:	e04e      	b.n	8004542 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x4ec>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044aa:	f7fc ffa7 	bl	80013fc <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fc ffa3 	bl	80013fc <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e03f      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x44a>
 80044d0:	e037      	b.n	8004542 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e032      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d028      	beq.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d121      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d11a      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004514:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	3b01      	subs	r3, #1
 8004528:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d107      	bne.n	800453e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40007000 	.word	0x40007000
 8004550:	40023800 	.word	0x40023800
 8004554:	42470060 	.word	0x42470060

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0cc      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d90c      	bls.n	8004594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b63      	ldr	r3, [pc, #396]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b8      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045ac:	4b59      	ldr	r3, [pc, #356]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c4:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a52      	ldr	r2, [pc, #328]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	494d      	ldr	r1, [pc, #308]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d044      	beq.n	8004678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d119      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e07f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d003      	beq.n	8004616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004612:	2b03      	cmp	r3, #3
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e06f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e067      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004636:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4934      	ldr	r1, [pc, #208]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004648:	f7fc fed8 	bl	80013fc <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	e00a      	b.n	8004666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004650:	f7fc fed4 	bl	80013fc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e04f      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 020c 	and.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	429a      	cmp	r2, r3
 8004676:	d1eb      	bne.n	8004650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004678:	4b25      	ldr	r3, [pc, #148]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d20c      	bcs.n	80046a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b22      	ldr	r3, [pc, #136]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e032      	b.n	8004706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ac:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	4916      	ldr	r1, [pc, #88]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	490e      	ldr	r1, [pc, #56]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046de:	f000 f821 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	490a      	ldr	r1, [pc, #40]	; (8004718 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	5ccb      	ldrb	r3, [r1, r3]
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fd4a 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023c00 	.word	0x40023c00
 8004714:	40023800 	.word	0x40023800
 8004718:	0800b9bc 	.word	0x0800b9bc
 800471c:	20000000 	.word	0x20000000
 8004720:	20000004 	.word	0x20000004

08004724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	2300      	movs	r3, #0
 8004736:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800473c:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d00d      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x40>
 8004748:	2b08      	cmp	r3, #8
 800474a:	f200 80bd 	bhi.w	80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x34>
 8004752:	2b04      	cmp	r3, #4
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x3a>
 8004756:	e0b7      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4b61      	ldr	r3, [pc, #388]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800475a:	60bb      	str	r3, [r7, #8]
       break;
 800475c:	e0b7      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004760:	60bb      	str	r3, [r7, #8]
      break;
 8004762:	e0b4      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004764:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d04d      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b58      	ldr	r3, [pc, #352]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	ea02 0800 	and.w	r8, r2, r0
 8004792:	ea03 0901 	and.w	r9, r3, r1
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	014b      	lsls	r3, r1, #5
 80047a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a8:	0142      	lsls	r2, r0, #5
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	ebb0 0008 	subs.w	r0, r0, r8
 80047b2:	eb61 0109 	sbc.w	r1, r1, r9
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	018b      	lsls	r3, r1, #6
 80047c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c4:	0182      	lsls	r2, r0, #6
 80047c6:	1a12      	subs	r2, r2, r0
 80047c8:	eb63 0301 	sbc.w	r3, r3, r1
 80047cc:	f04f 0000 	mov.w	r0, #0
 80047d0:	f04f 0100 	mov.w	r1, #0
 80047d4:	00d9      	lsls	r1, r3, #3
 80047d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047da:	00d0      	lsls	r0, r2, #3
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	eb12 0208 	adds.w	r2, r2, r8
 80047e4:	eb43 0309 	adc.w	r3, r3, r9
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0259      	lsls	r1, r3, #9
 80047f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047f6:	0250      	lsls	r0, r2, #9
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	461a      	mov	r2, r3
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	f7fb fcf2 	bl	80001f0 <__aeabi_uldivmod>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4613      	mov	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e04a      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004816:	4b31      	ldr	r3, [pc, #196]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	461a      	mov	r2, r3
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	ea02 0400 	and.w	r4, r2, r0
 800482e:	ea03 0501 	and.w	r5, r3, r1
 8004832:	4620      	mov	r0, r4
 8004834:	4629      	mov	r1, r5
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	014b      	lsls	r3, r1, #5
 8004840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004844:	0142      	lsls	r2, r0, #5
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	1b00      	subs	r0, r0, r4
 800484c:	eb61 0105 	sbc.w	r1, r1, r5
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	018b      	lsls	r3, r1, #6
 800485a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800485e:	0182      	lsls	r2, r0, #6
 8004860:	1a12      	subs	r2, r2, r0
 8004862:	eb63 0301 	sbc.w	r3, r3, r1
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	00d9      	lsls	r1, r3, #3
 8004870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004874:	00d0      	lsls	r0, r2, #3
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	1912      	adds	r2, r2, r4
 800487c:	eb45 0303 	adc.w	r3, r5, r3
 8004880:	f04f 0000 	mov.w	r0, #0
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	0299      	lsls	r1, r3, #10
 800488a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800488e:	0290      	lsls	r0, r2, #10
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	f7fb fca6 	bl	80001f0 <__aeabi_uldivmod>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4613      	mov	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	3301      	adds	r3, #1
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	60bb      	str	r3, [r7, #8]
      break;
 80048c6:	e002      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048ca:	60bb      	str	r3, [r7, #8]
      break;
 80048cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ce:	68bb      	ldr	r3, [r7, #8]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	00f42400 	.word	0x00f42400
 80048e4:	007a1200 	.word	0x007a1200

080048e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004904:	f7ff fff0 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4903      	ldr	r1, [pc, #12]	; (8004924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40023800 	.word	0x40023800
 8004924:	0800b9cc 	.word	0x0800b9cc

08004928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800492c:	f7ff ffdc 	bl	80048e8 <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0b5b      	lsrs	r3, r3, #13
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4903      	ldr	r1, [pc, #12]	; (800494c <HAL_RCC_GetPCLK2Freq+0x24>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	0800b9cc 	.word	0x0800b9cc

08004950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	220f      	movs	r2, #15
 800495e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_GetClockConfig+0x5c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_RCC_GetClockConfig+0x60>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0207 	and.w	r2, r3, #7
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	40023c00 	.word	0x40023c00

080049b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d105      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d035      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049dc:	4b67      	ldr	r3, [pc, #412]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e2:	f7fc fd0b 	bl	80013fc <HAL_GetTick>
 80049e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e8:	e008      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ea:	f7fc fd07 	bl	80013fc <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e0ba      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049fc:	4b60      	ldr	r3, [pc, #384]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	019a      	lsls	r2, r3, #6
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	071b      	lsls	r3, r3, #28
 8004a14:	495a      	ldr	r1, [pc, #360]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a1c:	4b57      	ldr	r3, [pc, #348]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a22:	f7fc fceb 	bl	80013fc <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a2a:	f7fc fce7 	bl	80013fc <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e09a      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8083 	beq.w	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4b49      	ldr	r3, [pc, #292]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a48      	ldr	r2, [pc, #288]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
 8004a66:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a72:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a43      	ldr	r2, [pc, #268]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a7e:	f7fc fcbd 	bl	80013fc <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a86:	f7fc fcb9 	bl	80013fc <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e06c      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a98:	4b3a      	ldr	r3, [pc, #232]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004aa4:	4b36      	ldr	r3, [pc, #216]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d028      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ac2:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004acc:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ad8:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d114      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fc fc87 	bl	80013fc <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	e00a      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fc fc83 	bl	80013fc <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e034      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0ee      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d10d      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b22:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	4912      	ldr	r1, [pc, #72]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	608b      	str	r3, [r1, #8]
 8004b3c:	e005      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b48:	6093      	str	r3, [r2, #8]
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b56:	490a      	ldr	r1, [pc, #40]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7c1a      	ldrb	r2, [r3, #16]
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b6e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	42470068 	.word	0x42470068
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40007000 	.word	0x40007000
 8004b88:	42470e40 	.word	0x42470e40
 8004b8c:	424711e0 	.word	0x424711e0

08004b90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d13e      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d12f      	bne.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bc6:	617b      	str	r3, [r7, #20]
          break;
 8004bc8:	e02f      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bca:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd6:	d108      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	e007      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf2:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c14:	0f1b      	lsrs	r3, r3, #28
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
          break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
          break;
 8004c28:	bf00      	nop
        }
      }
      break;
 8004c2a:	bf00      	nop
    }
  }
  return frequency;
 8004c2c:	697b      	ldr	r3, [r7, #20]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00bb8000 	.word	0x00bb8000
 8004c44:	007a1200 	.word	0x007a1200
 8004c48:	00f42400 	.word	0x00f42400

08004c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07b      	b.n	8004d56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6e:	d009      	beq.n	8004c84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	61da      	str	r2, [r3, #28]
 8004c76:	e005      	b.n	8004c84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc f9ea 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	ea42 0103 	orr.w	r1, r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	f003 0104 	and.w	r1, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0210 	and.w	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e041      	b.n	8004df4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f839 	bl	8004dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 f9c9 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d001      	beq.n	8004e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e044      	b.n	8004eb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x6c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x6c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x6c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x6c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_TIM_Base_Start_IT+0xbc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x6c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e007      	b.n	8004eb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000

08004ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0202 	mvn.w	r2, #2
 8004f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8ee 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8e0 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8f1 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0204 	mvn.w	r2, #4
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f8c4 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8b6 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8c7 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0208 	mvn.w	r2, #8
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2204      	movs	r2, #4
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f89a 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f88c 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f89d 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0210 	mvn.w	r2, #16
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2208      	movs	r2, #8
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f870 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f862 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f873 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0201 	mvn.w	r2, #1
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fb febe 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8e2 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f838 	bl	8005120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0220 	mvn.w	r2, #32
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8ac 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <TIM_Base_SetConfig+0xe4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00f      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a31      	ldr	r2, [pc, #196]	; (800521c <TIM_Base_SetConfig+0xe8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a30      	ldr	r2, [pc, #192]	; (8005220 <TIM_Base_SetConfig+0xec>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a2f      	ldr	r2, [pc, #188]	; (8005224 <TIM_Base_SetConfig+0xf0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <TIM_Base_SetConfig+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d017      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a22      	ldr	r2, [pc, #136]	; (800521c <TIM_Base_SetConfig+0xe8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a21      	ldr	r2, [pc, #132]	; (8005220 <TIM_Base_SetConfig+0xec>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <TIM_Base_SetConfig+0xf0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <TIM_Base_SetConfig+0xf4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <TIM_Base_SetConfig+0xf8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <TIM_Base_SetConfig+0xfc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a08      	ldr	r2, [pc, #32]	; (8005218 <TIM_Base_SetConfig+0xe4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e03f      	b.n	80052ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fb ff40 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800529e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f929 	bl	80054f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b08a      	sub	sp, #40	; 0x28
 80052fa:	af02      	add	r7, sp, #8
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b20      	cmp	r3, #32
 8005314:	d17c      	bne.n	8005410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_UART_Transmit+0x2c>
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e075      	b.n	8005412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x3e>
 8005330:	2302      	movs	r3, #2
 8005332:	e06e      	b.n	8005412 <HAL_UART_Transmit+0x11c>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2221      	movs	r2, #33	; 0x21
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534a:	f7fc f857 	bl	80013fc <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d108      	bne.n	8005378 <HAL_UART_Transmit+0x82>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e003      	b.n	8005380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005388:	e02a      	b.n	80053e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2200      	movs	r2, #0
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f840 	bl	800541a <UART_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e036      	b.n	8005412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	3302      	adds	r3, #2
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e007      	b.n	80053d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1cf      	bne.n	800538a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2140      	movs	r1, #64	; 0x40
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f810 	bl	800541a <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e006      	b.n	8005412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b090      	sub	sp, #64	; 0x40
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542a:	e050      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d04c      	beq.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <UART_WaitOnFlagUntilTimeout+0x30>
 800543a:	f7fb ffdf 	bl	80013fc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005446:	429a      	cmp	r2, r3
 8005448:	d241      	bcs.n	80054ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800546a:	637a      	str	r2, [r7, #52]	; 0x34
 800546c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e5      	bne.n	800544a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3314      	adds	r3, #20
 8005484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	613b      	str	r3, [r7, #16]
   return(result);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	63bb      	str	r3, [r7, #56]	; 0x38
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3314      	adds	r3, #20
 800549c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800549e:	623a      	str	r2, [r7, #32]
 80054a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e00f      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	461a      	mov	r2, r3
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d09f      	beq.n	800542c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3740      	adds	r7, #64	; 0x40
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b09f      	sub	sp, #124	; 0x7c
 80054fe:	af00      	add	r7, sp, #0
 8005500:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	68d9      	ldr	r1, [r3, #12]
 8005510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	ea40 0301 	orr.w	r3, r0, r1
 8005518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	431a      	orrs	r2, r3
 8005524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	431a      	orrs	r2, r3
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	4313      	orrs	r3, r2
 8005530:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800553c:	f021 010c 	bic.w	r1, r1, #12
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005546:	430b      	orrs	r3, r1
 8005548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800554a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	ea40 0301 	orr.w	r3, r0, r1
 8005560:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4bc5      	ldr	r3, [pc, #788]	; (800587c <UART_SetConfig+0x384>)
 8005568:	429a      	cmp	r2, r3
 800556a:	d004      	beq.n	8005576 <UART_SetConfig+0x7e>
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4bc3      	ldr	r3, [pc, #780]	; (8005880 <UART_SetConfig+0x388>)
 8005572:	429a      	cmp	r2, r3
 8005574:	d103      	bne.n	800557e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005576:	f7ff f9d7 	bl	8004928 <HAL_RCC_GetPCLK2Freq>
 800557a:	6778      	str	r0, [r7, #116]	; 0x74
 800557c:	e002      	b.n	8005584 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800557e:	f7ff f9bf 	bl	8004900 <HAL_RCC_GetPCLK1Freq>
 8005582:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558c:	f040 80b6 	bne.w	80056fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005592:	461c      	mov	r4, r3
 8005594:	f04f 0500 	mov.w	r5, #0
 8005598:	4622      	mov	r2, r4
 800559a:	462b      	mov	r3, r5
 800559c:	1891      	adds	r1, r2, r2
 800559e:	6439      	str	r1, [r7, #64]	; 0x40
 80055a0:	415b      	adcs	r3, r3
 80055a2:	647b      	str	r3, [r7, #68]	; 0x44
 80055a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055a8:	1912      	adds	r2, r2, r4
 80055aa:	eb45 0303 	adc.w	r3, r5, r3
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	00d9      	lsls	r1, r3, #3
 80055b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055bc:	00d0      	lsls	r0, r2, #3
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	1911      	adds	r1, r2, r4
 80055c4:	6639      	str	r1, [r7, #96]	; 0x60
 80055c6:	416b      	adcs	r3, r5
 80055c8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	1891      	adds	r1, r2, r2
 80055d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055d8:	415b      	adcs	r3, r3
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055e4:	f7fa fe04 	bl	80001f0 <__aeabi_uldivmod>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4ba5      	ldr	r3, [pc, #660]	; (8005884 <UART_SetConfig+0x38c>)
 80055ee:	fba3 2302 	umull	r2, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	011e      	lsls	r6, r3, #4
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	461c      	mov	r4, r3
 80055fa:	f04f 0500 	mov.w	r5, #0
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	1891      	adds	r1, r2, r2
 8005604:	6339      	str	r1, [r7, #48]	; 0x30
 8005606:	415b      	adcs	r3, r3
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
 800560a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800560e:	1912      	adds	r2, r2, r4
 8005610:	eb45 0303 	adc.w	r3, r5, r3
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f04f 0100 	mov.w	r1, #0
 800561c:	00d9      	lsls	r1, r3, #3
 800561e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005622:	00d0      	lsls	r0, r2, #3
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	1911      	adds	r1, r2, r4
 800562a:	65b9      	str	r1, [r7, #88]	; 0x58
 800562c:	416b      	adcs	r3, r5
 800562e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	461a      	mov	r2, r3
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	1891      	adds	r1, r2, r2
 800563c:	62b9      	str	r1, [r7, #40]	; 0x28
 800563e:	415b      	adcs	r3, r3
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005646:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800564a:	f7fa fdd1 	bl	80001f0 <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4b8c      	ldr	r3, [pc, #560]	; (8005884 <UART_SetConfig+0x38c>)
 8005654:	fba3 1302 	umull	r1, r3, r3, r2
 8005658:	095b      	lsrs	r3, r3, #5
 800565a:	2164      	movs	r1, #100	; 0x64
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	3332      	adds	r3, #50	; 0x32
 8005666:	4a87      	ldr	r2, [pc, #540]	; (8005884 <UART_SetConfig+0x38c>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005674:	441e      	add	r6, r3
 8005676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005678:	4618      	mov	r0, r3
 800567a:	f04f 0100 	mov.w	r1, #0
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	1894      	adds	r4, r2, r2
 8005684:	623c      	str	r4, [r7, #32]
 8005686:	415b      	adcs	r3, r3
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
 800568a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800568e:	1812      	adds	r2, r2, r0
 8005690:	eb41 0303 	adc.w	r3, r1, r3
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	f04f 0500 	mov.w	r5, #0
 800569c:	00dd      	lsls	r5, r3, #3
 800569e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056a2:	00d4      	lsls	r4, r2, #3
 80056a4:	4622      	mov	r2, r4
 80056a6:	462b      	mov	r3, r5
 80056a8:	1814      	adds	r4, r2, r0
 80056aa:	653c      	str	r4, [r7, #80]	; 0x50
 80056ac:	414b      	adcs	r3, r1
 80056ae:	657b      	str	r3, [r7, #84]	; 0x54
 80056b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	1891      	adds	r1, r2, r2
 80056bc:	61b9      	str	r1, [r7, #24]
 80056be:	415b      	adcs	r3, r3
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056ca:	f7fa fd91 	bl	80001f0 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <UART_SetConfig+0x38c>)
 80056d4:	fba3 1302 	umull	r1, r3, r3, r2
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	2164      	movs	r1, #100	; 0x64
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	3332      	adds	r3, #50	; 0x32
 80056e6:	4a67      	ldr	r2, [pc, #412]	; (8005884 <UART_SetConfig+0x38c>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	f003 0207 	and.w	r2, r3, #7
 80056f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4432      	add	r2, r6
 80056f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056fa:	e0b9      	b.n	8005870 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056fe:	461c      	mov	r4, r3
 8005700:	f04f 0500 	mov.w	r5, #0
 8005704:	4622      	mov	r2, r4
 8005706:	462b      	mov	r3, r5
 8005708:	1891      	adds	r1, r2, r2
 800570a:	6139      	str	r1, [r7, #16]
 800570c:	415b      	adcs	r3, r3
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005714:	1912      	adds	r2, r2, r4
 8005716:	eb45 0303 	adc.w	r3, r5, r3
 800571a:	f04f 0000 	mov.w	r0, #0
 800571e:	f04f 0100 	mov.w	r1, #0
 8005722:	00d9      	lsls	r1, r3, #3
 8005724:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005728:	00d0      	lsls	r0, r2, #3
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	eb12 0804 	adds.w	r8, r2, r4
 8005732:	eb43 0905 	adc.w	r9, r3, r5
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	008b      	lsls	r3, r1, #2
 800574a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800574e:	0082      	lsls	r2, r0, #2
 8005750:	4640      	mov	r0, r8
 8005752:	4649      	mov	r1, r9
 8005754:	f7fa fd4c 	bl	80001f0 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4b49      	ldr	r3, [pc, #292]	; (8005884 <UART_SetConfig+0x38c>)
 800575e:	fba3 2302 	umull	r2, r3, r3, r2
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	011e      	lsls	r6, r3, #4
 8005766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005768:	4618      	mov	r0, r3
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	1894      	adds	r4, r2, r2
 8005774:	60bc      	str	r4, [r7, #8]
 8005776:	415b      	adcs	r3, r3
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800577e:	1812      	adds	r2, r2, r0
 8005780:	eb41 0303 	adc.w	r3, r1, r3
 8005784:	f04f 0400 	mov.w	r4, #0
 8005788:	f04f 0500 	mov.w	r5, #0
 800578c:	00dd      	lsls	r5, r3, #3
 800578e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005792:	00d4      	lsls	r4, r2, #3
 8005794:	4622      	mov	r2, r4
 8005796:	462b      	mov	r3, r5
 8005798:	1814      	adds	r4, r2, r0
 800579a:	64bc      	str	r4, [r7, #72]	; 0x48
 800579c:	414b      	adcs	r3, r1
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f04f 0100 	mov.w	r1, #0
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	008b      	lsls	r3, r1, #2
 80057b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057b8:	0082      	lsls	r2, r0, #2
 80057ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80057be:	f7fa fd17 	bl	80001f0 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <UART_SetConfig+0x38c>)
 80057c8:	fba3 1302 	umull	r1, r3, r3, r2
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	2164      	movs	r1, #100	; 0x64
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	3332      	adds	r3, #50	; 0x32
 80057da:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <UART_SetConfig+0x38c>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e6:	441e      	add	r6, r3
 80057e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ea:	4618      	mov	r0, r3
 80057ec:	f04f 0100 	mov.w	r1, #0
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	1894      	adds	r4, r2, r2
 80057f6:	603c      	str	r4, [r7, #0]
 80057f8:	415b      	adcs	r3, r3
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005800:	1812      	adds	r2, r2, r0
 8005802:	eb41 0303 	adc.w	r3, r1, r3
 8005806:	f04f 0400 	mov.w	r4, #0
 800580a:	f04f 0500 	mov.w	r5, #0
 800580e:	00dd      	lsls	r5, r3, #3
 8005810:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005814:	00d4      	lsls	r4, r2, #3
 8005816:	4622      	mov	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	eb12 0a00 	adds.w	sl, r2, r0
 800581e:	eb43 0b01 	adc.w	fp, r3, r1
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	f04f 0100 	mov.w	r1, #0
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	008b      	lsls	r3, r1, #2
 8005836:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800583a:	0082      	lsls	r2, r0, #2
 800583c:	4650      	mov	r0, sl
 800583e:	4659      	mov	r1, fp
 8005840:	f7fa fcd6 	bl	80001f0 <__aeabi_uldivmod>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <UART_SetConfig+0x38c>)
 800584a:	fba3 1302 	umull	r1, r3, r3, r2
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	2164      	movs	r1, #100	; 0x64
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	3332      	adds	r3, #50	; 0x32
 800585c:	4a09      	ldr	r2, [pc, #36]	; (8005884 <UART_SetConfig+0x38c>)
 800585e:	fba2 2303 	umull	r2, r3, r2, r3
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4432      	add	r2, r6
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	377c      	adds	r7, #124	; 0x7c
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	bf00      	nop
 800587c:	40011000 	.word	0x40011000
 8005880:	40011400 	.word	0x40011400
 8005884:	51eb851f 	.word	0x51eb851f

08005888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005888:	b084      	sub	sp, #16
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	f107 001c 	add.w	r0, r7, #28
 8005896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d122      	bne.n	80058e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9a0 	bl	8005c20 <USB_CoreReset>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
 80058e4:	e01a      	b.n	800591c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f994 	bl	8005c20 <USB_CoreReset>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
 800590e:	e005      	b.n	800591c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10b      	bne.n	800593a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f043 0206 	orr.w	r2, r3, #6
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005946:	b004      	add	sp, #16
 8005948:	4770      	bx	lr

0800594a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f023 0201 	bic.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d115      	bne.n	80059dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059bc:	2001      	movs	r0, #1
 80059be:	f7fb fd29 	bl	8001414 <HAL_Delay>
      ms++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f91a 	bl	8005c02 <USB_GetMode>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d01e      	beq.n	8005a12 <USB_SetCurrentMode+0x84>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b31      	cmp	r3, #49	; 0x31
 80059d8:	d9f0      	bls.n	80059bc <USB_SetCurrentMode+0x2e>
 80059da:	e01a      	b.n	8005a12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d115      	bne.n	8005a0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059ee:	2001      	movs	r0, #1
 80059f0:	f7fb fd10 	bl	8001414 <HAL_Delay>
      ms++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f901 	bl	8005c02 <USB_GetMode>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <USB_SetCurrentMode+0x84>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b31      	cmp	r3, #49	; 0x31
 8005a0a:	d9f0      	bls.n	80059ee <USB_SetCurrentMode+0x60>
 8005a0c:	e001      	b.n	8005a12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e005      	b.n	8005a1e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b32      	cmp	r3, #50	; 0x32
 8005a16:	d101      	bne.n	8005a1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	019b      	lsls	r3, r3, #6
 8005a3a:	f043 0220 	orr.w	r2, r3, #32
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <USB_FlushTxFifo+0x44>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e006      	b.n	8005a60 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d0f1      	beq.n	8005a42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	00030d40 	.word	0x00030d40

08005a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2210      	movs	r2, #16
 8005a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	4a08      	ldr	r2, [pc, #32]	; (8005aac <USB_FlushRxFifo+0x3c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e006      	b.n	8005aa0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d0f1      	beq.n	8005a82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	00030d40 	.word	0x00030d40

08005ab0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	460b      	mov	r3, r1
 8005ac0:	71fb      	strb	r3, [r7, #7]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d123      	bne.n	8005b1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad6:	88bb      	ldrh	r3, [r7, #4]
 8005ad8:	3303      	adds	r3, #3
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e018      	b.n	8005b16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	031a      	lsls	r2, r3, #12
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af0:	461a      	mov	r2, r3
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3301      	adds	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	3301      	adds	r3, #1
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3e2      	bcc.n	8005ae4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3724      	adds	r7, #36	; 0x24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b08b      	sub	sp, #44	; 0x2c
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	e014      	b.n	8005b82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	3301      	adds	r3, #1
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	3301      	adds	r3, #1
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	3301      	adds	r3, #1
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d3e6      	bcc.n	8005b58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b8a:	8bfb      	ldrh	r3, [r7, #30]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01e      	beq.n	8005bce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f107 0310 	add.w	r3, r7, #16
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	701a      	strb	r2, [r3, #0]
      i++;
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bc2:	8bfb      	ldrh	r3, [r7, #30]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ea      	bne.n	8005ba4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	372c      	adds	r7, #44	; 0x2c
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	4a13      	ldr	r2, [pc, #76]	; (8005c80 <USB_CoreReset+0x60>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e01a      	b.n	8005c72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	daf3      	bge.n	8005c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f043 0201 	orr.w	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <USB_CoreReset+0x60>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d0f1      	beq.n	8005c54 <USB_CoreReset+0x34>

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	00030d40 	.word	0x00030d40

08005c84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c84:	b084      	sub	sp, #16
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	f107 001c 	add.w	r0, r7, #28
 8005c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d10a      	bne.n	8005cf2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	e014      	b.n	8005d1c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e009      	b.n	8005d1c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d16:	f023 0304 	bic.w	r3, r3, #4
 8005d1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005d1c:	2110      	movs	r1, #16
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff fe82 	bl	8005a28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fea3 	bl	8005a70 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e015      	b.n	8005d5c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	2300      	movs	r3, #0
 8005d54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d3e5      	bcc.n	8005d30 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <USB_HostInit+0x154>)
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <USB_HostInit+0x158>)
 8005d90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d94:	e009      	b.n	8005daa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2280      	movs	r2, #128	; 0x80
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a10      	ldr	r2, [pc, #64]	; (8005de0 <USB_HostInit+0x15c>)
 8005da0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <USB_HostInit+0x160>)
 8005da6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f043 0210 	orr.w	r2, r3, #16
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <USB_HostInit+0x164>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd4:	b004      	add	sp, #16
 8005dd6:	4770      	bx	lr
 8005dd8:	01000200 	.word	0x01000200
 8005ddc:	00e00300 	.word	0x00e00300
 8005de0:	00600080 	.word	0x00600080
 8005de4:	004000e0 	.word	0x004000e0
 8005de8:	a3200008 	.word	0xa3200008

08005dec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e0a:	f023 0303 	bic.w	r3, r3, #3
 8005e0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e34:	461a      	mov	r2, r3
 8005e36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e3a:	6053      	str	r3, [r2, #4]
 8005e3c:	e009      	b.n	8005e52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d106      	bne.n	8005e52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e90:	2064      	movs	r0, #100	; 0x64
 8005e92:	f7fb fabf 	bl	8001414 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ea4:	200a      	movs	r0, #10
 8005ea6:	f7fb fab5 	bl	8001414 <HAL_Delay>

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ed8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <USB_DriveVbus+0x44>
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d106      	bne.n	8005ef8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ef6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	d109      	bne.n	8005f18 <USB_DriveVbus+0x64>
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	0c5b      	lsrs	r3, r3, #17
 8005f44:	f003 0303 	and.w	r3, r3, #3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	b29b      	uxth	r3, r3
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	70fb      	strb	r3, [r7, #3]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70bb      	strb	r3, [r7, #2]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d87e      	bhi.n	80060b4 <USB_HC_Init+0x13c>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <USB_HC_Init+0x44>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08006077 	.word	0x08006077
 8005fc4:	08005fcd 	.word	0x08005fcd
 8005fc8:	08006039 	.word	0x08006039
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f240 439d 	movw	r3, #1181	; 0x49d
 8005fde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fe0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da10      	bge.n	800600a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	78fa      	ldrb	r2, [r7, #3]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006006:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006008:	e057      	b.n	80060ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d051      	beq.n	80060ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	440a      	add	r2, r1
 800602c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006030:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006034:	60d3      	str	r3, [r2, #12]
      break;
 8006036:	e040      	b.n	80060ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006044:	461a      	mov	r2, r3
 8006046:	f240 639d 	movw	r3, #1693	; 0x69d
 800604a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800604c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006050:	2b00      	cmp	r3, #0
 8006052:	da34      	bge.n	80060be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006072:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006074:	e023      	b.n	80060be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	461a      	mov	r2, r3
 8006084:	f240 2325 	movw	r3, #549	; 0x225
 8006088:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800608a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800608e:	2b00      	cmp	r3, #0
 8006090:	da17      	bge.n	80060c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060b2:	e006      	b.n	80060c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77fb      	strb	r3, [r7, #31]
      break;
 80060b8:	e004      	b.n	80060c4 <USB_HC_Init+0x14c>
      break;
 80060ba:	bf00      	nop
 80060bc:	e002      	b.n	80060c4 <USB_HC_Init+0x14c>
      break;
 80060be:	bf00      	nop
 80060c0:	e000      	b.n	80060c4 <USB_HC_Init+0x14c>
      break;
 80060c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	2101      	movs	r1, #1
 80060d4:	fa01 f303 	lsl.w	r3, r1, r3
 80060d8:	6939      	ldr	r1, [r7, #16]
 80060da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060de:	4313      	orrs	r3, r2
 80060e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80060ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da03      	bge.n	80060fe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e001      	b.n	8006102 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ff0f 	bl	8005f26 <USB_GetHostSpeed>
 8006108:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800610a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800610e:	2b02      	cmp	r3, #2
 8006110:	d106      	bne.n	8006120 <USB_HC_Init+0x1a8>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d003      	beq.n	8006120 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	e001      	b.n	8006124 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006124:	787b      	ldrb	r3, [r7, #1]
 8006126:	059b      	lsls	r3, r3, #22
 8006128:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800612c:	78bb      	ldrb	r3, [r7, #2]
 800612e:	02db      	lsls	r3, r3, #11
 8006130:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006134:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800613a:	049b      	lsls	r3, r3, #18
 800613c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006140:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006142:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006144:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006148:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	0159      	lsls	r1, r3, #5
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	440b      	add	r3, r1
 8006156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006160:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006166:	2b03      	cmp	r3, #3
 8006168:	d10f      	bne.n	800618a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	78fa      	ldrb	r2, [r7, #3]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	440a      	add	r2, r1
 8006180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006188:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800618a:	7ffb      	ldrb	r3, [r7, #31]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02d      	beq.n	800621a <USB_HC_StartXfer+0x86>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	791b      	ldrb	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d129      	bne.n	800621a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d117      	bne.n	80061fc <USB_HC_StartXfer+0x68>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	79db      	ldrb	r3, [r3, #7]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <USB_HC_StartXfer+0x48>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	79db      	ldrb	r3, [r3, #7]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d10f      	bne.n	80061fc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <USB_HC_StartXfer+0x86>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	795b      	ldrb	r3, [r3, #5]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d107      	bne.n	800621a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	4619      	mov	r1, r3
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fa2f 	bl	8006674 <USB_DoPing>
      return HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	e0f8      	b.n	800640c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	8912      	ldrh	r2, [r2, #8]
 800622a:	4413      	add	r3, r2
 800622c:	3b01      	subs	r3, #1
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	8912      	ldrh	r2, [r2, #8]
 8006232:	fbb3 f3f2 	udiv	r3, r3, r2
 8006236:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006238:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800623a:	8b7b      	ldrh	r3, [r7, #26]
 800623c:	429a      	cmp	r2, r3
 800623e:	d90b      	bls.n	8006258 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006240:	8b7b      	ldrh	r3, [r7, #26]
 8006242:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006244:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	8912      	ldrh	r2, [r2, #8]
 800624a:	fb02 f203 	mul.w	r2, r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	611a      	str	r2, [r3, #16]
 8006252:	e001      	b.n	8006258 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006254:	2301      	movs	r3, #1
 8006256:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	78db      	ldrb	r3, [r3, #3]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	8912      	ldrh	r2, [r2, #8]
 8006266:	fb02 f203 	mul.w	r2, r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	611a      	str	r2, [r3, #16]
 800626e:	e003      	b.n	8006278 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006282:	04d9      	lsls	r1, r3, #19
 8006284:	4b63      	ldr	r3, [pc, #396]	; (8006414 <USB_HC_StartXfer+0x280>)
 8006286:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006288:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	7a9b      	ldrb	r3, [r3, #10]
 800628e:	075b      	lsls	r3, r3, #29
 8006290:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	0148      	lsls	r0, r1, #5
 8006298:	6a39      	ldr	r1, [r7, #32]
 800629a:	4401      	add	r1, r0
 800629c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	68d9      	ldr	r1, [r3, #12]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ba:	460a      	mov	r2, r1
 80062bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf0c      	ite	eq
 80062ce:	2301      	moveq	r3, #1
 80062d0:	2300      	movne	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80062f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	7e7b      	ldrb	r3, [r7, #25]
 8006306:	075b      	lsls	r3, r3, #29
 8006308:	69f9      	ldr	r1, [r7, #28]
 800630a:	0148      	lsls	r0, r1, #5
 800630c:	6a39      	ldr	r1, [r7, #32]
 800630e:	4401      	add	r1, r0
 8006310:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	4413      	add	r3, r2
 8006320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800632e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	78db      	ldrb	r3, [r3, #3]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	e003      	b.n	800634a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006348:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006350:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	461a      	mov	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e04e      	b.n	800640c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	78db      	ldrb	r3, [r3, #3]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d149      	bne.n	800640a <USB_HC_StartXfer+0x276>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d045      	beq.n	800640a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	79db      	ldrb	r3, [r3, #7]
 8006382:	2b03      	cmp	r3, #3
 8006384:	d830      	bhi.n	80063e8 <USB_HC_StartXfer+0x254>
 8006386:	a201      	add	r2, pc, #4	; (adr r2, 800638c <USB_HC_StartXfer+0x1f8>)
 8006388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063c1 	.word	0x080063c1
 8006394:	0800639d 	.word	0x0800639d
 8006398:	080063c1 	.word	0x080063c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	3303      	adds	r3, #3
 80063a2:	089b      	lsrs	r3, r3, #2
 80063a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063a6:	8afa      	ldrh	r2, [r7, #22]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d91c      	bls.n	80063ec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80063be:	e015      	b.n	80063ec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	3303      	adds	r3, #3
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063ca:	8afa      	ldrh	r2, [r7, #22]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d90a      	bls.n	80063f0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80063e6:	e003      	b.n	80063f0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80063e8:	bf00      	nop
 80063ea:	e002      	b.n	80063f2 <USB_HC_StartXfer+0x25e>
        break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <USB_HC_StartXfer+0x25e>
        break;
 80063f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	68d9      	ldr	r1, [r3, #12]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	785a      	ldrb	r2, [r3, #1]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2000      	movs	r0, #0
 8006402:	9000      	str	r0, [sp, #0]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff fb53 	bl	8005ab0 <USB_WritePacket>
  }

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	1ff80000 	.word	0x1ff80000

08006418 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	b29b      	uxth	r3, r3
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800643a:	b480      	push	{r7}
 800643c:	b089      	sub	sp, #36	; 0x24
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	0c9b      	lsrs	r3, r3, #18
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	0fdb      	lsrs	r3, r3, #31
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b20      	cmp	r3, #32
 8006488:	d104      	bne.n	8006494 <USB_HC_Halt+0x5a>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e0e8      	b.n	8006666 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <USB_HC_Halt+0x66>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d173      	bne.n	8006588 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 80cb 	bne.w	8006664 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d143      	bne.n	8006562 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	440a      	add	r2, r1
 8006510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006518:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	440a      	add	r2, r1
 8006530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006538:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	3301      	adds	r3, #1
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006546:	d81d      	bhi.n	8006584 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800655a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655e:	d0ec      	beq.n	800653a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006560:	e080      	b.n	8006664 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	440a      	add	r2, r1
 8006578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006580:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006582:	e06f      	b.n	8006664 <USB_HC_Halt+0x22a>
            break;
 8006584:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006586:	e06d      	b.n	8006664 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	440a      	add	r2, r1
 800659e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d143      	bne.n	8006640 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006616:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	3301      	adds	r3, #1
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006624:	d81d      	bhi.n	8006662 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d0ec      	beq.n	8006618 <USB_HC_Halt+0x1de>
 800663e:	e011      	b.n	8006664 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e000      	b.n	8006664 <USB_HC_Halt+0x22a>
          break;
 8006662:	bf00      	nop
    }
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006688:	2301      	movs	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	04da      	lsls	r2, r3, #19
 8006690:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <USB_DoPing+0x74>)
 8006692:	4013      	ands	r3, r2
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	440a      	add	r2, r1
 800669c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	461a      	mov	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	1ff80000 	.word	0x1ff80000

080066ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff f935 	bl	800596c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006702:	2110      	movs	r1, #16
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff f98f 	bl	8005a28 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff f9b0 	bl	8005a70 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	e01f      	b.n	8006756 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800672c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006734:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800673c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	461a      	mov	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	3301      	adds	r3, #1
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b0f      	cmp	r3, #15
 800675a:	d9dc      	bls.n	8006716 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800675c:	2300      	movs	r3, #0
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	e034      	b.n	80067cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006778:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006780:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006788:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006796:	461a      	mov	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	3301      	adds	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067a8:	d80c      	bhi.n	80067c4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c0:	d0ec      	beq.n	800679c <USB_StopHost+0xb0>
 80067c2:	e000      	b.n	80067c6 <USB_StopHost+0xda>
        break;
 80067c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3301      	adds	r3, #1
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d9c7      	bls.n	8006762 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d8:	461a      	mov	r2, r3
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f04f 32ff 	mov.w	r2, #4294967295
 80067e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff f8ae 	bl	800594a <USB_EnableGlobalInt>

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	b089      	sub	sp, #36	; 0x24
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006800:	2301      	movs	r3, #1
 8006802:	2202      	movs	r2, #2
 8006804:	2102      	movs	r1, #2
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fcb8 	bl	800717c <USBH_FindInterface>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	2bff      	cmp	r3, #255	; 0xff
 8006814:	d002      	beq.n	800681c <USBH_CDC_InterfaceInit+0x24>
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d901      	bls.n	8006820 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800681c:	2302      	movs	r3, #2
 800681e:	e13d      	b.n	8006a9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc8d 	bl	8007144 <USBH_SelectInterface>
 800682a:	4603      	mov	r3, r0
 800682c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	e131      	b.n	8006a9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800683e:	2050      	movs	r0, #80	; 0x50
 8006840:	f004 fef2 	bl	800b628 <malloc>
 8006844:	4603      	mov	r3, r0
 8006846:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006858:	2302      	movs	r3, #2
 800685a:	e11f      	b.n	8006a9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800685c:	2250      	movs	r2, #80	; 0x50
 800685e:	2100      	movs	r1, #0
 8006860:	68b8      	ldr	r0, [r7, #8]
 8006862:	f004 feff 	bl	800b664 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	211a      	movs	r1, #26
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b25b      	sxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	da15      	bge.n	80068aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	211a      	movs	r1, #26
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	211a      	movs	r1, #26
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	4413      	add	r3, r2
 80068a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068a4:	881a      	ldrh	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f002 f890 	bl	80089d6 <USBH_AllocPipe>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	7819      	ldrb	r1, [r3, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	7858      	ldrb	r0, [r3, #1]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	8952      	ldrh	r2, [r2, #10]
 80068d6:	9202      	str	r2, [sp, #8]
 80068d8:	2203      	movs	r2, #3
 80068da:	9201      	str	r2, [sp, #4]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	4623      	mov	r3, r4
 80068e0:	4602      	mov	r2, r0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f002 f848 	bl	8008978 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2200      	movs	r2, #0
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f004 fde9 	bl	800b4c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068f6:	2300      	movs	r3, #0
 80068f8:	2200      	movs	r2, #0
 80068fa:	210a      	movs	r1, #10
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc3d 	bl	800717c <USBH_FindInterface>
 8006902:	4603      	mov	r3, r0
 8006904:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2bff      	cmp	r3, #255	; 0xff
 800690a:	d002      	beq.n	8006912 <USBH_CDC_InterfaceInit+0x11a>
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d901      	bls.n	8006916 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006912:	2302      	movs	r3, #2
 8006914:	e0c2      	b.n	8006a9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	211a      	movs	r1, #26
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b25b      	sxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	da16      	bge.n	800695c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	211a      	movs	r1, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	211a      	movs	r1, #26
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006954:	881a      	ldrh	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	835a      	strh	r2, [r3, #26]
 800695a:	e015      	b.n	8006988 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	211a      	movs	r1, #26
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	211a      	movs	r1, #26
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	211a      	movs	r1, #26
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b25b      	sxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	da16      	bge.n	80069ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	211a      	movs	r1, #26
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	211a      	movs	r1, #26
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	835a      	strh	r2, [r3, #26]
 80069cc:	e015      	b.n	80069fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	211a      	movs	r1, #26
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	7b9b      	ldrb	r3, [r3, #14]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 ffe8 	bl	80089d6 <USBH_AllocPipe>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	7bdb      	ldrb	r3, [r3, #15]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 ffde 	bl	80089d6 <USBH_AllocPipe>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	7b59      	ldrb	r1, [r3, #13]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	7b98      	ldrb	r0, [r3, #14]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	8b12      	ldrh	r2, [r2, #24]
 8006a3a:	9202      	str	r2, [sp, #8]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	9201      	str	r2, [sp, #4]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4623      	mov	r3, r4
 8006a44:	4602      	mov	r2, r0
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 ff96 	bl	8008978 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	7b19      	ldrb	r1, [r3, #12]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	7bd8      	ldrb	r0, [r3, #15]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	8b52      	ldrh	r2, [r2, #26]
 8006a64:	9202      	str	r2, [sp, #8]
 8006a66:	2202      	movs	r2, #2
 8006a68:	9201      	str	r2, [sp, #4]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4623      	mov	r3, r4
 8006a6e:	4602      	mov	r2, r0
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 ff81 	bl	8008978 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	7b5b      	ldrb	r3, [r3, #13]
 8006a82:	2200      	movs	r2, #0
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f004 fd1e 	bl	800b4c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	7b1b      	ldrb	r3, [r3, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f004 fd17 	bl	800b4c8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd90      	pop	{r4, r7, pc}

08006aa4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00e      	beq.n	8006adc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 ff76 	bl	80089b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 ffa1 	bl	8008a18 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	7b1b      	ldrb	r3, [r3, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00e      	beq.n	8006b02 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	7b1b      	ldrb	r3, [r3, #12]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 ff63 	bl	80089b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	7b1b      	ldrb	r3, [r3, #12]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 ff8e 	bl	8008a18 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	7b5b      	ldrb	r3, [r3, #13]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	7b5b      	ldrb	r3, [r3, #13]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 ff50 	bl	80089b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	7b5b      	ldrb	r3, [r3, #13]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 ff7b 	bl	8008a18 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f004 fd7b 	bl	800b638 <free>
    phost->pActiveClass->pData = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b48:	2200      	movs	r2, #0
 8006b4a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3340      	adds	r3, #64	; 0x40
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f8b1 	bl	8006cd6 <GetLineCoding>
 8006b74:	4603      	mov	r3, r0
 8006b76:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b84:	2102      	movs	r1, #2
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d877      	bhi.n	8006ca8 <USBH_CDC_Process+0x114>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USBH_CDC_Process+0x2c>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bd5 	.word	0x08006bd5
 8006bc4:	08006bdb 	.word	0x08006bdb
 8006bc8:	08006c0b 	.word	0x08006c0b
 8006bcc:	08006c7f 	.word	0x08006c7f
 8006bd0:	08006c8d 	.word	0x08006c8d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd8:	e06d      	b.n	8006cb6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f897 	bl	8006d14 <SetLineCoding>
 8006be6:	4603      	mov	r3, r0
 8006be8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bf8:	e058      	b.n	8006cac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d055      	beq.n	8006cac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2204      	movs	r2, #4
 8006c04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c08:	e050      	b.n	8006cac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3340      	adds	r3, #64	; 0x40
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f860 	bl	8006cd6 <GetLineCoding>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d126      	bne.n	8006c6e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c32:	791b      	ldrb	r3, [r3, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d13b      	bne.n	8006cb0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c42:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d133      	bne.n	8006cb0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c52:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d12b      	bne.n	8006cb0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c60:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d124      	bne.n	8006cb0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f982 	bl	8006f70 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c6c:	e020      	b.n	8006cb0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d01d      	beq.n	8006cb0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2204      	movs	r2, #4
 8006c78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c7c:	e018      	b.n	8006cb0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f867 	bl	8006d52 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f8f6 	bl	8006e76 <CDC_ProcessReception>
      break;
 8006c8a:	e014      	b.n	8006cb6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 f951 	bl	8007f36 <USBH_ClrFeature>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ca6:	e005      	b.n	8006cb4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ca8:	bf00      	nop
 8006caa:	e004      	b.n	8006cb6 <USBH_CDC_Process+0x122>
      break;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <USBH_CDC_Process+0x122>
      break;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <USBH_CDC_Process+0x122>
      break;
 8006cb4:	bf00      	nop

  }

  return status;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	22a1      	movs	r2, #161	; 0xa1
 8006ce4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2221      	movs	r2, #33	; 0x21
 8006cea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2207      	movs	r2, #7
 8006cfc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2207      	movs	r2, #7
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 faf6 	bl	80082f6 <USBH_CtlReq>
 8006d0a:	4603      	mov	r3, r0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2221      	movs	r2, #33	; 0x21
 8006d22:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2207      	movs	r2, #7
 8006d3a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2207      	movs	r2, #7
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fad7 	bl	80082f6 <USBH_CtlReq>
 8006d48:	4603      	mov	r3, r0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af02      	add	r7, sp, #8
 8006d58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d002      	beq.n	8006d78 <CDC_ProcessTransmission+0x26>
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d023      	beq.n	8006dbe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d76:	e07a      	b.n	8006e6e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	8b12      	ldrh	r2, [r2, #24]
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d90b      	bls.n	8006d9c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	69d9      	ldr	r1, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8b1a      	ldrh	r2, [r3, #24]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7b5b      	ldrb	r3, [r3, #13]
 8006d90:	2001      	movs	r0, #1
 8006d92:	9000      	str	r0, [sp, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fdac 	bl	80088f2 <USBH_BulkSendData>
 8006d9a:	e00b      	b.n	8006db4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	7b5b      	ldrb	r3, [r3, #13]
 8006daa:	2001      	movs	r0, #1
 8006dac:	9000      	str	r0, [sp, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fd9f 	bl	80088f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006dbc:	e057      	b.n	8006e6e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	7b5b      	ldrb	r3, [r3, #13]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f004 fb55 	bl	800b474 <USBH_LL_GetURBState>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d136      	bne.n	8006e42 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	8b12      	ldrh	r2, [r2, #24]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d90e      	bls.n	8006dfe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	8b12      	ldrh	r2, [r2, #24]
 8006de8:	1a9a      	subs	r2, r3, r2
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	8b12      	ldrh	r2, [r2, #24]
 8006df6:	441a      	add	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	61da      	str	r2, [r3, #28]
 8006dfc:	e002      	b.n	8006e04 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006e14:	e006      	b.n	8006e24 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f892 	bl	8006f48 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2204      	movs	r2, #4
 8006e28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f001 fee8 	bl	8008c10 <osMessagePut>
      break;
 8006e40:	e014      	b.n	8006e6c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d111      	bne.n	8006e6c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e64:	2200      	movs	r2, #0
 8006e66:	4619      	mov	r1, r3
 8006e68:	f001 fed2 	bl	8008c10 <osMessagePut>
      break;
 8006e6c:	bf00      	nop
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b086      	sub	sp, #24
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d002      	beq.n	8006e9c <CDC_ProcessReception+0x26>
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d00e      	beq.n	8006eb8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e9a:	e051      	b.n	8006f40 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	6a19      	ldr	r1, [r3, #32]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	8b5a      	ldrh	r2, [r3, #26]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	7b1b      	ldrb	r3, [r3, #12]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fd47 	bl	800893c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eb6:	e043      	b.n	8006f40 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	7b1b      	ldrb	r3, [r3, #12]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f004 fad8 	bl	800b474 <USBH_LL_GetURBState>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ec8:	7cfb      	ldrb	r3, [r7, #19]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d137      	bne.n	8006f3e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	7b1b      	ldrb	r3, [r3, #12]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f004 fa3b 	bl	800b350 <USBH_LL_GetLastXferSize>
 8006eda:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d016      	beq.n	8006f14 <CDC_ProcessReception+0x9e>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	8b5b      	ldrh	r3, [r3, #26]
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d910      	bls.n	8006f14 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad2      	subs	r2, r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	441a      	add	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006f12:	e006      	b.n	8006f22 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f81d 	bl	8006f5c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2204      	movs	r2, #4
 8006f26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f36:	2200      	movs	r2, #0
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f001 fe69 	bl	8008c10 <osMessagePut>
      break;
 8006f3e:	bf00      	nop
  }
}
 8006f40:	bf00      	nop
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006f84:	b5b0      	push	{r4, r5, r7, lr}
 8006f86:	b090      	sub	sp, #64	; 0x40
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e04d      	b.n	8007038 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	79fa      	ldrb	r2, [r7, #7]
 8006fa0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f847 	bl	8007048 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006fe8:	4b15      	ldr	r3, [pc, #84]	; (8007040 <USBH_Init+0xbc>)
 8006fea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fddf 	bl	8008bbe <osMessageCreate>
 8007000:	4602      	mov	r2, r0
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <USBH_Init+0xc0>)
 800700a:	f107 0414 	add.w	r4, r7, #20
 800700e:	461d      	mov	r5, r3
 8007010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007014:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800701c:	f107 0314 	add.w	r3, r7, #20
 8007020:	68f9      	ldr	r1, [r7, #12]
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fd6b 	bl	8008afe <osThreadCreate>
 8007028:	4602      	mov	r2, r0
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f004 f8d9 	bl	800b1e8 <USBH_LL_Init>

  return USBH_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3740      	adds	r7, #64	; 0x40
 800703c:	46bd      	mov	sp, r7
 800703e:	bdb0      	pop	{r4, r5, r7, pc}
 8007040:	0800b988 	.word	0x0800b988
 8007044:	0800b998 	.word	0x0800b998

08007048 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e009      	b.n	800706e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	33e0      	adds	r3, #224	; 0xe0
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	2200      	movs	r2, #0
 8007066:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b0e      	cmp	r3, #14
 8007072:	d9f2      	bls.n	800705a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e009      	b.n	800708e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d3f1      	bcc.n	800707a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2240      	movs	r2, #64	; 0x40
 80070ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d016      	beq.n	8007132 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10e      	bne.n	800712c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007114:	1c59      	adds	r1, r3, #1
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	33de      	adds	r3, #222	; 0xde
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	e004      	b.n	8007136 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800712c:	2302      	movs	r3, #2
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e001      	b.n	8007136 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007132:	2302      	movs	r3, #2
 8007134:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	429a      	cmp	r2, r3
 800715e:	d204      	bcs.n	800716a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007168:	e001      	b.n	800716e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800716a:	2302      	movs	r3, #2
 800716c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4603      	mov	r3, r0
 800718c:	70fb      	strb	r3, [r7, #3]
 800718e:	460b      	mov	r3, r1
 8007190:	70bb      	strb	r3, [r7, #2]
 8007192:	4613      	mov	r3, r2
 8007194:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071a6:	e025      	b.n	80071f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	221a      	movs	r2, #26
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	3308      	adds	r3, #8
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	3302      	adds	r3, #2
 80071b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	795b      	ldrb	r3, [r3, #5]
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d002      	beq.n	80071ca <USBH_FindInterface+0x4e>
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	2bff      	cmp	r3, #255	; 0xff
 80071c8:	d111      	bne.n	80071ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071ce:	78ba      	ldrb	r2, [r7, #2]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d002      	beq.n	80071da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071d4:	78bb      	ldrb	r3, [r7, #2]
 80071d6:	2bff      	cmp	r3, #255	; 0xff
 80071d8:	d109      	bne.n	80071ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071de:	787a      	ldrb	r2, [r7, #1]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d002      	beq.n	80071ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071e4:	787b      	ldrb	r3, [r7, #1]
 80071e6:	2bff      	cmp	r3, #255	; 0xff
 80071e8:	d101      	bne.n	80071ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	e006      	b.n	80071fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	3301      	adds	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d9d6      	bls.n	80071a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80071fa:	23ff      	movs	r3, #255	; 0xff
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f004 f825 	bl	800b260 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007216:	2101      	movs	r1, #1
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f004 f93e 	bl	800b49a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af04      	add	r7, sp, #16
 800722e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007230:	2302      	movs	r3, #2
 8007232:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d102      	bne.n	800724a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2203      	movs	r2, #3
 8007248:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b0b      	cmp	r3, #11
 8007252:	f200 823c 	bhi.w	80076ce <USBH_Process+0x4a6>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <USBH_Process+0x34>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	0800728d 	.word	0x0800728d
 8007260:	080072db 	.word	0x080072db
 8007264:	0800735f 	.word	0x0800735f
 8007268:	0800764d 	.word	0x0800764d
 800726c:	080076cf 	.word	0x080076cf
 8007270:	0800741f 	.word	0x0800741f
 8007274:	080075d7 	.word	0x080075d7
 8007278:	08007471 	.word	0x08007471
 800727c:	080074ad 	.word	0x080074ad
 8007280:	080074e7 	.word	0x080074e7
 8007284:	0800752f 	.word	0x0800752f
 8007288:	08007635 	.word	0x08007635
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 821c 	beq.w	80076d2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072a0:	20c8      	movs	r0, #200	; 0xc8
 80072a2:	f004 f941 	bl	800b528 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f004 f837 	bl	800b31a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80072d0:	2200      	movs	r2, #0
 80072d2:	4619      	mov	r1, r3
 80072d4:	f001 fc9c 	bl	8008c10 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072d8:	e1fb      	b.n	80076d2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d107      	bne.n	80072f4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e025      	b.n	8007340 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fe:	d914      	bls.n	800732a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007306:	3301      	adds	r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007316:	2b03      	cmp	r3, #3
 8007318:	d903      	bls.n	8007322 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	220d      	movs	r2, #13
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e00e      	b.n	8007340 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e00a      	b.n	8007340 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007330:	f103 020a 	add.w	r2, r3, #10
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800733a:	200a      	movs	r0, #10
 800733c:	f004 f8f4 	bl	800b528 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007354:	2200      	movs	r2, #0
 8007356:	4619      	mov	r1, r3
 8007358:	f001 fc5a 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800735c:	e1c0      	b.n	80076e0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800736e:	2104      	movs	r1, #4
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007374:	2064      	movs	r0, #100	; 0x64
 8007376:	f004 f8d7 	bl	800b528 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f003 ffa6 	bl	800b2cc <USBH_LL_GetSpeed>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2205      	movs	r2, #5
 800738e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007390:	2100      	movs	r1, #0
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fb1f 	bl	80089d6 <USBH_AllocPipe>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fb17 	bl	80089d6 <USBH_AllocPipe>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	7919      	ldrb	r1, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073c4:	b292      	uxth	r2, r2
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	9201      	str	r2, [sp, #4]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	4603      	mov	r3, r0
 80073d0:	2280      	movs	r2, #128	; 0x80
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fad0 	bl	8008978 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	7959      	ldrb	r1, [r3, #5]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073ec:	b292      	uxth	r2, r2
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	9201      	str	r2, [sp, #4]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4603      	mov	r3, r0
 80073f8:	2200      	movs	r2, #0
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fabc 	bl	8008978 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007414:	2200      	movs	r2, #0
 8007416:	4619      	mov	r1, r3
 8007418:	f001 fbfa 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800741c:	e160      	b.n	80076e0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f964 	bl	80076ec <USBH_HandleEnum>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	f040 8152 	bne.w	80076d6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007440:	2b01      	cmp	r3, #1
 8007442:	d103      	bne.n	800744c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2208      	movs	r2, #8
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e002      	b.n	8007452 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2207      	movs	r2, #7
 8007450:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2205      	movs	r2, #5
 8007456:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007466:	2200      	movs	r2, #0
 8007468:	4619      	mov	r1, r3
 800746a:	f001 fbd1 	bl	8008c10 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800746e:	e132      	b.n	80076d6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 812f 	beq.w	80076da <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2208      	movs	r2, #8
 800748c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2205      	movs	r2, #5
 8007492:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074a2:	2200      	movs	r2, #0
 80074a4:	4619      	mov	r1, r3
 80074a6:	f001 fbb3 	bl	8008c10 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80074aa:	e116      	b.n	80076da <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fcf6 	bl	8007ea8 <USBH_SetCfg>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2209      	movs	r2, #9
 80074c6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80074dc:	2200      	movs	r2, #0
 80074de:	4619      	mov	r1, r3
 80074e0:	f001 fb96 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074e4:	e0fc      	b.n	80076e0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80074f4:	2101      	movs	r1, #1
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fcf9 	bl	8007eee <USBH_SetFeature>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	220a      	movs	r2, #10
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e002      	b.n	8007510 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220a      	movs	r2, #10
 800750e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007524:	2200      	movs	r2, #0
 8007526:	4619      	mov	r1, r3
 8007528:	f001 fb72 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800752c:	e0d8      	b.n	80076e0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007534:	2b00      	cmp	r3, #0
 8007536:	d03f      	beq.n	80075b8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e016      	b.n	8007574 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007546:	7bfa      	ldrb	r2, [r7, #15]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	32de      	adds	r2, #222	; 0xde
 800754c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007550:	791a      	ldrb	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007558:	429a      	cmp	r2, r3
 800755a:	d108      	bne.n	800756e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800755c:	7bfa      	ldrb	r2, [r7, #15]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32de      	adds	r2, #222	; 0xde
 8007562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800756c:	e005      	b.n	800757a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	3301      	adds	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0e5      	beq.n	8007546 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d016      	beq.n	80075b2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2206      	movs	r2, #6
 800759a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a2:	2103      	movs	r1, #3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
 80075a8:	e006      	b.n	80075b8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220d      	movs	r2, #13
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e002      	b.n	80075b8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	220d      	movs	r2, #13
 80075b6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2205      	movs	r2, #5
 80075bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80075cc:	2200      	movs	r2, #0
 80075ce:	4619      	mov	r1, r3
 80075d0:	f001 fb1e 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075d4:	e084      	b.n	80076e0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d017      	beq.n	8007610 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d103      	bne.n	8007600 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	220b      	movs	r2, #11
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	e00a      	b.n	8007616 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d106      	bne.n	8007616 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	220d      	movs	r2, #13
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	220d      	movs	r2, #13
 8007614:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2205      	movs	r2, #5
 800761a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800762a:	2200      	movs	r2, #0
 800762c:	4619      	mov	r1, r3
 800762e:	f001 faef 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007632:	e055      	b.n	80076e0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04f      	beq.n	80076de <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
      }
      break;
 800764a:	e048      	b.n	80076de <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fcf7 	bl	8007048 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007688:	2105      	movs	r1, #5
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	d107      	bne.n	80076aa <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff fdb0 	bl	8007208 <USBH_Start>
 80076a8:	e002      	b.n	80076b0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f003 fdd8 	bl	800b260 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80076c4:	2200      	movs	r2, #0
 80076c6:	4619      	mov	r1, r3
 80076c8:	f001 faa2 	bl	8008c10 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076cc:	e008      	b.n	80076e0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80076ce:	bf00      	nop
 80076d0:	e006      	b.n	80076e0 <USBH_Process+0x4b8>
      break;
 80076d2:	bf00      	nop
 80076d4:	e004      	b.n	80076e0 <USBH_Process+0x4b8>
      break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <USBH_Process+0x4b8>
    break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <USBH_Process+0x4b8>
      break;
 80076de:	bf00      	nop
  }
  return USBH_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b07      	cmp	r3, #7
 8007702:	f200 8208 	bhi.w	8007b16 <USBH_HandleEnum+0x42a>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <USBH_HandleEnum+0x20>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	0800772d 	.word	0x0800772d
 8007710:	080077eb 	.word	0x080077eb
 8007714:	08007855 	.word	0x08007855
 8007718:	080078e3 	.word	0x080078e3
 800771c:	0800794d 	.word	0x0800794d
 8007720:	080079bd 	.word	0x080079bd
 8007724:	08007a59 	.word	0x08007a59
 8007728:	08007ad7 	.word	0x08007ad7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800772c:	2108      	movs	r1, #8
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 faea 	bl	8007d08 <USBH_Get_DevDesc>
 8007734:	4603      	mov	r3, r0
 8007736:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d130      	bne.n	80077a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7919      	ldrb	r1, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007762:	b292      	uxth	r2, r2
 8007764:	9202      	str	r2, [sp, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	9201      	str	r2, [sp, #4]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4603      	mov	r3, r0
 800776e:	2280      	movs	r2, #128	; 0x80
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f901 	bl	8008978 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7959      	ldrb	r1, [r3, #5]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800778a:	b292      	uxth	r2, r2
 800778c:	9202      	str	r2, [sp, #8]
 800778e:	2200      	movs	r2, #0
 8007790:	9201      	str	r2, [sp, #4]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	4603      	mov	r3, r0
 8007796:	2200      	movs	r2, #0
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 f8ed 	bl	8008978 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800779e:	e1bc      	b.n	8007b1a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	f040 81b9 	bne.w	8007b1a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d903      	bls.n	80077ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220d      	movs	r2, #13
 80077c6:	701a      	strb	r2, [r3, #0]
      break;
 80077c8:	e1a7      	b.n	8007b1a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f921 	bl	8008a18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f91b 	bl	8008a18 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
      break;
 80077e8:	e197      	b.n	8007b1a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077ea:	2112      	movs	r1, #18
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa8b 	bl	8007d08 <USBH_Get_DevDesc>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007802:	e18c      	b.n	8007b1e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	2b03      	cmp	r3, #3
 8007808:	f040 8189 	bne.w	8007b1e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007812:	3301      	adds	r3, #1
 8007814:	b2da      	uxtb	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007822:	2b03      	cmp	r3, #3
 8007824:	d903      	bls.n	800782e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	220d      	movs	r2, #13
 800782a:	701a      	strb	r2, [r3, #0]
      break;
 800782c:	e177      	b.n	8007b1e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	795b      	ldrb	r3, [r3, #5]
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f8ef 	bl	8008a18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	791b      	ldrb	r3, [r3, #4]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 f8e9 	bl	8008a18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e164      	b.n	8007b1e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007854:	2101      	movs	r1, #1
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fb02 	bl	8007e60 <USBH_SetAddress>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d132      	bne.n	80078cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007866:	2002      	movs	r0, #2
 8007868:	f003 fe5e 	bl	800b528 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2203      	movs	r2, #3
 8007878:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7919      	ldrb	r1, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800788e:	b292      	uxth	r2, r2
 8007890:	9202      	str	r2, [sp, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	9201      	str	r2, [sp, #4]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4603      	mov	r3, r0
 800789a:	2280      	movs	r2, #128	; 0x80
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f86b 	bl	8008978 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7959      	ldrb	r1, [r3, #5]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078b6:	b292      	uxth	r2, r2
 80078b8:	9202      	str	r2, [sp, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	9201      	str	r2, [sp, #4]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4603      	mov	r3, r0
 80078c2:	2200      	movs	r2, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 f857 	bl	8008978 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078ca:	e12a      	b.n	8007b22 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	f040 8127 	bne.w	8007b22 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220d      	movs	r2, #13
 80078d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	705a      	strb	r2, [r3, #1]
      break;
 80078e0:	e11f      	b.n	8007b22 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078e2:	2109      	movs	r1, #9
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa37 	bl	8007d58 <USBH_Get_CfgDesc>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2204      	movs	r2, #4
 80078f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078fa:	e114      	b.n	8007b26 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	f040 8111 	bne.w	8007b26 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800790a:	3301      	adds	r3, #1
 800790c:	b2da      	uxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800791a:	2b03      	cmp	r3, #3
 800791c:	d903      	bls.n	8007926 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220d      	movs	r2, #13
 8007922:	701a      	strb	r2, [r3, #0]
      break;
 8007924:	e0ff      	b.n	8007b26 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	795b      	ldrb	r3, [r3, #5]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 f873 	bl	8008a18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f86d 	bl	8008a18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e0ec      	b.n	8007b26 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9ff 	bl	8007d58 <USBH_Get_CfgDesc>
 800795a:	4603      	mov	r3, r0
 800795c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d103      	bne.n	800796c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2205      	movs	r2, #5
 8007968:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800796a:	e0de      	b.n	8007b2a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b03      	cmp	r3, #3
 8007970:	f040 80db 	bne.w	8007b2a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800797a:	3301      	adds	r3, #1
 800797c:	b2da      	uxtb	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800798a:	2b03      	cmp	r3, #3
 800798c:	d903      	bls.n	8007996 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	220d      	movs	r2, #13
 8007992:	701a      	strb	r2, [r3, #0]
      break;
 8007994:	e0c9      	b.n	8007b2a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	795b      	ldrb	r3, [r3, #5]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 f83b 	bl	8008a18 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f835 	bl	8008a18 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
      break;
 80079ba:	e0b6      	b.n	8007b2a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d036      	beq.n	8007a34 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079d2:	23ff      	movs	r3, #255	; 0xff
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9e3 	bl	8007da0 <USBH_Get_StringDesc>
 80079da:	4603      	mov	r3, r0
 80079dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d111      	bne.n	8007a08 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2206      	movs	r2, #6
 80079e8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2205      	movs	r2, #5
 80079ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079fe:	2200      	movs	r2, #0
 8007a00:	4619      	mov	r1, r3
 8007a02:	f001 f905 	bl	8008c10 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a06:	e092      	b.n	8007b2e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	f040 808f 	bne.w	8007b2e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2206      	movs	r2, #6
 8007a14:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2205      	movs	r2, #5
 8007a1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f001 f8ef 	bl	8008c10 <osMessagePut>
      break;
 8007a32:	e07c      	b.n	8007b2e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2206      	movs	r2, #6
 8007a38:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4619      	mov	r1, r3
 8007a52:	f001 f8dd 	bl	8008c10 <osMessagePut>
      break;
 8007a56:	e06a      	b.n	8007b2e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d027      	beq.n	8007ab2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a6e:	23ff      	movs	r3, #255	; 0xff
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f995 	bl	8007da0 <USBH_Get_StringDesc>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d103      	bne.n	8007a88 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2207      	movs	r2, #7
 8007a84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a86:	e054      	b.n	8007b32 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d151      	bne.n	8007b32 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2207      	movs	r2, #7
 8007a92:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2205      	movs	r2, #5
 8007a98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f001 f8b0 	bl	8008c10 <osMessagePut>
      break;
 8007ab0:	e03f      	b.n	8007b32 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2205      	movs	r2, #5
 8007abc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007acc:	2200      	movs	r2, #0
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f001 f89e 	bl	8008c10 <osMessagePut>
      break;
 8007ad4:	e02d      	b.n	8007b32 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d017      	beq.n	8007b10 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007aec:	23ff      	movs	r3, #255	; 0xff
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f956 	bl	8007da0 <USBH_Get_StringDesc>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b02:	e018      	b.n	8007b36 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d115      	bne.n	8007b36 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0e:	e012      	b.n	8007b36 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73fb      	strb	r3, [r7, #15]
      break;
 8007b14:	e00f      	b.n	8007b36 <USBH_HandleEnum+0x44a>

    default:
      break;
 8007b16:	bf00      	nop
 8007b18:	e00e      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e00c      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e00a      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b22:	bf00      	nop
 8007b24:	e008      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b26:	bf00      	nop
 8007b28:	e006      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e004      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b2e:	bf00      	nop
 8007b30:	e002      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b32:	bf00      	nop
 8007b34:	e000      	b.n	8007b38 <USBH_HandleEnum+0x44c>
      break;
 8007b36:	bf00      	nop
  }
  return Status;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop

08007b44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f804 	bl	8007b86 <USBH_HandleSof>
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b0b      	cmp	r3, #11
 8007b96:	d10a      	bne.n	8007bae <USBH_HandleSof+0x28>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	4798      	blx	r3
  }
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f001 f817 	bl	8008c10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007be2:	bf00      	nop
}
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007bfa:	bf00      	nop
}
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f000 ffe7 	bl	8008c10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f003 fb12 	bl	800b296 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fecd 	bl	8008a18 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	795b      	ldrb	r3, [r3, #5]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fec7 	bl	8008a18 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	f000 ffb5 	bl	8008c10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007cbe:	f107 030c 	add.w	r3, r7, #12
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 ffe2 	bl	8008c90 <osMessageGet>
    if (event.status == osEventMessage)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d1f2      	bne.n	8007cb8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff faa8 	bl	8007228 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007cd8:	e7ee      	b.n	8007cb8 <USBH_Process_OS+0x8>

08007cda <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f000 ff89 	bl	8008c10 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f864 	bl	8007df6 <USBH_GetDescriptor>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	b292      	uxth	r2, r2
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f000 f918 	bl	8007f7e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	331c      	adds	r3, #28
 8007d68:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d6a:	887b      	ldrh	r3, [r7, #2]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d74:	2100      	movs	r1, #0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f83d 	bl	8007df6 <USBH_GetDescriptor>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	72fb      	strb	r3, [r7, #11]
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d8c:	887a      	ldrh	r2, [r7, #2]
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f964 	bl	800805e <USBH_ParseCfgDesc>
  }

  return status;
 8007d96:	7afb      	ldrb	r3, [r7, #11]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	461a      	mov	r2, r3
 8007dac:	460b      	mov	r3, r1
 8007dae:	72fb      	strb	r3, [r7, #11]
 8007db0:	4613      	mov	r3, r2
 8007db2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007dbc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007dc4:	893b      	ldrh	r3, [r7, #8]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	2100      	movs	r1, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f812 	bl	8007df6 <USBH_GetDescriptor>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007de2:	893a      	ldrh	r2, [r7, #8]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fa37 	bl	800825a <USBH_ParseStringDesc>
  }

  return status;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	607b      	str	r3, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	72fb      	strb	r3, [r7, #11]
 8007e04:	4613      	mov	r3, r2
 8007e06:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	789b      	ldrb	r3, [r3, #2]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d11c      	bne.n	8007e4a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2206      	movs	r2, #6
 8007e20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	893a      	ldrh	r2, [r7, #8]
 8007e26:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e28:	893b      	ldrh	r3, [r7, #8]
 8007e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e32:	d104      	bne.n	8007e3e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f240 4209 	movw	r2, #1033	; 0x409
 8007e3a:	829a      	strh	r2, [r3, #20]
 8007e3c:	e002      	b.n	8007e44 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8b3a      	ldrh	r2, [r7, #24]
 8007e48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e4a:	8b3b      	ldrh	r3, [r7, #24]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fa50 	bl	80082f6 <USBH_CtlReq>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	789b      	ldrb	r3, [r3, #2]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d10f      	bne.n	8007e94 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa2c 	bl	80082f6 <USBH_CtlReq>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10e      	bne.n	8007eda <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2209      	movs	r2, #9
 8007ec6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	887a      	ldrh	r2, [r7, #2]
 8007ecc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007eda:	2200      	movs	r2, #0
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa09 	bl	80082f6 <USBH_CtlReq>
 8007ee4:	4603      	mov	r3, r0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	789b      	ldrb	r3, [r3, #2]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10f      	bne.n	8007f22 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9e5 	bl	80082f6 <USBH_CtlReq>
 8007f2c:	4603      	mov	r3, r0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	789b      	ldrb	r3, [r3, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10f      	bne.n	8007f6a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9c1 	bl	80082f6 <USBH_CtlReq>
 8007f74:	4603      	mov	r3, r0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	781a      	ldrb	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	785a      	ldrb	r2, [r3, #1]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	3303      	adds	r3, #3
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	791a      	ldrb	r2, [r3, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	795a      	ldrb	r2, [r3, #5]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	799a      	ldrb	r2, [r3, #6]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	79da      	ldrb	r2, [r3, #7]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d939      	bls.n	8008052 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	3309      	adds	r3, #9
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	330a      	adds	r3, #10
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b29a      	uxth	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	330b      	adds	r3, #11
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	4313      	orrs	r3, r2
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	330c      	adds	r3, #12
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	b29a      	uxth	r2, r3
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	330d      	adds	r3, #13
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	b29b      	uxth	r3, r3
 800802a:	4313      	orrs	r3, r2
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	7b9a      	ldrb	r2, [r3, #14]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	7bda      	ldrb	r2, [r3, #15]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	7c1a      	ldrb	r2, [r3, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7c5a      	ldrb	r2, [r3, #17]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	745a      	strb	r2, [r3, #17]
  }
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b08a      	sub	sp, #40	; 0x28
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	4613      	mov	r3, r2
 800806a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	781a      	ldrb	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	785a      	ldrb	r2, [r3, #1]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3302      	adds	r3, #2
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	b29a      	uxth	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	3303      	adds	r3, #3
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	021b      	lsls	r3, r3, #8
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4313      	orrs	r3, r2
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	791a      	ldrb	r2, [r3, #4]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	795a      	ldrb	r2, [r3, #5]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	799a      	ldrb	r2, [r3, #6]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	79da      	ldrb	r2, [r3, #7]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	7a1a      	ldrb	r2, [r3, #8]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d95f      	bls.n	800819a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80080da:	2309      	movs	r3, #9
 80080dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080e2:	e051      	b.n	8008188 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080e4:	f107 0316 	add.w	r3, r7, #22
 80080e8:	4619      	mov	r1, r3
 80080ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080ec:	f000 f8e8 	bl	80082c0 <USBH_GetNextDesc>
 80080f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d146      	bne.n	8008188 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80080fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080fe:	221a      	movs	r2, #26
 8008100:	fb02 f303 	mul.w	r3, r2, r3
 8008104:	3308      	adds	r3, #8
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4413      	add	r3, r2
 800810a:	3302      	adds	r3, #2
 800810c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800810e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008110:	69f8      	ldr	r0, [r7, #28]
 8008112:	f000 f846 	bl	80081a2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800811c:	2300      	movs	r3, #0
 800811e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008120:	e022      	b.n	8008168 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008122:	f107 0316 	add.w	r3, r7, #22
 8008126:	4619      	mov	r1, r3
 8008128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800812a:	f000 f8c9 	bl	80082c0 <USBH_GetNextDesc>
 800812e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	785b      	ldrb	r3, [r3, #1]
 8008134:	2b05      	cmp	r3, #5
 8008136:	d117      	bne.n	8008168 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800813c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008140:	3201      	adds	r2, #1
 8008142:	00d2      	lsls	r2, r2, #3
 8008144:	211a      	movs	r1, #26
 8008146:	fb01 f303 	mul.w	r3, r1, r3
 800814a:	4413      	add	r3, r2
 800814c:	3308      	adds	r3, #8
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	3304      	adds	r3, #4
 8008154:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008158:	69b8      	ldr	r0, [r7, #24]
 800815a:	f000 f851 	bl	8008200 <USBH_ParseEPDesc>
            ep_ix++;
 800815e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008162:	3301      	adds	r3, #1
 8008164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	791b      	ldrb	r3, [r3, #4]
 800816c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008170:	429a      	cmp	r2, r3
 8008172:	d204      	bcs.n	800817e <USBH_ParseCfgDesc+0x120>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	885a      	ldrh	r2, [r3, #2]
 8008178:	8afb      	ldrh	r3, [r7, #22]
 800817a:	429a      	cmp	r2, r3
 800817c:	d8d1      	bhi.n	8008122 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800817e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008182:	3301      	adds	r3, #1
 8008184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800818c:	2b01      	cmp	r3, #1
 800818e:	d804      	bhi.n	800819a <USBH_ParseCfgDesc+0x13c>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	885a      	ldrh	r2, [r3, #2]
 8008194:	8afb      	ldrh	r3, [r7, #22]
 8008196:	429a      	cmp	r2, r3
 8008198:	d8a4      	bhi.n	80080e4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800819a:	bf00      	nop
 800819c:	3728      	adds	r7, #40	; 0x28
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	785a      	ldrb	r2, [r3, #1]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	789a      	ldrb	r2, [r3, #2]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	78da      	ldrb	r2, [r3, #3]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	791a      	ldrb	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	795a      	ldrb	r2, [r3, #5]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	799a      	ldrb	r2, [r3, #6]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	79da      	ldrb	r2, [r3, #7]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	7a1a      	ldrb	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	721a      	strb	r2, [r3, #8]
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	785a      	ldrb	r2, [r3, #1]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	789a      	ldrb	r2, [r3, #2]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	78da      	ldrb	r2, [r3, #3]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	3304      	adds	r3, #4
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	b29a      	uxth	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	3305      	adds	r3, #5
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	b29b      	uxth	r3, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	799a      	ldrb	r2, [r3, #6]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	719a      	strb	r2, [r3, #6]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800825a:	b480      	push	{r7}
 800825c:	b087      	sub	sp, #28
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	4613      	mov	r3, r2
 8008266:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b03      	cmp	r3, #3
 8008270:	d120      	bne.n	80082b4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	1e9a      	subs	r2, r3, #2
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	4293      	cmp	r3, r2
 800827c:	bf28      	it	cs
 800827e:	4613      	movcs	r3, r2
 8008280:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3302      	adds	r3, #2
 8008286:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008288:	2300      	movs	r3, #0
 800828a:	82fb      	strh	r3, [r7, #22]
 800828c:	e00b      	b.n	80082a6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800828e:	8afb      	ldrh	r3, [r7, #22]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	701a      	strb	r2, [r3, #0]
      pdest++;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	3301      	adds	r3, #1
 800829e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80082a0:	8afb      	ldrh	r3, [r7, #22]
 80082a2:	3302      	adds	r3, #2
 80082a4:	82fb      	strh	r3, [r7, #22]
 80082a6:	8afa      	ldrh	r2, [r7, #22]
 80082a8:	8abb      	ldrh	r3, [r7, #20]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d3ef      	bcc.n	800828e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
  }
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	881a      	ldrh	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4413      	add	r3, r2
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4413      	add	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082e8:	68fb      	ldr	r3, [r7, #12]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	4613      	mov	r3, r2
 8008302:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	789b      	ldrb	r3, [r3, #2]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d002      	beq.n	8008316 <USBH_CtlReq+0x20>
 8008310:	2b02      	cmp	r3, #2
 8008312:	d01d      	beq.n	8008350 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008314:	e043      	b.n	800839e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2202      	movs	r2, #2
 800832c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800832e:	2301      	movs	r3, #1
 8008330:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2203      	movs	r2, #3
 8008336:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008346:	2200      	movs	r2, #0
 8008348:	4619      	mov	r1, r3
 800834a:	f000 fc61 	bl	8008c10 <osMessagePut>
      break;
 800834e:	e026      	b.n	800839e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f829 	bl	80083a8 <USBH_HandleControl>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <USBH_CtlReq+0x70>
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b03      	cmp	r3, #3
 8008364:	d106      	bne.n	8008374 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	761a      	strb	r2, [r3, #24]
 8008372:	e005      	b.n	8008380 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d102      	bne.n	8008380 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2203      	movs	r2, #3
 8008384:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008394:	2200      	movs	r2, #0
 8008396:	4619      	mov	r1, r3
 8008398:	f000 fc3a 	bl	8008c10 <osMessagePut>
      break;
 800839c:	bf00      	nop
  }
  return status;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	7e1b      	ldrb	r3, [r3, #24]
 80083bc:	3b01      	subs	r3, #1
 80083be:	2b0a      	cmp	r3, #10
 80083c0:	f200 8229 	bhi.w	8008816 <USBH_HandleControl+0x46e>
 80083c4:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <USBH_HandleControl+0x24>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	08008413 	.word	0x08008413
 80083d4:	080084b5 	.word	0x080084b5
 80083d8:	080084db 	.word	0x080084db
 80083dc:	08008567 	.word	0x08008567
 80083e0:	08008591 	.word	0x08008591
 80083e4:	08008653 	.word	0x08008653
 80083e8:	08008675 	.word	0x08008675
 80083ec:	08008707 	.word	0x08008707
 80083f0:	0800872d 	.word	0x0800872d
 80083f4:	080087bf 	.word	0x080087bf
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f103 0110 	add.w	r1, r3, #16
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	795b      	ldrb	r3, [r3, #5]
 8008402:	461a      	mov	r2, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa17 	bl	8008838 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	761a      	strb	r2, [r3, #24]
      break;
 8008410:	e20c      	b.n	800882c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	795b      	ldrb	r3, [r3, #5]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f003 f82b 	bl	800b474 <USBH_LL_GetURBState>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d12c      	bne.n	8008482 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7c1b      	ldrb	r3, [r3, #16]
 800842c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008430:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8adb      	ldrh	r3, [r3, #22]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800843a:	7b7b      	ldrb	r3, [r7, #13]
 800843c:	2b80      	cmp	r3, #128	; 0x80
 800843e:	d103      	bne.n	8008448 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2203      	movs	r2, #3
 8008444:	761a      	strb	r2, [r3, #24]
 8008446:	e00d      	b.n	8008464 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2205      	movs	r2, #5
 800844c:	761a      	strb	r2, [r3, #24]
 800844e:	e009      	b.n	8008464 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008450:	7b7b      	ldrb	r3, [r7, #13]
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d103      	bne.n	800845e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2209      	movs	r2, #9
 800845a:	761a      	strb	r2, [r3, #24]
 800845c:	e002      	b.n	8008464 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2207      	movs	r2, #7
 8008462:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2203      	movs	r2, #3
 8008468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008478:	2200      	movs	r2, #0
 800847a:	4619      	mov	r1, r3
 800847c:	f000 fbc8 	bl	8008c10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008480:	e1cb      	b.n	800881a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b04      	cmp	r3, #4
 8008486:	d003      	beq.n	8008490 <USBH_HandleControl+0xe8>
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b02      	cmp	r3, #2
 800848c:	f040 81c5 	bne.w	800881a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	220b      	movs	r2, #11
 8008494:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2203      	movs	r2, #3
 800849a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084aa:	2200      	movs	r2, #0
 80084ac:	4619      	mov	r1, r3
 80084ae:	f000 fbaf 	bl	8008c10 <osMessagePut>
      break;
 80084b2:	e1b2      	b.n	800881a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6899      	ldr	r1, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	899a      	ldrh	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	791b      	ldrb	r3, [r3, #4]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9f2 	bl	80088b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2204      	movs	r2, #4
 80084d6:	761a      	strb	r2, [r3, #24]
      break;
 80084d8:	e1a8      	b.n	800882c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f002 ffc7 	bl	800b474 <USBH_LL_GetURBState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d110      	bne.n	8008512 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2209      	movs	r2, #9
 80084f4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2203      	movs	r2, #3
 80084fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800850a:	2200      	movs	r2, #0
 800850c:	4619      	mov	r1, r3
 800850e:	f000 fb7f 	bl	8008c10 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b05      	cmp	r3, #5
 8008516:	d110      	bne.n	800853a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008518:	2303      	movs	r3, #3
 800851a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2203      	movs	r2, #3
 8008520:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008530:	2200      	movs	r2, #0
 8008532:	4619      	mov	r1, r3
 8008534:	f000 fb6c 	bl	8008c10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008538:	e171      	b.n	800881e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b04      	cmp	r3, #4
 800853e:	f040 816e 	bne.w	800881e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	220b      	movs	r2, #11
 8008546:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2203      	movs	r2, #3
 800854c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800855c:	2200      	movs	r2, #0
 800855e:	4619      	mov	r1, r3
 8008560:	f000 fb56 	bl	8008c10 <osMessagePut>
      break;
 8008564:	e15b      	b.n	800881e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6899      	ldr	r1, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	899a      	ldrh	r2, [r3, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	795b      	ldrb	r3, [r3, #5]
 8008572:	2001      	movs	r0, #1
 8008574:	9000      	str	r0, [sp, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f978 	bl	800886c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2206      	movs	r2, #6
 800858c:	761a      	strb	r2, [r3, #24]
      break;
 800858e:	e14d      	b.n	800882c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	795b      	ldrb	r3, [r3, #5]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f002 ff6c 	bl	800b474 <USBH_LL_GetURBState>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d111      	bne.n	80085ca <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2207      	movs	r2, #7
 80085aa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2203      	movs	r2, #3
 80085b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085c0:	2200      	movs	r2, #0
 80085c2:	4619      	mov	r1, r3
 80085c4:	f000 fb24 	bl	8008c10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085c8:	e12b      	b.n	8008822 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d113      	bne.n	80085f8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	220c      	movs	r2, #12
 80085d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80085d6:	2303      	movs	r3, #3
 80085d8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2203      	movs	r2, #3
 80085de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085ee:	2200      	movs	r2, #0
 80085f0:	4619      	mov	r1, r3
 80085f2:	f000 fb0d 	bl	8008c10 <osMessagePut>
      break;
 80085f6:	e114      	b.n	8008822 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d111      	bne.n	8008622 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2205      	movs	r2, #5
 8008602:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2203      	movs	r2, #3
 8008608:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008618:	2200      	movs	r2, #0
 800861a:	4619      	mov	r1, r3
 800861c:	f000 faf8 	bl	8008c10 <osMessagePut>
      break;
 8008620:	e0ff      	b.n	8008822 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b04      	cmp	r3, #4
 8008626:	f040 80fc 	bne.w	8008822 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	220b      	movs	r2, #11
 800862e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008630:	2302      	movs	r3, #2
 8008632:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2203      	movs	r2, #3
 8008638:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008648:	2200      	movs	r2, #0
 800864a:	4619      	mov	r1, r3
 800864c:	f000 fae0 	bl	8008c10 <osMessagePut>
      break;
 8008650:	e0e7      	b.n	8008822 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	791b      	ldrb	r3, [r3, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f92b 	bl	80088b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2208      	movs	r2, #8
 8008670:	761a      	strb	r2, [r3, #24]

      break;
 8008672:	e0db      	b.n	800882c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	791b      	ldrb	r3, [r3, #4]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f002 fefa 	bl	800b474 <USBH_LL_GetURBState>
 8008680:	4603      	mov	r3, r0
 8008682:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d113      	bne.n	80086b2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	220d      	movs	r2, #13
 800868e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2203      	movs	r2, #3
 8008698:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086a8:	2200      	movs	r2, #0
 80086aa:	4619      	mov	r1, r3
 80086ac:	f000 fab0 	bl	8008c10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086b0:	e0b9      	b.n	8008826 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d111      	bne.n	80086dc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	220b      	movs	r2, #11
 80086bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2203      	movs	r2, #3
 80086c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086d2:	2200      	movs	r2, #0
 80086d4:	4619      	mov	r1, r3
 80086d6:	f000 fa9b 	bl	8008c10 <osMessagePut>
      break;
 80086da:	e0a4      	b.n	8008826 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b05      	cmp	r3, #5
 80086e0:	f040 80a1 	bne.w	8008826 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2203      	movs	r2, #3
 80086ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086fc:	2200      	movs	r2, #0
 80086fe:	4619      	mov	r1, r3
 8008700:	f000 fa86 	bl	8008c10 <osMessagePut>
      break;
 8008704:	e08f      	b.n	8008826 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	795b      	ldrb	r3, [r3, #5]
 800870a:	2201      	movs	r2, #1
 800870c:	9200      	str	r2, [sp, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	2100      	movs	r1, #0
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8aa 	bl	800886c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	220a      	movs	r2, #10
 8008728:	761a      	strb	r2, [r3, #24]
      break;
 800872a:	e07f      	b.n	800882c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	795b      	ldrb	r3, [r3, #5]
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f002 fe9e 	bl	800b474 <USBH_LL_GetURBState>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d113      	bne.n	800876a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	220d      	movs	r2, #13
 800874a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2203      	movs	r2, #3
 8008750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008760:	2200      	movs	r2, #0
 8008762:	4619      	mov	r1, r3
 8008764:	f000 fa54 	bl	8008c10 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008768:	e05f      	b.n	800882a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d111      	bne.n	8008794 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2209      	movs	r2, #9
 8008774:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2203      	movs	r2, #3
 800877a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800878a:	2200      	movs	r2, #0
 800878c:	4619      	mov	r1, r3
 800878e:	f000 fa3f 	bl	8008c10 <osMessagePut>
      break;
 8008792:	e04a      	b.n	800882a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d147      	bne.n	800882a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	220b      	movs	r2, #11
 800879e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2203      	movs	r2, #3
 80087a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80087b4:	2200      	movs	r2, #0
 80087b6:	4619      	mov	r1, r3
 80087b8:	f000 fa2a 	bl	8008c10 <osMessagePut>
      break;
 80087bc:	e035      	b.n	800882a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	7e5b      	ldrb	r3, [r3, #25]
 80087c2:	3301      	adds	r3, #1
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	765a      	strb	r2, [r3, #25]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7e5b      	ldrb	r3, [r3, #25]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d806      	bhi.n	80087e0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087de:	e025      	b.n	800882c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087e6:	2106      	movs	r1, #6
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	795b      	ldrb	r3, [r3, #5]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f90d 	bl	8008a18 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	791b      	ldrb	r3, [r3, #4]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f907 	bl	8008a18 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008810:	2302      	movs	r3, #2
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	e00a      	b.n	800882c <USBH_HandleControl+0x484>

    default:
      break;
 8008816:	bf00      	nop
 8008818:	e008      	b.n	800882c <USBH_HandleControl+0x484>
      break;
 800881a:	bf00      	nop
 800881c:	e006      	b.n	800882c <USBH_HandleControl+0x484>
      break;
 800881e:	bf00      	nop
 8008820:	e004      	b.n	800882c <USBH_HandleControl+0x484>
      break;
 8008822:	bf00      	nop
 8008824:	e002      	b.n	800882c <USBH_HandleControl+0x484>
      break;
 8008826:	bf00      	nop
 8008828:	e000      	b.n	800882c <USBH_HandleControl+0x484>
      break;
 800882a:	bf00      	nop
  }

  return status;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop

08008838 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b088      	sub	sp, #32
 800883c:	af04      	add	r7, sp, #16
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008846:	79f9      	ldrb	r1, [r7, #7]
 8008848:	2300      	movs	r3, #0
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	2308      	movs	r3, #8
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	2300      	movs	r3, #0
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f002 fdd8 	bl	800b412 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af04      	add	r7, sp, #16
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	4611      	mov	r1, r2
 8008878:	461a      	mov	r2, r3
 800887a:	460b      	mov	r3, r1
 800887c:	80fb      	strh	r3, [r7, #6]
 800887e:	4613      	mov	r3, r2
 8008880:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008890:	7979      	ldrb	r1, [r7, #5]
 8008892:	7e3b      	ldrb	r3, [r7, #24]
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	9302      	str	r3, [sp, #8]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	2301      	movs	r3, #1
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2300      	movs	r3, #0
 80088a4:	2200      	movs	r2, #0
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f002 fdb3 	bl	800b412 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b088      	sub	sp, #32
 80088ba:	af04      	add	r7, sp, #16
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	4611      	mov	r1, r2
 80088c2:	461a      	mov	r2, r3
 80088c4:	460b      	mov	r3, r1
 80088c6:	80fb      	strh	r3, [r7, #6]
 80088c8:	4613      	mov	r3, r2
 80088ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088cc:	7979      	ldrb	r1, [r7, #5]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	9302      	str	r3, [sp, #8]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	2301      	movs	r3, #1
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	2201      	movs	r2, #1
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f002 fd95 	bl	800b412 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088e8:	2300      	movs	r3, #0

}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b088      	sub	sp, #32
 80088f6:	af04      	add	r7, sp, #16
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	4611      	mov	r1, r2
 80088fe:	461a      	mov	r2, r3
 8008900:	460b      	mov	r3, r1
 8008902:	80fb      	strh	r3, [r7, #6]
 8008904:	4613      	mov	r3, r2
 8008906:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008916:	7979      	ldrb	r1, [r7, #5]
 8008918:	7e3b      	ldrb	r3, [r7, #24]
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	2301      	movs	r3, #1
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2302      	movs	r3, #2
 800892a:	2200      	movs	r2, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f002 fd70 	bl	800b412 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af04      	add	r7, sp, #16
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	460b      	mov	r3, r1
 800894c:	80fb      	strh	r3, [r7, #6]
 800894e:	4613      	mov	r3, r2
 8008950:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008952:	7979      	ldrb	r1, [r7, #5]
 8008954:	2300      	movs	r3, #0
 8008956:	9303      	str	r3, [sp, #12]
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	2301      	movs	r3, #1
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	2302      	movs	r3, #2
 8008966:	2201      	movs	r2, #1
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f002 fd52 	bl	800b412 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af04      	add	r7, sp, #16
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	461a      	mov	r2, r3
 8008986:	4603      	mov	r3, r0
 8008988:	70fb      	strb	r3, [r7, #3]
 800898a:	460b      	mov	r3, r1
 800898c:	70bb      	strb	r3, [r7, #2]
 800898e:	4613      	mov	r3, r2
 8008990:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008992:	7878      	ldrb	r0, [r7, #1]
 8008994:	78ba      	ldrb	r2, [r7, #2]
 8008996:	78f9      	ldrb	r1, [r7, #3]
 8008998:	8b3b      	ldrh	r3, [r7, #24]
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	7d3b      	ldrb	r3, [r7, #20]
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	7c3b      	ldrb	r3, [r7, #16]
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	4603      	mov	r3, r0
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f002 fce5 	bl	800b376 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 fd04 	bl	800b3d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f836 	bl	8008a54 <USBH_GetFreePipe>
 80089e8:	4603      	mov	r3, r0
 80089ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00a      	beq.n	8008a0c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	33e0      	adds	r3, #224	; 0xe0
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a0c:	89fb      	ldrh	r3, [r7, #14]
 8008a0e:	b2db      	uxtb	r3, r3
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	2b0a      	cmp	r3, #10
 8008a28:	d80d      	bhi.n	8008a46 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	33e0      	adds	r3, #224	; 0xe0
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	33e0      	adds	r3, #224	; 0xe0
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e00f      	b.n	8008a86 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	33e0      	adds	r3, #224	; 0xe0
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	e007      	b.n	8008a90 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	3301      	adds	r3, #1
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	2b0a      	cmp	r3, #10
 8008a8a:	d9ec      	bls.n	8008a66 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aae:	2b84      	cmp	r3, #132	; 0x84
 8008ab0:	d005      	beq.n	8008abe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	3303      	adds	r3, #3
 8008abc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008abe:	68fb      	ldr	r3, [r7, #12]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ad2:	f3ef 8305 	mrs	r3, IPSR
 8008ad6:	607b      	str	r3, [r7, #4]
  return(result);
 8008ad8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bf14      	ite	ne
 8008ade:	2301      	movne	r3, #1
 8008ae0:	2300      	moveq	r3, #0
 8008ae2:	b2db      	uxtb	r3, r3
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008af4:	f001 f916 	bl	8009d24 <vTaskStartScheduler>
  
  return osOK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	bd80      	pop	{r7, pc}

08008afe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b00:	b089      	sub	sp, #36	; 0x24
 8008b02:	af04      	add	r7, sp, #16
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d020      	beq.n	8008b52 <osThreadCreate+0x54>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01c      	beq.n	8008b52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685c      	ldr	r4, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681d      	ldr	r5, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691e      	ldr	r6, [r3, #16]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff ffb6 	bl	8008a9c <makeFreeRtosPriority>
 8008b30:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	9100      	str	r1, [sp, #0]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	4632      	mov	r2, r6
 8008b44:	4629      	mov	r1, r5
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 ff0e 	bl	8009968 <xTaskCreateStatic>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e01c      	b.n	8008b8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685c      	ldr	r4, [r3, #4]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b5e:	b29e      	uxth	r6, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff ff98 	bl	8008a9c <makeFreeRtosPriority>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f107 030c 	add.w	r3, r7, #12
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	9200      	str	r2, [sp, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	4632      	mov	r2, r6
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 ff50 	bl	8009a22 <xTaskCreate>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d001      	beq.n	8008b8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e000      	b.n	8008b8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <osDelay+0x16>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	e000      	b.n	8008bae <osDelay+0x18>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 f884 	bl	8009cbc <vTaskDelay>
  
  return osOK;
 8008bb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008bbe:	b590      	push	{r4, r7, lr}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af02      	add	r7, sp, #8
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d011      	beq.n	8008bf4 <osMessageCreate+0x36>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00d      	beq.n	8008bf4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6859      	ldr	r1, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	2400      	movs	r4, #0
 8008bea:	9400      	str	r4, [sp, #0]
 8008bec:	f000 f9e0 	bl	8008fb0 <xQueueGenericCreateStatic>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	e008      	b.n	8008c06 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4619      	mov	r1, r3
 8008c00:	f000 fa4e 	bl	80090a0 <xQueueGenericCreate>
 8008c04:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd90      	pop	{r4, r7, pc}
	...

08008c10 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <osMessagePut+0x1e>
    ticks = 1;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008c2e:	f7ff ff4d 	bl	8008acc <inHandlerMode>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d018      	beq.n	8008c6a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008c38:	f107 0210 	add.w	r2, r7, #16
 8008c3c:	f107 0108 	add.w	r1, r7, #8
 8008c40:	2300      	movs	r3, #0
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fb84 	bl	8009350 <xQueueGenericSendFromISR>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d001      	beq.n	8008c52 <osMessagePut+0x42>
      return osErrorOS;
 8008c4e:	23ff      	movs	r3, #255	; 0xff
 8008c50:	e018      	b.n	8008c84 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d014      	beq.n	8008c82 <osMessagePut+0x72>
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <osMessagePut+0x7c>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	e00b      	b.n	8008c82 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008c6a:	f107 0108 	add.w	r1, r7, #8
 8008c6e:	2300      	movs	r3, #0
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fa6e 	bl	8009154 <xQueueGenericSend>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d001      	beq.n	8008c82 <osMessagePut+0x72>
      return osErrorOS;
 8008c7e:	23ff      	movs	r3, #255	; 0xff
 8008c80:	e000      	b.n	8008c84 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b08b      	sub	sp, #44	; 0x2c
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008caa:	2380      	movs	r3, #128	; 0x80
 8008cac:	617b      	str	r3, [r7, #20]
    return event;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	461c      	mov	r4, r3
 8008cb2:	f107 0314 	add.w	r3, r7, #20
 8008cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008cbe:	e054      	b.n	8008d6a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d103      	bne.n	8008cd8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd6:	e009      	b.n	8008cec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d006      	beq.n	8008cec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <osMessageGet+0x5c>
      ticks = 1;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008cec:	f7ff feee 	bl	8008acc <inHandlerMode>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01c      	beq.n	8008d30 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008cf6:	f107 0220 	add.w	r2, r7, #32
 8008cfa:	f107 0314 	add.w	r3, r7, #20
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	68b8      	ldr	r0, [r7, #8]
 8008d04:	f000 fca0 	bl	8009648 <xQueueReceiveFromISR>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d102      	bne.n	8008d14 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008d0e:	2310      	movs	r3, #16
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	e001      	b.n	8008d18 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01d      	beq.n	8008d5a <osMessageGet+0xca>
 8008d1e:	4b15      	ldr	r3, [pc, #84]	; (8008d74 <osMessageGet+0xe4>)
 8008d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	e014      	b.n	8008d5a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	3304      	adds	r3, #4
 8008d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d38:	4619      	mov	r1, r3
 8008d3a:	68b8      	ldr	r0, [r7, #8]
 8008d3c:	f000 fba4 	bl	8009488 <xQueueReceive>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d102      	bne.n	8008d4c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008d46:	2310      	movs	r3, #16
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e006      	b.n	8008d5a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <osMessageGet+0xc6>
 8008d52:	2300      	movs	r3, #0
 8008d54:	e000      	b.n	8008d58 <osMessageGet+0xc8>
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	461c      	mov	r4, r3
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	372c      	adds	r7, #44	; 0x2c
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd90      	pop	{r4, r7, pc}
 8008d72:	bf00      	nop
 8008d74:	e000ed04 	.word	0xe000ed04

08008d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f103 0208 	add.w	r2, r3, #8
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f103 0208 	add.w	r2, r3, #8
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f103 0208 	add.w	r2, r3, #8
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	601a      	str	r2, [r3, #0]
}
 8008e0e:	bf00      	nop
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e30:	d103      	bne.n	8008e3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	e00c      	b.n	8008e54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e002      	b.n	8008e48 <vListInsert+0x2e>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d2f6      	bcs.n	8008e42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	601a      	str	r2, [r3, #0]
}
 8008e80:	bf00      	nop
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6892      	ldr	r2, [r2, #8]
 8008ea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	6852      	ldr	r2, [r2, #4]
 8008eac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d103      	bne.n	8008ec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	1e5a      	subs	r2, r3, #1
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f0a:	f001 fd53 	bl	800a9b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	441a      	add	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	68f9      	ldr	r1, [r7, #12]
 8008f3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f40:	fb01 f303 	mul.w	r3, r1, r3
 8008f44:	441a      	add	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	22ff      	movs	r2, #255	; 0xff
 8008f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d114      	bne.n	8008f8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01a      	beq.n	8008f9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3310      	adds	r3, #16
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 f92b 	bl	800a1c8 <xTaskRemoveFromEventList>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d012      	beq.n	8008f9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f78:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <xQueueGenericReset+0xcc>)
 8008f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	e009      	b.n	8008f9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3310      	adds	r3, #16
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff fef2 	bl	8008d78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3324      	adds	r3, #36	; 0x24
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff feed 	bl	8008d78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f9e:	f001 fd39 	bl	800aa14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fa2:	2301      	movs	r3, #1
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	; 0x38
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <xQueueGenericCreateStatic+0x52>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <xQueueGenericCreateStatic+0x56>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <xQueueGenericCreateStatic+0x58>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	623b      	str	r3, [r7, #32]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d102      	bne.n	800902e <xQueueGenericCreateStatic+0x7e>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <xQueueGenericCreateStatic+0x82>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <xQueueGenericCreateStatic+0x84>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	61fb      	str	r3, [r7, #28]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800904e:	2348      	movs	r3, #72	; 0x48
 8009050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b48      	cmp	r3, #72	; 0x48
 8009056:	d00a      	beq.n	800906e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	61bb      	str	r3, [r7, #24]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800906e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00d      	beq.n	8009096 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009082:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	4613      	mov	r3, r2
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f83f 	bl	8009114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009098:	4618      	mov	r0, r3
 800909a:	3730      	adds	r7, #48	; 0x30
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	613b      	str	r3, [r7, #16]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	fb02 f303 	mul.w	r3, r2, r3
 80090d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	3348      	adds	r3, #72	; 0x48
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fd8d 	bl	800abf8 <pvPortMalloc>
 80090de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d011      	beq.n	800910a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	3348      	adds	r3, #72	; 0x48
 80090ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090f8:	79fa      	ldrb	r2, [r7, #7]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	68b9      	ldr	r1, [r7, #8]
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f805 	bl	8009114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800910a:	69bb      	ldr	r3, [r7, #24]
	}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e002      	b.n	8009136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009142:	2101      	movs	r1, #1
 8009144:	69b8      	ldr	r0, [r7, #24]
 8009146:	f7ff fecb 	bl	8008ee0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08e      	sub	sp, #56	; 0x38
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009162:	2300      	movs	r3, #0
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xQueueGenericSend+0x32>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d103      	bne.n	8009194 <xQueueGenericSend+0x40>
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <xQueueGenericSend+0x44>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <xQueueGenericSend+0x46>
 8009198:	2300      	movs	r3, #0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <xQueueGenericSend+0x60>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d103      	bne.n	80091c2 <xQueueGenericSend+0x6e>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <xQueueGenericSend+0x72>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <xQueueGenericSend+0x74>
 80091c6:	2300      	movs	r3, #0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	623b      	str	r3, [r7, #32]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091e2:	f001 f9b1 	bl	800a548 <xTaskGetSchedulerState>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d102      	bne.n	80091f2 <xQueueGenericSend+0x9e>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <xQueueGenericSend+0xa2>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <xQueueGenericSend+0xa4>
 80091f6:	2300      	movs	r3, #0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericSend+0xbe>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	61fb      	str	r3, [r7, #28]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009212:	f001 fbcf 	bl	800a9b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	429a      	cmp	r2, r3
 8009220:	d302      	bcc.n	8009228 <xQueueGenericSend+0xd4>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d129      	bne.n	800927c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800922e:	f000 fa8b 	bl	8009748 <prvCopyDataToQueue>
 8009232:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d010      	beq.n	800925e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	3324      	adds	r3, #36	; 0x24
 8009240:	4618      	mov	r0, r3
 8009242:	f000 ffc1 	bl	800a1c8 <xTaskRemoveFromEventList>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d013      	beq.n	8009274 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800924c:	4b3f      	ldr	r3, [pc, #252]	; (800934c <xQueueGenericSend+0x1f8>)
 800924e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	e00a      	b.n	8009274 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d007      	beq.n	8009274 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009264:	4b39      	ldr	r3, [pc, #228]	; (800934c <xQueueGenericSend+0x1f8>)
 8009266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009274:	f001 fbce 	bl	800aa14 <vPortExitCritical>
				return pdPASS;
 8009278:	2301      	movs	r3, #1
 800927a:	e063      	b.n	8009344 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009282:	f001 fbc7 	bl	800aa14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009286:	2300      	movs	r3, #0
 8009288:	e05c      	b.n	8009344 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	2b00      	cmp	r3, #0
 800928e:	d106      	bne.n	800929e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fff9 	bl	800a28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800929a:	2301      	movs	r3, #1
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800929e:	f001 fbb9 	bl	800aa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092a2:	f000 fda9 	bl	8009df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092a6:	f001 fb85 	bl	800a9b4 <vPortEnterCritical>
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d103      	bne.n	80092c0 <xQueueGenericSend+0x16c>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092cc:	d103      	bne.n	80092d6 <xQueueGenericSend+0x182>
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d6:	f001 fb9d 	bl	800aa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092da:	1d3a      	adds	r2, r7, #4
 80092dc:	f107 0314 	add.w	r3, r7, #20
 80092e0:	4611      	mov	r1, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 ffe8 	bl	800a2b8 <xTaskCheckForTimeOut>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d124      	bne.n	8009338 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80092ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f0:	f000 fb22 	bl	8009938 <prvIsQueueFull>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d018      	beq.n	800932c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	3310      	adds	r3, #16
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f000 ff3c 	bl	800a180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800930a:	f000 faad 	bl	8009868 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800930e:	f000 fd81 	bl	8009e14 <xTaskResumeAll>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	f47f af7c 	bne.w	8009212 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800931a:	4b0c      	ldr	r3, [pc, #48]	; (800934c <xQueueGenericSend+0x1f8>)
 800931c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	e772      	b.n	8009212 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800932c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800932e:	f000 fa9b 	bl	8009868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009332:	f000 fd6f 	bl	8009e14 <xTaskResumeAll>
 8009336:	e76c      	b.n	8009212 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800933a:	f000 fa95 	bl	8009868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800933e:	f000 fd69 	bl	8009e14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009342:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009344:	4618      	mov	r0, r3
 8009346:	3738      	adds	r7, #56	; 0x38
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b090      	sub	sp, #64	; 0x40
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d103      	bne.n	800938c <xQueueGenericSendFromISR+0x3c>
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <xQueueGenericSendFromISR+0x40>
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <xQueueGenericSendFromISR+0x42>
 8009390:	2300      	movs	r3, #0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10a      	bne.n	80093ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d103      	bne.n	80093ba <xQueueGenericSendFromISR+0x6a>
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <xQueueGenericSendFromISR+0x6e>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <xQueueGenericSendFromISR+0x70>
 80093be:	2300      	movs	r3, #0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	623b      	str	r3, [r7, #32]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80093da:	f001 fbcd 	bl	800ab78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80093de:	f3ef 8211 	mrs	r2, BASEPRI
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	61fa      	str	r2, [r7, #28]
 80093f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80093f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <xQueueGenericSendFromISR+0xbc>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d12f      	bne.n	800946c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009422:	f000 f991 	bl	8009748 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009426:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800942a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942e:	d112      	bne.n	8009456 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	d016      	beq.n	8009466 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	3324      	adds	r3, #36	; 0x24
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fec3 	bl	800a1c8 <xTaskRemoveFromEventList>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00e      	beq.n	8009466 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	e007      	b.n	8009466 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800945a:	3301      	adds	r3, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	b25a      	sxtb	r2, r3
 8009460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009466:	2301      	movs	r3, #1
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800946a:	e001      	b.n	8009470 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800946c:	2300      	movs	r3, #0
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009472:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800947a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800947e:	4618      	mov	r0, r3
 8009480:	3740      	adds	r7, #64	; 0x40
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08c      	sub	sp, #48	; 0x30
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009494:	2300      	movs	r3, #0
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <xQueueReceive+0x30>
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	623b      	str	r3, [r7, #32]
}
 80094b4:	bf00      	nop
 80094b6:	e7fe      	b.n	80094b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <xQueueReceive+0x3e>
 80094be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <xQueueReceive+0x42>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <xQueueReceive+0x44>
 80094ca:	2300      	movs	r3, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <xQueueReceive+0x5e>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	61fb      	str	r3, [r7, #28]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e6:	f001 f82f 	bl	800a548 <xTaskGetSchedulerState>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <xQueueReceive+0x6e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <xQueueReceive+0x72>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <xQueueReceive+0x74>
 80094fa:	2300      	movs	r3, #0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <xQueueReceive+0x8e>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	61bb      	str	r3, [r7, #24]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009516:	f001 fa4d 	bl	800a9b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	2b00      	cmp	r3, #0
 8009524:	d01f      	beq.n	8009566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800952a:	f000 f977 	bl	800981c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00f      	beq.n	800955e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	3310      	adds	r3, #16
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fe40 	bl	800a1c8 <xTaskRemoveFromEventList>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800954e:	4b3d      	ldr	r3, [pc, #244]	; (8009644 <xQueueReceive+0x1bc>)
 8009550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800955e:	f001 fa59 	bl	800aa14 <vPortExitCritical>
				return pdPASS;
 8009562:	2301      	movs	r3, #1
 8009564:	e069      	b.n	800963a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800956c:	f001 fa52 	bl	800aa14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009570:	2300      	movs	r3, #0
 8009572:	e062      	b.n	800963a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800957a:	f107 0310 	add.w	r3, r7, #16
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fe84 	bl	800a28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009588:	f001 fa44 	bl	800aa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800958c:	f000 fc34 	bl	8009df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009590:	f001 fa10 	bl	800a9b4 <vPortEnterCritical>
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800959a:	b25b      	sxtb	r3, r3
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0x122>
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b6:	d103      	bne.n	80095c0 <xQueueReceive+0x138>
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095c0:	f001 fa28 	bl	800aa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095c4:	1d3a      	adds	r2, r7, #4
 80095c6:	f107 0310 	add.w	r3, r7, #16
 80095ca:	4611      	mov	r1, r2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 fe73 	bl	800a2b8 <xTaskCheckForTimeOut>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d123      	bne.n	8009620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095da:	f000 f997 	bl	800990c <prvIsQueueEmpty>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d017      	beq.n	8009614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e6:	3324      	adds	r3, #36	; 0x24
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fdc7 	bl	800a180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80095f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f4:	f000 f938 	bl	8009868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80095f8:	f000 fc0c 	bl	8009e14 <xTaskResumeAll>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d189      	bne.n	8009516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009602:	4b10      	ldr	r3, [pc, #64]	; (8009644 <xQueueReceive+0x1bc>)
 8009604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	e780      	b.n	8009516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009616:	f000 f927 	bl	8009868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800961a:	f000 fbfb 	bl	8009e14 <xTaskResumeAll>
 800961e:	e77a      	b.n	8009516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009622:	f000 f921 	bl	8009868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009626:	f000 fbf5 	bl	8009e14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800962a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800962c:	f000 f96e 	bl	800990c <prvIsQueueEmpty>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	f43f af6f 	beq.w	8009516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800963a:	4618      	mov	r0, r3
 800963c:	3730      	adds	r7, #48	; 0x30
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08e      	sub	sp, #56	; 0x38
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	623b      	str	r3, [r7, #32]
}
 8009670:	bf00      	nop
 8009672:	e7fe      	b.n	8009672 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <xQueueReceiveFromISR+0x3a>
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <xQueueReceiveFromISR+0x3e>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <xQueueReceiveFromISR+0x40>
 8009686:	2300      	movs	r3, #0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	61fb      	str	r3, [r7, #28]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096a2:	f001 fa69 	bl	800ab78 <vPortValidateInterruptPriority>
	__asm volatile
 80096a6:	f3ef 8211 	mrs	r2, BASEPRI
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	61ba      	str	r2, [r7, #24]
 80096bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80096be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d02f      	beq.n	800972e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096dc:	f000 f89e 	bl	800981c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	1e5a      	subs	r2, r3, #1
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80096e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d112      	bne.n	8009718 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d016      	beq.n	8009728 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	3310      	adds	r3, #16
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fd62 	bl	800a1c8 <xTaskRemoveFromEventList>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00e      	beq.n	8009728 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	e007      	b.n	8009728 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800971c:	3301      	adds	r3, #1
 800971e:	b2db      	uxtb	r3, r3
 8009720:	b25a      	sxtb	r2, r3
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009728:	2301      	movs	r3, #1
 800972a:	637b      	str	r3, [r7, #52]	; 0x34
 800972c:	e001      	b.n	8009732 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800972e:	2300      	movs	r3, #0
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009734:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f383 8811 	msr	BASEPRI, r3
}
 800973c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009740:	4618      	mov	r0, r3
 8009742:	3738      	adds	r7, #56	; 0x38
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10d      	bne.n	8009782 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d14d      	bne.n	800980a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 ff06 	bl	800a584 <xTaskPriorityDisinherit>
 8009778:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	609a      	str	r2, [r3, #8]
 8009780:	e043      	b.n	800980a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d119      	bne.n	80097bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6858      	ldr	r0, [r3, #4]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009790:	461a      	mov	r2, r3
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	f001 ff58 	bl	800b648 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	441a      	add	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d32b      	bcc.n	800980a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	e026      	b.n	800980a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68d8      	ldr	r0, [r3, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	461a      	mov	r2, r3
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	f001 ff3e 	bl	800b648 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	68da      	ldr	r2, [r3, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	425b      	negs	r3, r3
 80097d6:	441a      	add	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d207      	bcs.n	80097f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	425b      	negs	r3, r3
 80097f2:	441a      	add	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d105      	bne.n	800980a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	3b01      	subs	r3, #1
 8009808:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009812:	697b      	ldr	r3, [r7, #20]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d018      	beq.n	8009860 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	441a      	add	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d303      	bcc.n	8009850 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68d9      	ldr	r1, [r3, #12]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	461a      	mov	r2, r3
 800985a:	6838      	ldr	r0, [r7, #0]
 800985c:	f001 fef4 	bl	800b648 <memcpy>
	}
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009870:	f001 f8a0 	bl	800a9b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800987a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800987c:	e011      	b.n	80098a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	2b00      	cmp	r3, #0
 8009884:	d012      	beq.n	80098ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3324      	adds	r3, #36	; 0x24
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fc9c 	bl	800a1c8 <xTaskRemoveFromEventList>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009896:	f000 fd71 	bl	800a37c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	3b01      	subs	r3, #1
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dce9      	bgt.n	800987e <prvUnlockQueue+0x16>
 80098aa:	e000      	b.n	80098ae <prvUnlockQueue+0x46>
					break;
 80098ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	22ff      	movs	r2, #255	; 0xff
 80098b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80098b6:	f001 f8ad 	bl	800aa14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80098ba:	f001 f87b 	bl	800a9b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098c6:	e011      	b.n	80098ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d012      	beq.n	80098f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3310      	adds	r3, #16
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fc77 	bl	800a1c8 <xTaskRemoveFromEventList>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098e0:	f000 fd4c 	bl	800a37c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dce9      	bgt.n	80098c8 <prvUnlockQueue+0x60>
 80098f4:	e000      	b.n	80098f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	22ff      	movs	r2, #255	; 0xff
 80098fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009900:	f001 f888 	bl	800aa14 <vPortExitCritical>
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009914:	f001 f84e 	bl	800a9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	2b00      	cmp	r3, #0
 800991e:	d102      	bne.n	8009926 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e001      	b.n	800992a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800992a:	f001 f873 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 800992e:	68fb      	ldr	r3, [r7, #12]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009940:	f001 f838 	bl	800a9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994c:	429a      	cmp	r2, r3
 800994e:	d102      	bne.n	8009956 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	e001      	b.n	800995a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800995a:	f001 f85b 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 800995e:	68fb      	ldr	r3, [r7, #12]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	; 0x38
 800996c:	af04      	add	r7, sp, #16
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xTaskCreateStatic+0x2a>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <xTaskCreateStatic+0x46>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	61fb      	str	r3, [r7, #28]
}
 80099aa:	bf00      	nop
 80099ac:	e7fe      	b.n	80099ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099ae:	23b4      	movs	r3, #180	; 0xb4
 80099b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2bb4      	cmp	r3, #180	; 0xb4
 80099b6:	d00a      	beq.n	80099ce <xTaskCreateStatic+0x66>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	61bb      	str	r3, [r7, #24]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01e      	beq.n	8009a14 <xTaskCreateStatic+0xac>
 80099d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01b      	beq.n	8009a14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	2202      	movs	r2, #2
 80099ea:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099ee:	2300      	movs	r3, #0
 80099f0:	9303      	str	r3, [sp, #12]
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	f107 0314 	add.w	r3, r7, #20
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f850 	bl	8009aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a0e:	f000 f8eb 	bl	8009be8 <prvAddNewTaskToReadyList>
 8009a12:	e001      	b.n	8009a18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a18:	697b      	ldr	r3, [r7, #20]
	}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3728      	adds	r7, #40	; 0x28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b08c      	sub	sp, #48	; 0x30
 8009a26:	af04      	add	r7, sp, #16
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	603b      	str	r3, [r7, #0]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 f8de 	bl	800abf8 <pvPortMalloc>
 8009a3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00e      	beq.n	8009a62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a44:	20b4      	movs	r0, #180	; 0xb4
 8009a46:	f001 f8d7 	bl	800abf8 <pvPortMalloc>
 8009a4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	631a      	str	r2, [r3, #48]	; 0x30
 8009a58:	e005      	b.n	8009a66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a5a:	6978      	ldr	r0, [r7, #20]
 8009a5c:	f001 f998 	bl	800ad90 <vPortFree>
 8009a60:	e001      	b.n	8009a66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d017      	beq.n	8009a9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a74:	88fa      	ldrh	r2, [r7, #6]
 8009a76:	2300      	movs	r3, #0
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68b9      	ldr	r1, [r7, #8]
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f80e 	bl	8009aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a90:	69f8      	ldr	r0, [r7, #28]
 8009a92:	f000 f8a9 	bl	8009be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a96:	2301      	movs	r3, #1
 8009a98:	61bb      	str	r3, [r7, #24]
 8009a9a:	e002      	b.n	8009aa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3720      	adds	r7, #32
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	f023 0307 	bic.w	r3, r3, #7
 8009ad2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	617b      	str	r3, [r7, #20]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01f      	beq.n	8009b3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009afa:	2300      	movs	r3, #0
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	e012      	b.n	8009b26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	7819      	ldrb	r1, [r3, #0]
 8009b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	3334      	adds	r3, #52	; 0x34
 8009b10:	460a      	mov	r2, r1
 8009b12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d006      	beq.n	8009b2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61fb      	str	r3, [r7, #28]
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	2b0f      	cmp	r3, #15
 8009b2a:	d9e9      	bls.n	8009b00 <prvInitialiseNewTask+0x54>
 8009b2c:	e000      	b.n	8009b30 <prvInitialiseNewTask+0x84>
			{
				break;
 8009b2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b38:	e003      	b.n	8009b42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b44:	2b06      	cmp	r3, #6
 8009b46:	d901      	bls.n	8009b4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b48:	2306      	movs	r3, #6
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	3304      	adds	r3, #4
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff f928 	bl	8008db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	3318      	adds	r3, #24
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff f923 	bl	8008db8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	f1c3 0207 	rsb	r2, r3, #7
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	334c      	adds	r3, #76	; 0x4c
 8009b9c:	2260      	movs	r2, #96	; 0x60
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f001 fd5f 	bl	800b664 <memset>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	4a0c      	ldr	r2, [pc, #48]	; (8009bdc <prvInitialiseNewTask+0x130>)
 8009baa:	651a      	str	r2, [r3, #80]	; 0x50
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <prvInitialiseNewTask+0x134>)
 8009bb0:	655a      	str	r2, [r3, #84]	; 0x54
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb4:	4a0b      	ldr	r2, [pc, #44]	; (8009be4 <prvInitialiseNewTask+0x138>)
 8009bb6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	69b8      	ldr	r0, [r7, #24]
 8009bbe:	f000 fdcd 	bl	800a75c <pxPortInitialiseStack>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bd4:	bf00      	nop
 8009bd6:	3720      	adds	r7, #32
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	0800b9f4 	.word	0x0800b9f4
 8009be0:	0800ba14 	.word	0x0800ba14
 8009be4:	0800b9d4 	.word	0x0800b9d4

08009be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bf0:	f000 fee0 	bl	800a9b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <prvAddNewTaskToReadyList+0xb8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	4a29      	ldr	r2, [pc, #164]	; (8009ca0 <prvAddNewTaskToReadyList+0xb8>)
 8009bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bfe:	4b29      	ldr	r3, [pc, #164]	; (8009ca4 <prvAddNewTaskToReadyList+0xbc>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c06:	4a27      	ldr	r2, [pc, #156]	; (8009ca4 <prvAddNewTaskToReadyList+0xbc>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c0c:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <prvAddNewTaskToReadyList+0xb8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d110      	bne.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c14:	f000 fbd6 	bl	800a3c4 <prvInitialiseTaskLists>
 8009c18:	e00d      	b.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c1a:	4b23      	ldr	r3, [pc, #140]	; (8009ca8 <prvAddNewTaskToReadyList+0xc0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c22:	4b20      	ldr	r3, [pc, #128]	; (8009ca4 <prvAddNewTaskToReadyList+0xbc>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d802      	bhi.n	8009c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c30:	4a1c      	ldr	r2, [pc, #112]	; (8009ca4 <prvAddNewTaskToReadyList+0xbc>)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c36:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <prvAddNewTaskToReadyList+0xc4>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	4a1b      	ldr	r2, [pc, #108]	; (8009cac <prvAddNewTaskToReadyList+0xc4>)
 8009c3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	2201      	movs	r2, #1
 8009c46:	409a      	lsls	r2, r3
 8009c48:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	4a18      	ldr	r2, [pc, #96]	; (8009cb0 <prvAddNewTaskToReadyList+0xc8>)
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <prvAddNewTaskToReadyList+0xcc>)
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	3304      	adds	r3, #4
 8009c66:	4619      	mov	r1, r3
 8009c68:	4610      	mov	r0, r2
 8009c6a:	f7ff f8b2 	bl	8008dd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c6e:	f000 fed1 	bl	800aa14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c72:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <prvAddNewTaskToReadyList+0xc0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00e      	beq.n	8009c98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <prvAddNewTaskToReadyList+0xbc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d207      	bcs.n	8009c98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c88:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <prvAddNewTaskToReadyList+0xd0>)
 8009c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	200008a8 	.word	0x200008a8
 8009ca4:	200007a8 	.word	0x200007a8
 8009ca8:	200008b4 	.word	0x200008b4
 8009cac:	200008c4 	.word	0x200008c4
 8009cb0:	200008b0 	.word	0x200008b0
 8009cb4:	200007ac 	.word	0x200007ac
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d017      	beq.n	8009cfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <vTaskDelay+0x60>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <vTaskDelay+0x30>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60bb      	str	r3, [r7, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cec:	f000 f884 	bl	8009df8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fccc 	bl	800a690 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cf8:	f000 f88c 	bl	8009e14 <xTaskResumeAll>
 8009cfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d107      	bne.n	8009d14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d04:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <vTaskDelay+0x64>)
 8009d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d14:	bf00      	nop
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	200008d0 	.word	0x200008d0
 8009d20:	e000ed04 	.word	0xe000ed04

08009d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	; 0x28
 8009d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d32:	463a      	mov	r2, r7
 8009d34:	1d39      	adds	r1, r7, #4
 8009d36:	f107 0308 	add.w	r3, r7, #8
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f6 fcd4 	bl	80006e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	9202      	str	r2, [sp, #8]
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	460a      	mov	r2, r1
 8009d52:	4921      	ldr	r1, [pc, #132]	; (8009dd8 <vTaskStartScheduler+0xb4>)
 8009d54:	4821      	ldr	r0, [pc, #132]	; (8009ddc <vTaskStartScheduler+0xb8>)
 8009d56:	f7ff fe07 	bl	8009968 <xTaskCreateStatic>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	4a20      	ldr	r2, [pc, #128]	; (8009de0 <vTaskStartScheduler+0xbc>)
 8009d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d60:	4b1f      	ldr	r3, [pc, #124]	; (8009de0 <vTaskStartScheduler+0xbc>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e001      	b.n	8009d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d11b      	bne.n	8009db0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	613b      	str	r3, [r7, #16]
}
 8009d8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d8c:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <vTaskStartScheduler+0xc0>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	334c      	adds	r3, #76	; 0x4c
 8009d92:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <vTaskStartScheduler+0xc4>)
 8009d94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d96:	4b15      	ldr	r3, [pc, #84]	; (8009dec <vTaskStartScheduler+0xc8>)
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d9e:	4b14      	ldr	r3, [pc, #80]	; (8009df0 <vTaskStartScheduler+0xcc>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009da4:	4b13      	ldr	r3, [pc, #76]	; (8009df4 <vTaskStartScheduler+0xd0>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009daa:	f000 fd61 	bl	800a870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009dae:	e00e      	b.n	8009dce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d10a      	bne.n	8009dce <vTaskStartScheduler+0xaa>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <vTaskStartScheduler+0xa8>
}
 8009dce:	bf00      	nop
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	0800b9b4 	.word	0x0800b9b4
 8009ddc:	0800a395 	.word	0x0800a395
 8009de0:	200008cc 	.word	0x200008cc
 8009de4:	200007a8 	.word	0x200007a8
 8009de8:	20000030 	.word	0x20000030
 8009dec:	200008c8 	.word	0x200008c8
 8009df0:	200008b4 	.word	0x200008b4
 8009df4:	200008ac 	.word	0x200008ac

08009df8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009dfc:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <vTaskSuspendAll+0x18>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	4a03      	ldr	r2, [pc, #12]	; (8009e10 <vTaskSuspendAll+0x18>)
 8009e04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e06:	bf00      	nop
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	200008d0 	.word	0x200008d0

08009e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e22:	4b41      	ldr	r3, [pc, #260]	; (8009f28 <xTaskResumeAll+0x114>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	603b      	str	r3, [r7, #0]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e40:	f000 fdb8 	bl	800a9b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e44:	4b38      	ldr	r3, [pc, #224]	; (8009f28 <xTaskResumeAll+0x114>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	4a37      	ldr	r2, [pc, #220]	; (8009f28 <xTaskResumeAll+0x114>)
 8009e4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e4e:	4b36      	ldr	r3, [pc, #216]	; (8009f28 <xTaskResumeAll+0x114>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d161      	bne.n	8009f1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e56:	4b35      	ldr	r3, [pc, #212]	; (8009f2c <xTaskResumeAll+0x118>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d05d      	beq.n	8009f1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e5e:	e02e      	b.n	8009ebe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e60:	4b33      	ldr	r3, [pc, #204]	; (8009f30 <xTaskResumeAll+0x11c>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3318      	adds	r3, #24
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff f80d 	bl	8008e8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff f808 	bl	8008e8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	2201      	movs	r2, #1
 8009e82:	409a      	lsls	r2, r3
 8009e84:	4b2b      	ldr	r3, [pc, #172]	; (8009f34 <xTaskResumeAll+0x120>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	4a2a      	ldr	r2, [pc, #168]	; (8009f34 <xTaskResumeAll+0x120>)
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4a27      	ldr	r2, [pc, #156]	; (8009f38 <xTaskResumeAll+0x124>)
 8009e9c:	441a      	add	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f7fe ff94 	bl	8008dd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eae:	4b23      	ldr	r3, [pc, #140]	; (8009f3c <xTaskResumeAll+0x128>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d302      	bcc.n	8009ebe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009eb8:	4b21      	ldr	r3, [pc, #132]	; (8009f40 <xTaskResumeAll+0x12c>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <xTaskResumeAll+0x11c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1cc      	bne.n	8009e60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ecc:	f000 fb1c 	bl	800a508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ed0:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <xTaskResumeAll+0x130>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d010      	beq.n	8009efe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009edc:	f000 f836 	bl	8009f4c <xTaskIncrementTick>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ee6:	4b16      	ldr	r3, [pc, #88]	; (8009f40 <xTaskResumeAll+0x12c>)
 8009ee8:	2201      	movs	r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f1      	bne.n	8009edc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009ef8:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <xTaskResumeAll+0x130>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <xTaskResumeAll+0x12c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d009      	beq.n	8009f1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f0a:	4b0f      	ldr	r3, [pc, #60]	; (8009f48 <xTaskResumeAll+0x134>)
 8009f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f1a:	f000 fd7b 	bl	800aa14 <vPortExitCritical>

	return xAlreadyYielded;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	200008d0 	.word	0x200008d0
 8009f2c:	200008a8 	.word	0x200008a8
 8009f30:	20000868 	.word	0x20000868
 8009f34:	200008b0 	.word	0x200008b0
 8009f38:	200007ac 	.word	0x200007ac
 8009f3c:	200007a8 	.word	0x200007a8
 8009f40:	200008bc 	.word	0x200008bc
 8009f44:	200008b8 	.word	0x200008b8
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f56:	4b4e      	ldr	r3, [pc, #312]	; (800a090 <xTaskIncrementTick+0x144>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f040 808e 	bne.w	800a07c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f60:	4b4c      	ldr	r3, [pc, #304]	; (800a094 <xTaskIncrementTick+0x148>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f68:	4a4a      	ldr	r2, [pc, #296]	; (800a094 <xTaskIncrementTick+0x148>)
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d120      	bne.n	8009fb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f74:	4b48      	ldr	r3, [pc, #288]	; (800a098 <xTaskIncrementTick+0x14c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <xTaskIncrementTick+0x48>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	603b      	str	r3, [r7, #0]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <xTaskIncrementTick+0x46>
 8009f94:	4b40      	ldr	r3, [pc, #256]	; (800a098 <xTaskIncrementTick+0x14c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60fb      	str	r3, [r7, #12]
 8009f9a:	4b40      	ldr	r3, [pc, #256]	; (800a09c <xTaskIncrementTick+0x150>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a3e      	ldr	r2, [pc, #248]	; (800a098 <xTaskIncrementTick+0x14c>)
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4a3e      	ldr	r2, [pc, #248]	; (800a09c <xTaskIncrementTick+0x150>)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	4b3d      	ldr	r3, [pc, #244]	; (800a0a0 <xTaskIncrementTick+0x154>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	4a3c      	ldr	r2, [pc, #240]	; (800a0a0 <xTaskIncrementTick+0x154>)
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	f000 faa9 	bl	800a508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fb6:	4b3b      	ldr	r3, [pc, #236]	; (800a0a4 <xTaskIncrementTick+0x158>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d348      	bcc.n	800a052 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fc0:	4b35      	ldr	r3, [pc, #212]	; (800a098 <xTaskIncrementTick+0x14c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fca:	4b36      	ldr	r3, [pc, #216]	; (800a0a4 <xTaskIncrementTick+0x158>)
 8009fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd0:	601a      	str	r2, [r3, #0]
					break;
 8009fd2:	e03e      	b.n	800a052 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd4:	4b30      	ldr	r3, [pc, #192]	; (800a098 <xTaskIncrementTick+0x14c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d203      	bcs.n	8009ff4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009fec:	4a2d      	ldr	r2, [pc, #180]	; (800a0a4 <xTaskIncrementTick+0x158>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ff2:	e02e      	b.n	800a052 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe ff47 	bl	8008e8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	3318      	adds	r3, #24
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fe ff3e 	bl	8008e8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	2201      	movs	r2, #1
 800a016:	409a      	lsls	r2, r3
 800a018:	4b23      	ldr	r3, [pc, #140]	; (800a0a8 <xTaskIncrementTick+0x15c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <xTaskIncrementTick+0x15c>)
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4a1f      	ldr	r2, [pc, #124]	; (800a0ac <xTaskIncrementTick+0x160>)
 800a030:	441a      	add	r2, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	3304      	adds	r3, #4
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f7fe feca 	bl	8008dd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	4b1b      	ldr	r3, [pc, #108]	; (800a0b0 <xTaskIncrementTick+0x164>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d3b9      	bcc.n	8009fc0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a050:	e7b6      	b.n	8009fc0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a052:	4b17      	ldr	r3, [pc, #92]	; (800a0b0 <xTaskIncrementTick+0x164>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a058:	4914      	ldr	r1, [pc, #80]	; (800a0ac <xTaskIncrementTick+0x160>)
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	440b      	add	r3, r1
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d901      	bls.n	800a06e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a06e:	4b11      	ldr	r3, [pc, #68]	; (800a0b4 <xTaskIncrementTick+0x168>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a076:	2301      	movs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
 800a07a:	e004      	b.n	800a086 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a07c:	4b0e      	ldr	r3, [pc, #56]	; (800a0b8 <xTaskIncrementTick+0x16c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	4a0d      	ldr	r2, [pc, #52]	; (800a0b8 <xTaskIncrementTick+0x16c>)
 800a084:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a086:	697b      	ldr	r3, [r7, #20]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200008d0 	.word	0x200008d0
 800a094:	200008ac 	.word	0x200008ac
 800a098:	20000860 	.word	0x20000860
 800a09c:	20000864 	.word	0x20000864
 800a0a0:	200008c0 	.word	0x200008c0
 800a0a4:	200008c8 	.word	0x200008c8
 800a0a8:	200008b0 	.word	0x200008b0
 800a0ac:	200007ac 	.word	0x200007ac
 800a0b0:	200007a8 	.word	0x200007a8
 800a0b4:	200008bc 	.word	0x200008bc
 800a0b8:	200008b8 	.word	0x200008b8

0800a0bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0c2:	4b29      	ldr	r3, [pc, #164]	; (800a168 <vTaskSwitchContext+0xac>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0ca:	4b28      	ldr	r3, [pc, #160]	; (800a16c <vTaskSwitchContext+0xb0>)
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0d0:	e044      	b.n	800a15c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a0d2:	4b26      	ldr	r3, [pc, #152]	; (800a16c <vTaskSwitchContext+0xb0>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d8:	4b25      	ldr	r3, [pc, #148]	; (800a170 <vTaskSwitchContext+0xb4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	fab3 f383 	clz	r3, r3
 800a0e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a0e6:	7afb      	ldrb	r3, [r7, #11]
 800a0e8:	f1c3 031f 	rsb	r3, r3, #31
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	4921      	ldr	r1, [pc, #132]	; (800a174 <vTaskSwitchContext+0xb8>)
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	440b      	add	r3, r1
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	607b      	str	r3, [r7, #4]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <vTaskSwitchContext+0x5a>
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4a14      	ldr	r2, [pc, #80]	; (800a174 <vTaskSwitchContext+0xb8>)
 800a124:	4413      	add	r3, r2
 800a126:	613b      	str	r3, [r7, #16]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	605a      	str	r2, [r3, #4]
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	3308      	adds	r3, #8
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d104      	bne.n	800a148 <vTaskSwitchContext+0x8c>
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	605a      	str	r2, [r3, #4]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	4a0a      	ldr	r2, [pc, #40]	; (800a178 <vTaskSwitchContext+0xbc>)
 800a150:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <vTaskSwitchContext+0xbc>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	334c      	adds	r3, #76	; 0x4c
 800a158:	4a08      	ldr	r2, [pc, #32]	; (800a17c <vTaskSwitchContext+0xc0>)
 800a15a:	6013      	str	r3, [r2, #0]
}
 800a15c:	bf00      	nop
 800a15e:	371c      	adds	r7, #28
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	200008d0 	.word	0x200008d0
 800a16c:	200008bc 	.word	0x200008bc
 800a170:	200008b0 	.word	0x200008b0
 800a174:	200007ac 	.word	0x200007ac
 800a178:	200007a8 	.word	0x200007a8
 800a17c:	20000030 	.word	0x20000030

0800a180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	60fb      	str	r3, [r7, #12]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <vTaskPlaceOnEventList+0x44>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7fe fe33 	bl	8008e1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	6838      	ldr	r0, [r7, #0]
 800a1b8:	f000 fa6a 	bl	800a690 <prvAddCurrentTaskToDelayedList>
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	200007a8 	.word	0x200007a8

0800a1c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	60fb      	str	r3, [r7, #12]
}
 800a1f0:	bf00      	nop
 800a1f2:	e7fe      	b.n	800a1f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3318      	adds	r3, #24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe fe47 	bl	8008e8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1fe:	4b1d      	ldr	r3, [pc, #116]	; (800a274 <xTaskRemoveFromEventList+0xac>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d11c      	bne.n	800a240 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3304      	adds	r3, #4
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fe3e 	bl	8008e8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a214:	2201      	movs	r2, #1
 800a216:	409a      	lsls	r2, r3
 800a218:	4b17      	ldr	r3, [pc, #92]	; (800a278 <xTaskRemoveFromEventList+0xb0>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	4a16      	ldr	r2, [pc, #88]	; (800a278 <xTaskRemoveFromEventList+0xb0>)
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4a13      	ldr	r2, [pc, #76]	; (800a27c <xTaskRemoveFromEventList+0xb4>)
 800a230:	441a      	add	r2, r3
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	3304      	adds	r3, #4
 800a236:	4619      	mov	r1, r3
 800a238:	4610      	mov	r0, r2
 800a23a:	f7fe fdca 	bl	8008dd2 <vListInsertEnd>
 800a23e:	e005      	b.n	800a24c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	3318      	adds	r3, #24
 800a244:	4619      	mov	r1, r3
 800a246:	480e      	ldr	r0, [pc, #56]	; (800a280 <xTaskRemoveFromEventList+0xb8>)
 800a248:	f7fe fdc3 	bl	8008dd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a250:	4b0c      	ldr	r3, [pc, #48]	; (800a284 <xTaskRemoveFromEventList+0xbc>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a256:	429a      	cmp	r2, r3
 800a258:	d905      	bls.n	800a266 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a25a:	2301      	movs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a25e:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <xTaskRemoveFromEventList+0xc0>)
 800a260:	2201      	movs	r2, #1
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e001      	b.n	800a26a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a26a:	697b      	ldr	r3, [r7, #20]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200008d0 	.word	0x200008d0
 800a278:	200008b0 	.word	0x200008b0
 800a27c:	200007ac 	.word	0x200007ac
 800a280:	20000868 	.word	0x20000868
 800a284:	200007a8 	.word	0x200007a8
 800a288:	200008bc 	.word	0x200008bc

0800a28c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a294:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <vTaskInternalSetTimeOutState+0x24>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <vTaskInternalSetTimeOutState+0x28>)
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	605a      	str	r2, [r3, #4]
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	200008c0 	.word	0x200008c0
 800a2b4:	200008ac 	.word	0x200008ac

0800a2b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	613b      	str	r3, [r7, #16]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	60fb      	str	r3, [r7, #12]
}
 800a2f6:	bf00      	nop
 800a2f8:	e7fe      	b.n	800a2f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a2fa:	f000 fb5b 	bl	800a9b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2fe:	4b1d      	ldr	r3, [pc, #116]	; (800a374 <xTaskCheckForTimeOut+0xbc>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a316:	d102      	bne.n	800a31e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a318:	2300      	movs	r3, #0
 800a31a:	61fb      	str	r3, [r7, #28]
 800a31c:	e023      	b.n	800a366 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <xTaskCheckForTimeOut+0xc0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d007      	beq.n	800a33a <xTaskCheckForTimeOut+0x82>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	429a      	cmp	r2, r3
 800a332:	d302      	bcc.n	800a33a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a334:	2301      	movs	r3, #1
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	e015      	b.n	800a366 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	429a      	cmp	r2, r3
 800a342:	d20b      	bcs.n	800a35c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	1ad2      	subs	r2, r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff ff9b 	bl	800a28c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a356:	2300      	movs	r3, #0
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	e004      	b.n	800a366 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a362:	2301      	movs	r3, #1
 800a364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a366:	f000 fb55 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 800a36a:	69fb      	ldr	r3, [r7, #28]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3720      	adds	r7, #32
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	200008ac 	.word	0x200008ac
 800a378:	200008c0 	.word	0x200008c0

0800a37c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a380:	4b03      	ldr	r3, [pc, #12]	; (800a390 <vTaskMissedYield+0x14>)
 800a382:	2201      	movs	r2, #1
 800a384:	601a      	str	r2, [r3, #0]
}
 800a386:	bf00      	nop
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	200008bc 	.word	0x200008bc

0800a394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a39c:	f000 f852 	bl	800a444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3a0:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <prvIdleTask+0x28>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d9f9      	bls.n	800a39c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <prvIdleTask+0x2c>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a3b8:	e7f0      	b.n	800a39c <prvIdleTask+0x8>
 800a3ba:	bf00      	nop
 800a3bc:	200007ac 	.word	0x200007ac
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	e00c      	b.n	800a3ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4a12      	ldr	r2, [pc, #72]	; (800a424 <prvInitialiseTaskLists+0x60>)
 800a3dc:	4413      	add	r3, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fcca 	bl	8008d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	607b      	str	r3, [r7, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b06      	cmp	r3, #6
 800a3ee:	d9ef      	bls.n	800a3d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3f0:	480d      	ldr	r0, [pc, #52]	; (800a428 <prvInitialiseTaskLists+0x64>)
 800a3f2:	f7fe fcc1 	bl	8008d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3f6:	480d      	ldr	r0, [pc, #52]	; (800a42c <prvInitialiseTaskLists+0x68>)
 800a3f8:	f7fe fcbe 	bl	8008d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3fc:	480c      	ldr	r0, [pc, #48]	; (800a430 <prvInitialiseTaskLists+0x6c>)
 800a3fe:	f7fe fcbb 	bl	8008d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a402:	480c      	ldr	r0, [pc, #48]	; (800a434 <prvInitialiseTaskLists+0x70>)
 800a404:	f7fe fcb8 	bl	8008d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a408:	480b      	ldr	r0, [pc, #44]	; (800a438 <prvInitialiseTaskLists+0x74>)
 800a40a:	f7fe fcb5 	bl	8008d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a40e:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <prvInitialiseTaskLists+0x78>)
 800a410:	4a05      	ldr	r2, [pc, #20]	; (800a428 <prvInitialiseTaskLists+0x64>)
 800a412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a414:	4b0a      	ldr	r3, [pc, #40]	; (800a440 <prvInitialiseTaskLists+0x7c>)
 800a416:	4a05      	ldr	r2, [pc, #20]	; (800a42c <prvInitialiseTaskLists+0x68>)
 800a418:	601a      	str	r2, [r3, #0]
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	200007ac 	.word	0x200007ac
 800a428:	20000838 	.word	0x20000838
 800a42c:	2000084c 	.word	0x2000084c
 800a430:	20000868 	.word	0x20000868
 800a434:	2000087c 	.word	0x2000087c
 800a438:	20000894 	.word	0x20000894
 800a43c:	20000860 	.word	0x20000860
 800a440:	20000864 	.word	0x20000864

0800a444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a44a:	e019      	b.n	800a480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a44c:	f000 fab2 	bl	800a9b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a450:	4b10      	ldr	r3, [pc, #64]	; (800a494 <prvCheckTasksWaitingTermination+0x50>)
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fd15 	bl	8008e8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a462:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <prvCheckTasksWaitingTermination+0x54>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3b01      	subs	r3, #1
 800a468:	4a0b      	ldr	r2, [pc, #44]	; (800a498 <prvCheckTasksWaitingTermination+0x54>)
 800a46a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a46c:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <prvCheckTasksWaitingTermination+0x58>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3b01      	subs	r3, #1
 800a472:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <prvCheckTasksWaitingTermination+0x58>)
 800a474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a476:	f000 facd 	bl	800aa14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f810 	bl	800a4a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a480:	4b06      	ldr	r3, [pc, #24]	; (800a49c <prvCheckTasksWaitingTermination+0x58>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e1      	bne.n	800a44c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	2000087c 	.word	0x2000087c
 800a498:	200008a8 	.word	0x200008a8
 800a49c:	20000890 	.word	0x20000890

0800a4a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	334c      	adds	r3, #76	; 0x4c
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f001 f999 	bl	800b7e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d108      	bne.n	800a4ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fc65 	bl	800ad90 <vPortFree>
				vPortFree( pxTCB );
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fc62 	bl	800ad90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a4cc:	e018      	b.n	800a500 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d103      	bne.n	800a4e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fc59 	bl	800ad90 <vPortFree>
	}
 800a4de:	e00f      	b.n	800a500 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d00a      	beq.n	800a500 <prvDeleteTCB+0x60>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	60fb      	str	r3, [r7, #12]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <prvDeleteTCB+0x5e>
	}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a50e:	4b0c      	ldr	r3, [pc, #48]	; (800a540 <prvResetNextTaskUnblockTime+0x38>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d104      	bne.n	800a522 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <prvResetNextTaskUnblockTime+0x3c>)
 800a51a:	f04f 32ff 	mov.w	r2, #4294967295
 800a51e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a520:	e008      	b.n	800a534 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <prvResetNextTaskUnblockTime+0x38>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	4a04      	ldr	r2, [pc, #16]	; (800a544 <prvResetNextTaskUnblockTime+0x3c>)
 800a532:	6013      	str	r3, [r2, #0]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	20000860 	.word	0x20000860
 800a544:	200008c8 	.word	0x200008c8

0800a548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <xTaskGetSchedulerState+0x34>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d102      	bne.n	800a55c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a556:	2301      	movs	r3, #1
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	e008      	b.n	800a56e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a55c:	4b08      	ldr	r3, [pc, #32]	; (800a580 <xTaskGetSchedulerState+0x38>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d102      	bne.n	800a56a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a564:	2302      	movs	r3, #2
 800a566:	607b      	str	r3, [r7, #4]
 800a568:	e001      	b.n	800a56e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a56a:	2300      	movs	r3, #0
 800a56c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a56e:	687b      	ldr	r3, [r7, #4]
	}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	200008b4 	.word	0x200008b4
 800a580:	200008d0 	.word	0x200008d0

0800a584 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d06e      	beq.n	800a678 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a59a:	4b3a      	ldr	r3, [pc, #232]	; (800a684 <xTaskPriorityDisinherit+0x100>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d00a      	beq.n	800a5ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	60fb      	str	r3, [r7, #12]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	60bb      	str	r3, [r7, #8]
}
 800a5d4:	bf00      	nop
 800a5d6:	e7fe      	b.n	800a5d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5dc:	1e5a      	subs	r2, r3, #1
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d044      	beq.n	800a678 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d140      	bne.n	800a678 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe fc46 	bl	8008e8c <uxListRemove>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d115      	bne.n	800a632 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60a:	491f      	ldr	r1, [pc, #124]	; (800a688 <xTaskPriorityDisinherit+0x104>)
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	440b      	add	r3, r1
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <xTaskPriorityDisinherit+0xae>
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	2201      	movs	r2, #1
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	43da      	mvns	r2, r3
 800a628:	4b18      	ldr	r3, [pc, #96]	; (800a68c <xTaskPriorityDisinherit+0x108>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4013      	ands	r3, r2
 800a62e:	4a17      	ldr	r2, [pc, #92]	; (800a68c <xTaskPriorityDisinherit+0x108>)
 800a630:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	f1c3 0207 	rsb	r2, r3, #7
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	2201      	movs	r2, #1
 800a64c:	409a      	lsls	r2, r3
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <xTaskPriorityDisinherit+0x108>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4313      	orrs	r3, r2
 800a654:	4a0d      	ldr	r2, [pc, #52]	; (800a68c <xTaskPriorityDisinherit+0x108>)
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65c:	4613      	mov	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4a08      	ldr	r2, [pc, #32]	; (800a688 <xTaskPriorityDisinherit+0x104>)
 800a666:	441a      	add	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4619      	mov	r1, r3
 800a66e:	4610      	mov	r0, r2
 800a670:	f7fe fbaf 	bl	8008dd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a674:	2301      	movs	r3, #1
 800a676:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a678:	697b      	ldr	r3, [r7, #20]
	}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200007a8 	.word	0x200007a8
 800a688:	200007ac 	.word	0x200007ac
 800a68c:	200008b0 	.word	0x200008b0

0800a690 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a69a:	4b29      	ldr	r3, [pc, #164]	; (800a740 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6a0:	4b28      	ldr	r3, [pc, #160]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fbf0 	bl	8008e8c <uxListRemove>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a6b2:	4b24      	ldr	r3, [pc, #144]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a6be:	43da      	mvns	r2, r3
 800a6c0:	4b21      	ldr	r3, [pc, #132]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	4a20      	ldr	r2, [pc, #128]	; (800a748 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d10a      	bne.n	800a6e8 <prvAddCurrentTaskToDelayedList+0x58>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d007      	beq.n	800a6e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6d8:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4619      	mov	r1, r3
 800a6e0:	481a      	ldr	r0, [pc, #104]	; (800a74c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a6e2:	f7fe fb76 	bl	8008dd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a6e6:	e026      	b.n	800a736 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6f0:	4b14      	ldr	r3, [pc, #80]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d209      	bcs.n	800a714 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a700:	4b13      	ldr	r3, [pc, #76]	; (800a750 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3304      	adds	r3, #4
 800a70a:	4619      	mov	r1, r3
 800a70c:	4610      	mov	r0, r2
 800a70e:	f7fe fb84 	bl	8008e1a <vListInsert>
}
 800a712:	e010      	b.n	800a736 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a714:	4b0f      	ldr	r3, [pc, #60]	; (800a754 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3304      	adds	r3, #4
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7fe fb7a 	bl	8008e1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d202      	bcs.n	800a736 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a730:	4a09      	ldr	r2, [pc, #36]	; (800a758 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	6013      	str	r3, [r2, #0]
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	200008ac 	.word	0x200008ac
 800a744:	200007a8 	.word	0x200007a8
 800a748:	200008b0 	.word	0x200008b0
 800a74c:	20000894 	.word	0x20000894
 800a750:	20000864 	.word	0x20000864
 800a754:	20000860 	.word	0x20000860
 800a758:	200008c8 	.word	0x200008c8

0800a75c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3b04      	subs	r3, #4
 800a76c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3b04      	subs	r3, #4
 800a77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f023 0201 	bic.w	r2, r3, #1
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3b04      	subs	r3, #4
 800a78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a78c:	4a0c      	ldr	r2, [pc, #48]	; (800a7c0 <pxPortInitialiseStack+0x64>)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3b14      	subs	r3, #20
 800a796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3b04      	subs	r3, #4
 800a7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f06f 0202 	mvn.w	r2, #2
 800a7aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3b20      	subs	r3, #32
 800a7b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	0800a7c5 	.word	0x0800a7c5

0800a7c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7ce:	4b12      	ldr	r3, [pc, #72]	; (800a818 <prvTaskExitError+0x54>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d6:	d00a      	beq.n	800a7ee <prvTaskExitError+0x2a>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	60fb      	str	r3, [r7, #12]
}
 800a7ea:	bf00      	nop
 800a7ec:	e7fe      	b.n	800a7ec <prvTaskExitError+0x28>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60bb      	str	r3, [r7, #8]
}
 800a800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a802:	bf00      	nop
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0fc      	beq.n	800a804 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	2000002c 	.word	0x2000002c
 800a81c:	00000000 	.word	0x00000000

0800a820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a820:	4b07      	ldr	r3, [pc, #28]	; (800a840 <pxCurrentTCBConst2>)
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	6808      	ldr	r0, [r1, #0]
 800a826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	f380 8809 	msr	PSP, r0
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f04f 0000 	mov.w	r0, #0
 800a836:	f380 8811 	msr	BASEPRI, r0
 800a83a:	4770      	bx	lr
 800a83c:	f3af 8000 	nop.w

0800a840 <pxCurrentTCBConst2>:
 800a840:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop

0800a848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a848:	4808      	ldr	r0, [pc, #32]	; (800a86c <prvPortStartFirstTask+0x24>)
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	f380 8808 	msr	MSP, r0
 800a852:	f04f 0000 	mov.w	r0, #0
 800a856:	f380 8814 	msr	CONTROL, r0
 800a85a:	b662      	cpsie	i
 800a85c:	b661      	cpsie	f
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	df00      	svc	0
 800a868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a86a:	bf00      	nop
 800a86c:	e000ed08 	.word	0xe000ed08

0800a870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a876:	4b46      	ldr	r3, [pc, #280]	; (800a990 <xPortStartScheduler+0x120>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a46      	ldr	r2, [pc, #280]	; (800a994 <xPortStartScheduler+0x124>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10a      	bne.n	800a896 <xPortStartScheduler+0x26>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	613b      	str	r3, [r7, #16]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a896:	4b3e      	ldr	r3, [pc, #248]	; (800a990 <xPortStartScheduler+0x120>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a3f      	ldr	r2, [pc, #252]	; (800a998 <xPortStartScheduler+0x128>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d10a      	bne.n	800a8b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	60fb      	str	r3, [r7, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8b6:	4b39      	ldr	r3, [pc, #228]	; (800a99c <xPortStartScheduler+0x12c>)
 800a8b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	22ff      	movs	r2, #255	; 0xff
 800a8c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	4b31      	ldr	r3, [pc, #196]	; (800a9a0 <xPortStartScheduler+0x130>)
 800a8dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8de:	4b31      	ldr	r3, [pc, #196]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8e4:	e009      	b.n	800a8fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8e6:	4b2f      	ldr	r3, [pc, #188]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4a2d      	ldr	r2, [pc, #180]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a8ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a902:	2b80      	cmp	r3, #128	; 0x80
 800a904:	d0ef      	beq.n	800a8e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a906:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1c3 0307 	rsb	r3, r3, #7
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d00a      	beq.n	800a928 <xPortStartScheduler+0xb8>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	60bb      	str	r3, [r7, #8]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a928:	4b1e      	ldr	r3, [pc, #120]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a932:	4b1c      	ldr	r3, [pc, #112]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a93a:	4a1a      	ldr	r2, [pc, #104]	; (800a9a4 <xPortStartScheduler+0x134>)
 800a93c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	b2da      	uxtb	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a946:	4b18      	ldr	r3, [pc, #96]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a17      	ldr	r2, [pc, #92]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a94c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a952:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a14      	ldr	r2, [pc, #80]	; (800a9a8 <xPortStartScheduler+0x138>)
 800a958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a95c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a95e:	f000 f8dd 	bl	800ab1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a962:	4b12      	ldr	r3, [pc, #72]	; (800a9ac <xPortStartScheduler+0x13c>)
 800a964:	2200      	movs	r2, #0
 800a966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a968:	f000 f8fc 	bl	800ab64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <xPortStartScheduler+0x140>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <xPortStartScheduler+0x140>)
 800a972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a978:	f7ff ff66 	bl	800a848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a97c:	f7ff fb9e 	bl	800a0bc <vTaskSwitchContext>
	prvTaskExitError();
 800a980:	f7ff ff20 	bl	800a7c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	e000ed00 	.word	0xe000ed00
 800a994:	410fc271 	.word	0x410fc271
 800a998:	410fc270 	.word	0x410fc270
 800a99c:	e000e400 	.word	0xe000e400
 800a9a0:	200008d4 	.word	0x200008d4
 800a9a4:	200008d8 	.word	0x200008d8
 800a9a8:	e000ed20 	.word	0xe000ed20
 800a9ac:	2000002c 	.word	0x2000002c
 800a9b0:	e000ef34 	.word	0xe000ef34

0800a9b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	607b      	str	r3, [r7, #4]
}
 800a9cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9ce:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <vPortEnterCritical+0x58>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <vPortEnterCritical+0x58>)
 800a9d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <vPortEnterCritical+0x58>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d10f      	bne.n	800aa00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9e0:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <vPortEnterCritical+0x5c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	603b      	str	r3, [r7, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <vPortEnterCritical+0x4a>
	}
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	2000002c 	.word	0x2000002c
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa1a:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <vPortExitCritical+0x50>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10a      	bne.n	800aa38 <vPortExitCritical+0x24>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	607b      	str	r3, [r7, #4]
}
 800aa34:	bf00      	nop
 800aa36:	e7fe      	b.n	800aa36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <vPortExitCritical+0x50>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	4a09      	ldr	r2, [pc, #36]	; (800aa64 <vPortExitCritical+0x50>)
 800aa40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa42:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <vPortExitCritical+0x50>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d105      	bne.n	800aa56 <vPortExitCritical+0x42>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	f383 8811 	msr	BASEPRI, r3
}
 800aa54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa56:	bf00      	nop
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	2000002c 	.word	0x2000002c
	...

0800aa70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa70:	f3ef 8009 	mrs	r0, PSP
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <pxCurrentTCBConst>)
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	f01e 0f10 	tst.w	lr, #16
 800aa80:	bf08      	it	eq
 800aa82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa94:	f380 8811 	msr	BASEPRI, r0
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f7ff fb0c 	bl	800a0bc <vTaskSwitchContext>
 800aaa4:	f04f 0000 	mov.w	r0, #0
 800aaa8:	f380 8811 	msr	BASEPRI, r0
 800aaac:	bc09      	pop	{r0, r3}
 800aaae:	6819      	ldr	r1, [r3, #0]
 800aab0:	6808      	ldr	r0, [r1, #0]
 800aab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab6:	f01e 0f10 	tst.w	lr, #16
 800aaba:	bf08      	it	eq
 800aabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aac0:	f380 8809 	msr	PSP, r0
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	f3af 8000 	nop.w

0800aad0 <pxCurrentTCBConst>:
 800aad0:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop

0800aad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
}
 800aaf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aaf2:	f7ff fa2b 	bl	8009f4c <xTaskIncrementTick>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d003      	beq.n	800ab04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aafc:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <SysTick_Handler+0x40>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	2300      	movs	r3, #0
 800ab06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	f383 8811 	msr	BASEPRI, r3
}
 800ab0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	e000ed04 	.word	0xe000ed04

0800ab1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <vPortSetupTimerInterrupt+0x34>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab26:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <vPortSetupTimerInterrupt+0x38>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <vPortSetupTimerInterrupt+0x3c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <vPortSetupTimerInterrupt+0x40>)
 800ab32:	fba2 2303 	umull	r2, r3, r2, r3
 800ab36:	099b      	lsrs	r3, r3, #6
 800ab38:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <vPortSetupTimerInterrupt+0x44>)
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab3e:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <vPortSetupTimerInterrupt+0x34>)
 800ab40:	2207      	movs	r2, #7
 800ab42:	601a      	str	r2, [r3, #0]
}
 800ab44:	bf00      	nop
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	e000e010 	.word	0xe000e010
 800ab54:	e000e018 	.word	0xe000e018
 800ab58:	20000000 	.word	0x20000000
 800ab5c:	10624dd3 	.word	0x10624dd3
 800ab60:	e000e014 	.word	0xe000e014

0800ab64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab74 <vPortEnableVFP+0x10>
 800ab68:	6801      	ldr	r1, [r0, #0]
 800ab6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab6e:	6001      	str	r1, [r0, #0]
 800ab70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab72:	bf00      	nop
 800ab74:	e000ed88 	.word	0xe000ed88

0800ab78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab7e:	f3ef 8305 	mrs	r3, IPSR
 800ab82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b0f      	cmp	r3, #15
 800ab88:	d914      	bls.n	800abb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab8a:	4a17      	ldr	r2, [pc, #92]	; (800abe8 <vPortValidateInterruptPriority+0x70>)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4413      	add	r3, r2
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab94:	4b15      	ldr	r3, [pc, #84]	; (800abec <vPortValidateInterruptPriority+0x74>)
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	7afa      	ldrb	r2, [r7, #11]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d20a      	bcs.n	800abb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	607b      	str	r3, [r7, #4]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <vPortValidateInterruptPriority+0x78>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abbc:	4b0d      	ldr	r3, [pc, #52]	; (800abf4 <vPortValidateInterruptPriority+0x7c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d90a      	bls.n	800abda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	603b      	str	r3, [r7, #0]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <vPortValidateInterruptPriority+0x60>
	}
 800abda:	bf00      	nop
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	e000e3f0 	.word	0xe000e3f0
 800abec:	200008d4 	.word	0x200008d4
 800abf0:	e000ed0c 	.word	0xe000ed0c
 800abf4:	200008d8 	.word	0x200008d8

0800abf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	; 0x28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac04:	f7ff f8f8 	bl	8009df8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac08:	4b5b      	ldr	r3, [pc, #364]	; (800ad78 <pvPortMalloc+0x180>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac10:	f000 f920 	bl	800ae54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac14:	4b59      	ldr	r3, [pc, #356]	; (800ad7c <pvPortMalloc+0x184>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f040 8093 	bne.w	800ad48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01d      	beq.n	800ac64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac28:	2208      	movs	r2, #8
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d014      	beq.n	800ac64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f023 0307 	bic.w	r3, r3, #7
 800ac40:	3308      	adds	r3, #8
 800ac42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <pvPortMalloc+0x6c>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	617b      	str	r3, [r7, #20]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d06e      	beq.n	800ad48 <pvPortMalloc+0x150>
 800ac6a:	4b45      	ldr	r3, [pc, #276]	; (800ad80 <pvPortMalloc+0x188>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d869      	bhi.n	800ad48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac74:	4b43      	ldr	r3, [pc, #268]	; (800ad84 <pvPortMalloc+0x18c>)
 800ac76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac78:	4b42      	ldr	r3, [pc, #264]	; (800ad84 <pvPortMalloc+0x18c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac7e:	e004      	b.n	800ac8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d903      	bls.n	800ac9c <pvPortMalloc+0xa4>
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f1      	bne.n	800ac80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac9c:	4b36      	ldr	r3, [pc, #216]	; (800ad78 <pvPortMalloc+0x180>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d050      	beq.n	800ad48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2208      	movs	r2, #8
 800acac:	4413      	add	r3, r2
 800acae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	1ad2      	subs	r2, r2, r3
 800acc0:	2308      	movs	r3, #8
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d91f      	bls.n	800ad08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <pvPortMalloc+0xf8>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	613b      	str	r3, [r7, #16]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	1ad2      	subs	r2, r2, r3
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad02:	69b8      	ldr	r0, [r7, #24]
 800ad04:	f000 f908 	bl	800af18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad08:	4b1d      	ldr	r3, [pc, #116]	; (800ad80 <pvPortMalloc+0x188>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	4a1b      	ldr	r2, [pc, #108]	; (800ad80 <pvPortMalloc+0x188>)
 800ad14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad16:	4b1a      	ldr	r3, [pc, #104]	; (800ad80 <pvPortMalloc+0x188>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b1b      	ldr	r3, [pc, #108]	; (800ad88 <pvPortMalloc+0x190>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d203      	bcs.n	800ad2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad22:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <pvPortMalloc+0x188>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a18      	ldr	r2, [pc, #96]	; (800ad88 <pvPortMalloc+0x190>)
 800ad28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	4b13      	ldr	r3, [pc, #76]	; (800ad7c <pvPortMalloc+0x184>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	431a      	orrs	r2, r3
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <pvPortMalloc+0x194>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	4a11      	ldr	r2, [pc, #68]	; (800ad8c <pvPortMalloc+0x194>)
 800ad46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad48:	f7ff f864 	bl	8009e14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <pvPortMalloc+0x174>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	60fb      	str	r3, [r7, #12]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <pvPortMalloc+0x172>
	return pvReturn;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3728      	adds	r7, #40	; 0x28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	200044e4 	.word	0x200044e4
 800ad7c:	200044f8 	.word	0x200044f8
 800ad80:	200044e8 	.word	0x200044e8
 800ad84:	200044dc 	.word	0x200044dc
 800ad88:	200044ec 	.word	0x200044ec
 800ad8c:	200044f0 	.word	0x200044f0

0800ad90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d04d      	beq.n	800ae3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ada2:	2308      	movs	r3, #8
 800ada4:	425b      	negs	r3, r3
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	4413      	add	r3, r2
 800adaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	4b24      	ldr	r3, [pc, #144]	; (800ae48 <vPortFree+0xb8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4013      	ands	r3, r2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <vPortFree+0x44>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	60fb      	str	r3, [r7, #12]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00a      	beq.n	800adf2 <vPortFree+0x62>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	60bb      	str	r3, [r7, #8]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <vPortFree+0xb8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d01e      	beq.n	800ae3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d11a      	bne.n	800ae3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <vPortFree+0xb8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	43db      	mvns	r3, r3
 800ae12:	401a      	ands	r2, r3
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae18:	f7fe ffee 	bl	8009df8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <vPortFree+0xbc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4413      	add	r3, r2
 800ae26:	4a09      	ldr	r2, [pc, #36]	; (800ae4c <vPortFree+0xbc>)
 800ae28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f000 f874 	bl	800af18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <vPortFree+0xc0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3301      	adds	r3, #1
 800ae36:	4a06      	ldr	r2, [pc, #24]	; (800ae50 <vPortFree+0xc0>)
 800ae38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae3a:	f7fe ffeb 	bl	8009e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae3e:	bf00      	nop
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	200044f8 	.word	0x200044f8
 800ae4c:	200044e8 	.word	0x200044e8
 800ae50:	200044f4 	.word	0x200044f4

0800ae54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae60:	4b27      	ldr	r3, [pc, #156]	; (800af00 <prvHeapInit+0xac>)
 800ae62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00c      	beq.n	800ae88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3307      	adds	r3, #7
 800ae72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 0307 	bic.w	r3, r3, #7
 800ae7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	4a1f      	ldr	r2, [pc, #124]	; (800af00 <prvHeapInit+0xac>)
 800ae84:	4413      	add	r3, r2
 800ae86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae8c:	4a1d      	ldr	r2, [pc, #116]	; (800af04 <prvHeapInit+0xb0>)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae92:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <prvHeapInit+0xb0>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aea0:	2208      	movs	r2, #8
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0307 	bic.w	r3, r3, #7
 800aeae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4a15      	ldr	r2, [pc, #84]	; (800af08 <prvHeapInit+0xb4>)
 800aeb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aeb6:	4b14      	ldr	r3, [pc, #80]	; (800af08 <prvHeapInit+0xb4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aebe:	4b12      	ldr	r3, [pc, #72]	; (800af08 <prvHeapInit+0xb4>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2200      	movs	r2, #0
 800aec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aed4:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <prvHeapInit+0xb4>)
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a0a      	ldr	r2, [pc, #40]	; (800af0c <prvHeapInit+0xb8>)
 800aee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	4a09      	ldr	r2, [pc, #36]	; (800af10 <prvHeapInit+0xbc>)
 800aeea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aeec:	4b09      	ldr	r3, [pc, #36]	; (800af14 <prvHeapInit+0xc0>)
 800aeee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aef2:	601a      	str	r2, [r3, #0]
}
 800aef4:	bf00      	nop
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	200008dc 	.word	0x200008dc
 800af04:	200044dc 	.word	0x200044dc
 800af08:	200044e4 	.word	0x200044e4
 800af0c:	200044ec 	.word	0x200044ec
 800af10:	200044e8 	.word	0x200044e8
 800af14:	200044f8 	.word	0x200044f8

0800af18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af20:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <prvInsertBlockIntoFreeList+0xac>)
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	e002      	b.n	800af2c <prvInsertBlockIntoFreeList+0x14>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d8f7      	bhi.n	800af26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	4413      	add	r3, r2
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d108      	bne.n	800af5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	441a      	add	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	441a      	add	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d118      	bne.n	800afa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	4b15      	ldr	r3, [pc, #84]	; (800afc8 <prvInsertBlockIntoFreeList+0xb0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d00d      	beq.n	800af96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	441a      	add	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	e008      	b.n	800afa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <prvInsertBlockIntoFreeList+0xb0>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	e003      	b.n	800afa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	429a      	cmp	r2, r3
 800afae:	d002      	beq.n	800afb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	200044dc 	.word	0x200044dc
 800afc8:	200044e4 	.word	0x200044e4

0800afcc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800afd0:	2201      	movs	r2, #1
 800afd2:	490e      	ldr	r1, [pc, #56]	; (800b00c <MX_USB_HOST_Init+0x40>)
 800afd4:	480e      	ldr	r0, [pc, #56]	; (800b010 <MX_USB_HOST_Init+0x44>)
 800afd6:	f7fb ffd5 	bl	8006f84 <USBH_Init>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800afe0:	f7f5 ff0a 	bl	8000df8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800afe4:	490b      	ldr	r1, [pc, #44]	; (800b014 <MX_USB_HOST_Init+0x48>)
 800afe6:	480a      	ldr	r0, [pc, #40]	; (800b010 <MX_USB_HOST_Init+0x44>)
 800afe8:	f7fc f882 	bl	80070f0 <USBH_RegisterClass>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aff2:	f7f5 ff01 	bl	8000df8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aff6:	4806      	ldr	r0, [pc, #24]	; (800b010 <MX_USB_HOST_Init+0x44>)
 800aff8:	f7fc f906 	bl	8007208 <USBH_Start>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b002:	f7f5 fef9 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b006:	bf00      	nop
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	0800b019 	.word	0x0800b019
 800b010:	20004554 	.word	0x20004554
 800b014:	2000000c 	.word	0x2000000c

0800b018 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	3b01      	subs	r3, #1
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d819      	bhi.n	800b060 <USBH_UserProcess+0x48>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <USBH_UserProcess+0x1c>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b061 	.word	0x0800b061
 800b038:	0800b051 	.word	0x0800b051
 800b03c:	0800b061 	.word	0x0800b061
 800b040:	0800b059 	.word	0x0800b059
 800b044:	0800b049 	.word	0x0800b049
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b048:	4b09      	ldr	r3, [pc, #36]	; (800b070 <USBH_UserProcess+0x58>)
 800b04a:	2203      	movs	r2, #3
 800b04c:	701a      	strb	r2, [r3, #0]
  break;
 800b04e:	e008      	b.n	800b062 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b050:	4b07      	ldr	r3, [pc, #28]	; (800b070 <USBH_UserProcess+0x58>)
 800b052:	2202      	movs	r2, #2
 800b054:	701a      	strb	r2, [r3, #0]
  break;
 800b056:	e004      	b.n	800b062 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b058:	4b05      	ldr	r3, [pc, #20]	; (800b070 <USBH_UserProcess+0x58>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	701a      	strb	r2, [r3, #0]
  break;
 800b05e:	e000      	b.n	800b062 <USBH_UserProcess+0x4a>

  default:
  break;
 800b060:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	200044fc 	.word	0x200044fc

0800b074 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b07c:	f107 0314 	add.w	r3, r7, #20
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	605a      	str	r2, [r3, #4]
 800b086:	609a      	str	r2, [r3, #8]
 800b088:	60da      	str	r2, [r3, #12]
 800b08a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b094:	d147      	bne.n	800b126 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b096:	2300      	movs	r3, #0
 800b098:	613b      	str	r3, [r7, #16]
 800b09a:	4b25      	ldr	r3, [pc, #148]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09e:	4a24      	ldr	r2, [pc, #144]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b0a0:	f043 0301 	orr.w	r3, r3, #1
 800b0a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0a6:	4b22      	ldr	r3, [pc, #136]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	613b      	str	r3, [r7, #16]
 800b0b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b0c0:	f107 0314 	add.w	r3, r7, #20
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	481b      	ldr	r0, [pc, #108]	; (800b134 <HAL_HCD_MspInit+0xc0>)
 800b0c8:	f7f6 faaa 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b0cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b0d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b0de:	230a      	movs	r3, #10
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0e2:	f107 0314 	add.w	r3, r7, #20
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	4812      	ldr	r0, [pc, #72]	; (800b134 <HAL_HCD_MspInit+0xc0>)
 800b0ea:	f7f6 fa99 	bl	8001620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b0ee:	4b10      	ldr	r3, [pc, #64]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f2:	4a0f      	ldr	r2, [pc, #60]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f8:	6353      	str	r3, [r2, #52]	; 0x34
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b102:	4a0b      	ldr	r2, [pc, #44]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b108:	6453      	str	r3, [r2, #68]	; 0x44
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <HAL_HCD_MspInit+0xbc>)
 800b10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	2105      	movs	r1, #5
 800b11a:	2043      	movs	r0, #67	; 0x43
 800b11c:	f7f6 fa56 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b120:	2043      	movs	r0, #67	; 0x43
 800b122:	f7f6 fa6f 	bl	8001604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b126:	bf00      	nop
 800b128:	3728      	adds	r7, #40	; 0x28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	40023800 	.word	0x40023800
 800b134:	40020000 	.word	0x40020000

0800b138 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b146:	4618      	mov	r0, r3
 800b148:	f7fc fd0b 	bl	8007b62 <USBH_LL_IncTimer>
}
 800b14c:	bf00      	nop
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b162:	4618      	mov	r0, r3
 800b164:	f7fc fd4f 	bl	8007c06 <USBH_LL_Connect>
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fc fd64 	bl	8007c4c <USBH_LL_Disconnect>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
 800b198:	4613      	mov	r3, r2
 800b19a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fc fd99 	bl	8007cda <USBH_LL_NotifyURBChange>
#endif
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fc fcf9 	bl	8007bb6 <USBH_LL_PortEnabled>
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fc fd05 	bl	8007bea <USBH_LL_PortDisabled>
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d12a      	bne.n	800b250 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b1fa:	4a18      	ldr	r2, [pc, #96]	; (800b25c <USBH_LL_Init+0x74>)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a15      	ldr	r2, [pc, #84]	; (800b25c <USBH_LL_Init+0x74>)
 800b206:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b20a:	4b14      	ldr	r3, [pc, #80]	; (800b25c <USBH_LL_Init+0x74>)
 800b20c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b210:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b212:	4b12      	ldr	r3, [pc, #72]	; (800b25c <USBH_LL_Init+0x74>)
 800b214:	2208      	movs	r2, #8
 800b216:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b218:	4b10      	ldr	r3, [pc, #64]	; (800b25c <USBH_LL_Init+0x74>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b21e:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <USBH_LL_Init+0x74>)
 800b220:	2200      	movs	r2, #0
 800b222:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b224:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <USBH_LL_Init+0x74>)
 800b226:	2202      	movs	r2, #2
 800b228:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b22a:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <USBH_LL_Init+0x74>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b230:	480a      	ldr	r0, [pc, #40]	; (800b25c <USBH_LL_Init+0x74>)
 800b232:	f7f6 fbaa 	bl	800198a <HAL_HCD_Init>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b23c:	f7f5 fddc 	bl	8000df8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b240:	4806      	ldr	r0, [pc, #24]	; (800b25c <USBH_LL_Init+0x74>)
 800b242:	f7f6 ff8e 	bl	8002162 <HAL_HCD_GetCurrentFrame>
 800b246:	4603      	mov	r3, r0
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7fc fc7a 	bl	8007b44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20004938 	.word	0x20004938

0800b260 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b276:	4618      	mov	r0, r3
 800b278:	f7f6 fefd 	bl	8002076 <HAL_HCD_Start>
 800b27c:	4603      	mov	r3, r0
 800b27e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	4618      	mov	r0, r3
 800b284:	f000 f95c 	bl	800b540 <USBH_Get_USB_Status>
 800b288:	4603      	mov	r3, r0
 800b28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7f6 ff05 	bl	80020bc <HAL_HCD_Stop>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 f941 	bl	800b540 <USBH_Get_USB_Status>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f6 ff4d 	bl	800217e <HAL_HCD_GetCurrentSpeed>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d00c      	beq.n	800b304 <USBH_LL_GetSpeed+0x38>
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d80d      	bhi.n	800b30a <USBH_LL_GetSpeed+0x3e>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <USBH_LL_GetSpeed+0x2c>
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d003      	beq.n	800b2fe <USBH_LL_GetSpeed+0x32>
 800b2f6:	e008      	b.n	800b30a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fc:	e008      	b.n	800b310 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b2fe:	2301      	movs	r3, #1
 800b300:	73fb      	strb	r3, [r7, #15]
    break;
 800b302:	e005      	b.n	800b310 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b304:	2302      	movs	r3, #2
 800b306:	73fb      	strb	r3, [r7, #15]
    break;
 800b308:	e002      	b.n	800b310 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b30a:	2301      	movs	r3, #1
 800b30c:	73fb      	strb	r3, [r7, #15]
    break;
 800b30e:	bf00      	nop
  }
  return  speed;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b330:	4618      	mov	r0, r3
 800b332:	f7f6 fee0 	bl	80020f6 <HAL_HCD_ResetPort>
 800b336:	4603      	mov	r3, r0
 800b338:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 f8ff 	bl	800b540 <USBH_Get_USB_Status>
 800b342:	4603      	mov	r3, r0
 800b344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b346:	7bbb      	ldrb	r3, [r7, #14]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b362:	78fa      	ldrb	r2, [r7, #3]
 800b364:	4611      	mov	r1, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f7f6 fee7 	bl	800213a <HAL_HCD_HC_GetXferCount>
 800b36c:	4603      	mov	r3, r0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b376:	b590      	push	{r4, r7, lr}
 800b378:	b089      	sub	sp, #36	; 0x24
 800b37a:	af04      	add	r7, sp, #16
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	4608      	mov	r0, r1
 800b380:	4611      	mov	r1, r2
 800b382:	461a      	mov	r2, r3
 800b384:	4603      	mov	r3, r0
 800b386:	70fb      	strb	r3, [r7, #3]
 800b388:	460b      	mov	r3, r1
 800b38a:	70bb      	strb	r3, [r7, #2]
 800b38c:	4613      	mov	r3, r2
 800b38e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b39e:	787c      	ldrb	r4, [r7, #1]
 800b3a0:	78ba      	ldrb	r2, [r7, #2]
 800b3a2:	78f9      	ldrb	r1, [r7, #3]
 800b3a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3a6:	9302      	str	r3, [sp, #8]
 800b3a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	4623      	mov	r3, r4
 800b3b6:	f7f6 fb4a 	bl	8001a4e <HAL_HCD_HC_Init>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 f8bd 	bl	800b540 <USBH_Get_USB_Status>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd90      	pop	{r4, r7, pc}

0800b3d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ee:	78fa      	ldrb	r2, [r7, #3]
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7f6 fbba 	bl	8001b6c <HAL_HCD_HC_Halt>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f89e 	bl	800b540 <USBH_Get_USB_Status>
 800b404:	4603      	mov	r3, r0
 800b406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b408:	7bbb      	ldrb	r3, [r7, #14]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b412:	b590      	push	{r4, r7, lr}
 800b414:	b089      	sub	sp, #36	; 0x24
 800b416:	af04      	add	r7, sp, #16
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	4608      	mov	r0, r1
 800b41c:	4611      	mov	r1, r2
 800b41e:	461a      	mov	r2, r3
 800b420:	4603      	mov	r3, r0
 800b422:	70fb      	strb	r3, [r7, #3]
 800b424:	460b      	mov	r3, r1
 800b426:	70bb      	strb	r3, [r7, #2]
 800b428:	4613      	mov	r3, r2
 800b42a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b43a:	787c      	ldrb	r4, [r7, #1]
 800b43c:	78ba      	ldrb	r2, [r7, #2]
 800b43e:	78f9      	ldrb	r1, [r7, #3]
 800b440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b444:	9303      	str	r3, [sp, #12]
 800b446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b448:	9302      	str	r3, [sp, #8]
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	4623      	mov	r3, r4
 800b456:	f7f6 fbad 	bl	8001bb4 <HAL_HCD_HC_SubmitRequest>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	4618      	mov	r0, r3
 800b462:	f000 f86d 	bl	800b540 <USBH_Get_USB_Status>
 800b466:	4603      	mov	r3, r0
 800b468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	bd90      	pop	{r4, r7, pc}

0800b474 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b486:	78fa      	ldrb	r2, [r7, #3]
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7f6 fe41 	bl	8002112 <HAL_HCD_HC_GetURBState>
 800b490:	4603      	mov	r3, r0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d103      	bne.n	800b4b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 f870 	bl	800b598 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b4b8:	20c8      	movs	r0, #200	; 0xc8
 800b4ba:	f7f5 ffab 	bl	8001414 <HAL_Delay>
  return USBH_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	212c      	movs	r1, #44	; 0x2c
 800b4e6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	333b      	adds	r3, #59	; 0x3b
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d009      	beq.n	800b508 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b4f4:	78fb      	ldrb	r3, [r7, #3]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	212c      	movs	r1, #44	; 0x2c
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	4413      	add	r3, r2
 800b500:	3354      	adds	r3, #84	; 0x54
 800b502:	78ba      	ldrb	r2, [r7, #2]
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	e008      	b.n	800b51a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	212c      	movs	r1, #44	; 0x2c
 800b50e:	fb01 f303 	mul.w	r3, r1, r3
 800b512:	4413      	add	r3, r2
 800b514:	3355      	adds	r3, #85	; 0x55
 800b516:	78ba      	ldrb	r2, [r7, #2]
 800b518:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7f5 ff6f 	bl	8001414 <HAL_Delay>
}
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
	...

0800b540 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b03      	cmp	r3, #3
 800b552:	d817      	bhi.n	800b584 <USBH_Get_USB_Status+0x44>
 800b554:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <USBH_Get_USB_Status+0x1c>)
 800b556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55a:	bf00      	nop
 800b55c:	0800b56d 	.word	0x0800b56d
 800b560:	0800b573 	.word	0x0800b573
 800b564:	0800b579 	.word	0x0800b579
 800b568:	0800b57f 	.word	0x0800b57f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
    break;
 800b570:	e00b      	b.n	800b58a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b572:	2302      	movs	r3, #2
 800b574:	73fb      	strb	r3, [r7, #15]
    break;
 800b576:	e008      	b.n	800b58a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b578:	2301      	movs	r3, #1
 800b57a:	73fb      	strb	r3, [r7, #15]
    break;
 800b57c:	e005      	b.n	800b58a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b57e:	2302      	movs	r3, #2
 800b580:	73fb      	strb	r3, [r7, #15]
    break;
 800b582:	e002      	b.n	800b58a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b584:	2302      	movs	r3, #2
 800b586:	73fb      	strb	r3, [r7, #15]
    break;
 800b588:	bf00      	nop
  }
  return usb_status;
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d102      	bne.n	800b5b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
 800b5b0:	e001      	b.n	800b5b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	4803      	ldr	r0, [pc, #12]	; (800b5cc <MX_DriverVbusFS+0x34>)
 800b5be:	f7f6 f9cb 	bl	8001958 <HAL_GPIO_WritePin>
}
 800b5c2:	bf00      	nop
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	40020800 	.word	0x40020800

0800b5d0 <__errno>:
 800b5d0:	4b01      	ldr	r3, [pc, #4]	; (800b5d8 <__errno+0x8>)
 800b5d2:	6818      	ldr	r0, [r3, #0]
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	20000030 	.word	0x20000030

0800b5dc <__libc_init_array>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	4d0d      	ldr	r5, [pc, #52]	; (800b614 <__libc_init_array+0x38>)
 800b5e0:	4c0d      	ldr	r4, [pc, #52]	; (800b618 <__libc_init_array+0x3c>)
 800b5e2:	1b64      	subs	r4, r4, r5
 800b5e4:	10a4      	asrs	r4, r4, #2
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	42a6      	cmp	r6, r4
 800b5ea:	d109      	bne.n	800b600 <__libc_init_array+0x24>
 800b5ec:	4d0b      	ldr	r5, [pc, #44]	; (800b61c <__libc_init_array+0x40>)
 800b5ee:	4c0c      	ldr	r4, [pc, #48]	; (800b620 <__libc_init_array+0x44>)
 800b5f0:	f000 f970 	bl	800b8d4 <_init>
 800b5f4:	1b64      	subs	r4, r4, r5
 800b5f6:	10a4      	asrs	r4, r4, #2
 800b5f8:	2600      	movs	r6, #0
 800b5fa:	42a6      	cmp	r6, r4
 800b5fc:	d105      	bne.n	800b60a <__libc_init_array+0x2e>
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	f855 3b04 	ldr.w	r3, [r5], #4
 800b604:	4798      	blx	r3
 800b606:	3601      	adds	r6, #1
 800b608:	e7ee      	b.n	800b5e8 <__libc_init_array+0xc>
 800b60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b60e:	4798      	blx	r3
 800b610:	3601      	adds	r6, #1
 800b612:	e7f2      	b.n	800b5fa <__libc_init_array+0x1e>
 800b614:	0800ba3c 	.word	0x0800ba3c
 800b618:	0800ba3c 	.word	0x0800ba3c
 800b61c:	0800ba3c 	.word	0x0800ba3c
 800b620:	0800ba40 	.word	0x0800ba40

0800b624 <__retarget_lock_acquire_recursive>:
 800b624:	4770      	bx	lr

0800b626 <__retarget_lock_release_recursive>:
 800b626:	4770      	bx	lr

0800b628 <malloc>:
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <malloc+0xc>)
 800b62a:	4601      	mov	r1, r0
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	f000 b871 	b.w	800b714 <_malloc_r>
 800b632:	bf00      	nop
 800b634:	20000030 	.word	0x20000030

0800b638 <free>:
 800b638:	4b02      	ldr	r3, [pc, #8]	; (800b644 <free+0xc>)
 800b63a:	4601      	mov	r1, r0
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	f000 b819 	b.w	800b674 <_free_r>
 800b642:	bf00      	nop
 800b644:	20000030 	.word	0x20000030

0800b648 <memcpy>:
 800b648:	440a      	add	r2, r1
 800b64a:	4291      	cmp	r1, r2
 800b64c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b650:	d100      	bne.n	800b654 <memcpy+0xc>
 800b652:	4770      	bx	lr
 800b654:	b510      	push	{r4, lr}
 800b656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b65a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b65e:	4291      	cmp	r1, r2
 800b660:	d1f9      	bne.n	800b656 <memcpy+0xe>
 800b662:	bd10      	pop	{r4, pc}

0800b664 <memset>:
 800b664:	4402      	add	r2, r0
 800b666:	4603      	mov	r3, r0
 800b668:	4293      	cmp	r3, r2
 800b66a:	d100      	bne.n	800b66e <memset+0xa>
 800b66c:	4770      	bx	lr
 800b66e:	f803 1b01 	strb.w	r1, [r3], #1
 800b672:	e7f9      	b.n	800b668 <memset+0x4>

0800b674 <_free_r>:
 800b674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b676:	2900      	cmp	r1, #0
 800b678:	d048      	beq.n	800b70c <_free_r+0x98>
 800b67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b67e:	9001      	str	r0, [sp, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f1a1 0404 	sub.w	r4, r1, #4
 800b686:	bfb8      	it	lt
 800b688:	18e4      	addlt	r4, r4, r3
 800b68a:	f000 f917 	bl	800b8bc <__malloc_lock>
 800b68e:	4a20      	ldr	r2, [pc, #128]	; (800b710 <_free_r+0x9c>)
 800b690:	9801      	ldr	r0, [sp, #4]
 800b692:	6813      	ldr	r3, [r2, #0]
 800b694:	4615      	mov	r5, r2
 800b696:	b933      	cbnz	r3, 800b6a6 <_free_r+0x32>
 800b698:	6063      	str	r3, [r4, #4]
 800b69a:	6014      	str	r4, [r2, #0]
 800b69c:	b003      	add	sp, #12
 800b69e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a2:	f000 b911 	b.w	800b8c8 <__malloc_unlock>
 800b6a6:	42a3      	cmp	r3, r4
 800b6a8:	d90b      	bls.n	800b6c2 <_free_r+0x4e>
 800b6aa:	6821      	ldr	r1, [r4, #0]
 800b6ac:	1862      	adds	r2, r4, r1
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	bf04      	itt	eq
 800b6b2:	681a      	ldreq	r2, [r3, #0]
 800b6b4:	685b      	ldreq	r3, [r3, #4]
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	bf04      	itt	eq
 800b6ba:	1852      	addeq	r2, r2, r1
 800b6bc:	6022      	streq	r2, [r4, #0]
 800b6be:	602c      	str	r4, [r5, #0]
 800b6c0:	e7ec      	b.n	800b69c <_free_r+0x28>
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	b10b      	cbz	r3, 800b6cc <_free_r+0x58>
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	d9fa      	bls.n	800b6c2 <_free_r+0x4e>
 800b6cc:	6811      	ldr	r1, [r2, #0]
 800b6ce:	1855      	adds	r5, r2, r1
 800b6d0:	42a5      	cmp	r5, r4
 800b6d2:	d10b      	bne.n	800b6ec <_free_r+0x78>
 800b6d4:	6824      	ldr	r4, [r4, #0]
 800b6d6:	4421      	add	r1, r4
 800b6d8:	1854      	adds	r4, r2, r1
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	6011      	str	r1, [r2, #0]
 800b6de:	d1dd      	bne.n	800b69c <_free_r+0x28>
 800b6e0:	681c      	ldr	r4, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	6053      	str	r3, [r2, #4]
 800b6e6:	4421      	add	r1, r4
 800b6e8:	6011      	str	r1, [r2, #0]
 800b6ea:	e7d7      	b.n	800b69c <_free_r+0x28>
 800b6ec:	d902      	bls.n	800b6f4 <_free_r+0x80>
 800b6ee:	230c      	movs	r3, #12
 800b6f0:	6003      	str	r3, [r0, #0]
 800b6f2:	e7d3      	b.n	800b69c <_free_r+0x28>
 800b6f4:	6825      	ldr	r5, [r4, #0]
 800b6f6:	1961      	adds	r1, r4, r5
 800b6f8:	428b      	cmp	r3, r1
 800b6fa:	bf04      	itt	eq
 800b6fc:	6819      	ldreq	r1, [r3, #0]
 800b6fe:	685b      	ldreq	r3, [r3, #4]
 800b700:	6063      	str	r3, [r4, #4]
 800b702:	bf04      	itt	eq
 800b704:	1949      	addeq	r1, r1, r5
 800b706:	6021      	streq	r1, [r4, #0]
 800b708:	6054      	str	r4, [r2, #4]
 800b70a:	e7c7      	b.n	800b69c <_free_r+0x28>
 800b70c:	b003      	add	sp, #12
 800b70e:	bd30      	pop	{r4, r5, pc}
 800b710:	20004500 	.word	0x20004500

0800b714 <_malloc_r>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	1ccd      	adds	r5, r1, #3
 800b718:	f025 0503 	bic.w	r5, r5, #3
 800b71c:	3508      	adds	r5, #8
 800b71e:	2d0c      	cmp	r5, #12
 800b720:	bf38      	it	cc
 800b722:	250c      	movcc	r5, #12
 800b724:	2d00      	cmp	r5, #0
 800b726:	4606      	mov	r6, r0
 800b728:	db01      	blt.n	800b72e <_malloc_r+0x1a>
 800b72a:	42a9      	cmp	r1, r5
 800b72c:	d903      	bls.n	800b736 <_malloc_r+0x22>
 800b72e:	230c      	movs	r3, #12
 800b730:	6033      	str	r3, [r6, #0]
 800b732:	2000      	movs	r0, #0
 800b734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b736:	f000 f8c1 	bl	800b8bc <__malloc_lock>
 800b73a:	4921      	ldr	r1, [pc, #132]	; (800b7c0 <_malloc_r+0xac>)
 800b73c:	680a      	ldr	r2, [r1, #0]
 800b73e:	4614      	mov	r4, r2
 800b740:	b99c      	cbnz	r4, 800b76a <_malloc_r+0x56>
 800b742:	4f20      	ldr	r7, [pc, #128]	; (800b7c4 <_malloc_r+0xb0>)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	b923      	cbnz	r3, 800b752 <_malloc_r+0x3e>
 800b748:	4621      	mov	r1, r4
 800b74a:	4630      	mov	r0, r6
 800b74c:	f000 f8a6 	bl	800b89c <_sbrk_r>
 800b750:	6038      	str	r0, [r7, #0]
 800b752:	4629      	mov	r1, r5
 800b754:	4630      	mov	r0, r6
 800b756:	f000 f8a1 	bl	800b89c <_sbrk_r>
 800b75a:	1c43      	adds	r3, r0, #1
 800b75c:	d123      	bne.n	800b7a6 <_malloc_r+0x92>
 800b75e:	230c      	movs	r3, #12
 800b760:	6033      	str	r3, [r6, #0]
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f8b0 	bl	800b8c8 <__malloc_unlock>
 800b768:	e7e3      	b.n	800b732 <_malloc_r+0x1e>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	1b5b      	subs	r3, r3, r5
 800b76e:	d417      	bmi.n	800b7a0 <_malloc_r+0x8c>
 800b770:	2b0b      	cmp	r3, #11
 800b772:	d903      	bls.n	800b77c <_malloc_r+0x68>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	441c      	add	r4, r3
 800b778:	6025      	str	r5, [r4, #0]
 800b77a:	e004      	b.n	800b786 <_malloc_r+0x72>
 800b77c:	6863      	ldr	r3, [r4, #4]
 800b77e:	42a2      	cmp	r2, r4
 800b780:	bf0c      	ite	eq
 800b782:	600b      	streq	r3, [r1, #0]
 800b784:	6053      	strne	r3, [r2, #4]
 800b786:	4630      	mov	r0, r6
 800b788:	f000 f89e 	bl	800b8c8 <__malloc_unlock>
 800b78c:	f104 000b 	add.w	r0, r4, #11
 800b790:	1d23      	adds	r3, r4, #4
 800b792:	f020 0007 	bic.w	r0, r0, #7
 800b796:	1ac2      	subs	r2, r0, r3
 800b798:	d0cc      	beq.n	800b734 <_malloc_r+0x20>
 800b79a:	1a1b      	subs	r3, r3, r0
 800b79c:	50a3      	str	r3, [r4, r2]
 800b79e:	e7c9      	b.n	800b734 <_malloc_r+0x20>
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	6864      	ldr	r4, [r4, #4]
 800b7a4:	e7cc      	b.n	800b740 <_malloc_r+0x2c>
 800b7a6:	1cc4      	adds	r4, r0, #3
 800b7a8:	f024 0403 	bic.w	r4, r4, #3
 800b7ac:	42a0      	cmp	r0, r4
 800b7ae:	d0e3      	beq.n	800b778 <_malloc_r+0x64>
 800b7b0:	1a21      	subs	r1, r4, r0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 f872 	bl	800b89c <_sbrk_r>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d1dd      	bne.n	800b778 <_malloc_r+0x64>
 800b7bc:	e7cf      	b.n	800b75e <_malloc_r+0x4a>
 800b7be:	bf00      	nop
 800b7c0:	20004500 	.word	0x20004500
 800b7c4:	20004504 	.word	0x20004504

0800b7c8 <cleanup_glue>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	6809      	ldr	r1, [r1, #0]
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	b109      	cbz	r1, 800b7d6 <cleanup_glue+0xe>
 800b7d2:	f7ff fff9 	bl	800b7c8 <cleanup_glue>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7de:	f7ff bf49 	b.w	800b674 <_free_r>
	...

0800b7e4 <_reclaim_reent>:
 800b7e4:	4b2c      	ldr	r3, [pc, #176]	; (800b898 <_reclaim_reent+0xb4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4283      	cmp	r3, r0
 800b7ea:	b570      	push	{r4, r5, r6, lr}
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	d051      	beq.n	800b894 <_reclaim_reent+0xb0>
 800b7f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b7f2:	b143      	cbz	r3, 800b806 <_reclaim_reent+0x22>
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d14a      	bne.n	800b890 <_reclaim_reent+0xac>
 800b7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fc:	6819      	ldr	r1, [r3, #0]
 800b7fe:	b111      	cbz	r1, 800b806 <_reclaim_reent+0x22>
 800b800:	4620      	mov	r0, r4
 800b802:	f7ff ff37 	bl	800b674 <_free_r>
 800b806:	6961      	ldr	r1, [r4, #20]
 800b808:	b111      	cbz	r1, 800b810 <_reclaim_reent+0x2c>
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff ff32 	bl	800b674 <_free_r>
 800b810:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b812:	b111      	cbz	r1, 800b81a <_reclaim_reent+0x36>
 800b814:	4620      	mov	r0, r4
 800b816:	f7ff ff2d 	bl	800b674 <_free_r>
 800b81a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b81c:	b111      	cbz	r1, 800b824 <_reclaim_reent+0x40>
 800b81e:	4620      	mov	r0, r4
 800b820:	f7ff ff28 	bl	800b674 <_free_r>
 800b824:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b826:	b111      	cbz	r1, 800b82e <_reclaim_reent+0x4a>
 800b828:	4620      	mov	r0, r4
 800b82a:	f7ff ff23 	bl	800b674 <_free_r>
 800b82e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b830:	b111      	cbz	r1, 800b838 <_reclaim_reent+0x54>
 800b832:	4620      	mov	r0, r4
 800b834:	f7ff ff1e 	bl	800b674 <_free_r>
 800b838:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b83a:	b111      	cbz	r1, 800b842 <_reclaim_reent+0x5e>
 800b83c:	4620      	mov	r0, r4
 800b83e:	f7ff ff19 	bl	800b674 <_free_r>
 800b842:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b844:	b111      	cbz	r1, 800b84c <_reclaim_reent+0x68>
 800b846:	4620      	mov	r0, r4
 800b848:	f7ff ff14 	bl	800b674 <_free_r>
 800b84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b84e:	b111      	cbz	r1, 800b856 <_reclaim_reent+0x72>
 800b850:	4620      	mov	r0, r4
 800b852:	f7ff ff0f 	bl	800b674 <_free_r>
 800b856:	69a3      	ldr	r3, [r4, #24]
 800b858:	b1e3      	cbz	r3, 800b894 <_reclaim_reent+0xb0>
 800b85a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b85c:	4620      	mov	r0, r4
 800b85e:	4798      	blx	r3
 800b860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b862:	b1b9      	cbz	r1, 800b894 <_reclaim_reent+0xb0>
 800b864:	4620      	mov	r0, r4
 800b866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b86a:	f7ff bfad 	b.w	800b7c8 <cleanup_glue>
 800b86e:	5949      	ldr	r1, [r1, r5]
 800b870:	b941      	cbnz	r1, 800b884 <_reclaim_reent+0xa0>
 800b872:	3504      	adds	r5, #4
 800b874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b876:	2d80      	cmp	r5, #128	; 0x80
 800b878:	68d9      	ldr	r1, [r3, #12]
 800b87a:	d1f8      	bne.n	800b86e <_reclaim_reent+0x8a>
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7ff fef9 	bl	800b674 <_free_r>
 800b882:	e7ba      	b.n	800b7fa <_reclaim_reent+0x16>
 800b884:	680e      	ldr	r6, [r1, #0]
 800b886:	4620      	mov	r0, r4
 800b888:	f7ff fef4 	bl	800b674 <_free_r>
 800b88c:	4631      	mov	r1, r6
 800b88e:	e7ef      	b.n	800b870 <_reclaim_reent+0x8c>
 800b890:	2500      	movs	r5, #0
 800b892:	e7ef      	b.n	800b874 <_reclaim_reent+0x90>
 800b894:	bd70      	pop	{r4, r5, r6, pc}
 800b896:	bf00      	nop
 800b898:	20000030 	.word	0x20000030

0800b89c <_sbrk_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d06      	ldr	r5, [pc, #24]	; (800b8b8 <_sbrk_r+0x1c>)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	f7f5 fd00 	bl	80012ac <_sbrk>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_sbrk_r+0x1a>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_sbrk_r+0x1a>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	20004c48 	.word	0x20004c48

0800b8bc <__malloc_lock>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__malloc_lock+0x8>)
 800b8be:	f7ff beb1 	b.w	800b624 <__retarget_lock_acquire_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	20004c40 	.word	0x20004c40

0800b8c8 <__malloc_unlock>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__malloc_unlock+0x8>)
 800b8ca:	f7ff beac 	b.w	800b626 <__retarget_lock_release_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	20004c40 	.word	0x20004c40

0800b8d4 <_init>:
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d6:	bf00      	nop
 800b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8da:	bc08      	pop	{r3}
 800b8dc:	469e      	mov	lr, r3
 800b8de:	4770      	bx	lr

0800b8e0 <_fini>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	bf00      	nop
 800b8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e6:	bc08      	pop	{r3}
 800b8e8:	469e      	mov	lr, r3
 800b8ea:	4770      	bx	lr
